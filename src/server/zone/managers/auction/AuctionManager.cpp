/*
 *	server/zone/managers/auction/AuctionManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "AuctionManager.h"

#include "AuctionManagerImplementation.h"

/*
 *	AuctionManagerStub
 */

AuctionManager::AuctionManager() {
	_impl = new AuctionManagerImplementation();
	_impl->_setStub(this);
}

AuctionManager::AuctionManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

AuctionManager::~AuctionManager() {
}

/*
 *	AuctionManagerAdapter
 */

AuctionManagerAdapter::AuctionManagerAdapter(AuctionManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* AuctionManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	AuctionManagerHelper
 */

AuctionManagerHelper* AuctionManagerHelper::staticInitializer = AuctionManagerHelper::instance();

AuctionManagerHelper::AuctionManagerHelper() {
	className = "AuctionManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AuctionManagerHelper::finalizeHelper() {
	AuctionManagerHelper::finalize();
}

DistributedObject* AuctionManagerHelper::instantiateObject() {
	return new AuctionManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AuctionManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AuctionManagerAdapter((AuctionManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	AuctionManagerServant
 */

AuctionManagerServant::AuctionManagerServant() {
	_classHelper = AuctionManagerHelper::instance();
}

AuctionManagerServant::~AuctionManagerServant() {
}

void AuctionManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (AuctionManager*) stub;
}

DistributedObjectStub* AuctionManagerServant::_getStub() {
	return _this;
}

