/*
 *	server/zone/managers/objectcontroller/ObjectController.cpp generated by engine3 IDL compiler 0.60
 */

#include "ObjectController.h"

#include "server/zone/managers/objectcontroller/command/CommandList.h"

#include "server/zone/managers/objectcontroller/command/CommandConfigManager.h"

#include "server/zone/objects/creature/commands/QueueCommand.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"


// Imported class dependencies

#include "server/zone/objects/scene/variables/StringId.h"

#include "system/net/Socket.h"

#include "server/zone/managers/name/NameManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/login/account/AccountManager.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/service/proto/BaseMessage.h"

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "system/net/SocketAddress.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "system/lang/Time.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "engine/core/Task.h"

#include "engine/service/Message.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "system/io/ObjectInputStream.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "system/net/Packet.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/core/ManagedObject.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "system/util/SortedVector.h"

#include "engine/util/Facade.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "system/util/Vector.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "system/util/VectorMap.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "engine/util/u3d/Coordinate.h"

/*
 *	ObjectControllerStub
 */

enum {RPC_FINALIZE__ = 6,RPC_LOADCOMMANDS__,RPC_TRANSFEROBJECT__SCENEOBJECT_SCENEOBJECT_INT_BOOL_,RPC_ACTIVATECOMMAND__CREATUREOBJECT_INT_INT_LONG_UNICODESTRING_,};

ObjectController::ObjectController(ZoneProcessServer* srv) : ManagedService(DummyConstructorParameter::instance()) {
	ObjectControllerImplementation* _implementation = new ObjectControllerImplementation(srv);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

ObjectController::ObjectController(DummyConstructorParameter* param) : ManagedService(param) {
}

ObjectController::~ObjectController() {
}


void ObjectController::loadCommands() {
	ObjectControllerImplementation* _implementation = (ObjectControllerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADCOMMANDS__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadCommands();
}

bool ObjectController::transferObject(SceneObject* objectToTransfer, SceneObject* destinationObject, int containmentType, bool notifyClient) {
	ObjectControllerImplementation* _implementation = (ObjectControllerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TRANSFEROBJECT__SCENEOBJECT_SCENEOBJECT_INT_BOOL_);
		method.addObjectParameter(objectToTransfer);
		method.addObjectParameter(destinationObject);
		method.addSignedIntParameter(containmentType);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->transferObject(objectToTransfer, destinationObject, containmentType, notifyClient);
}

float ObjectController::activateCommand(CreatureObject* object, unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, const UnicodeString& arguments) {
	ObjectControllerImplementation* _implementation = (ObjectControllerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATECOMMAND__CREATUREOBJECT_INT_INT_LONG_UNICODESTRING_);
		method.addObjectParameter(object);
		method.addUnsignedIntParameter(actionCRC);
		method.addUnsignedIntParameter(actionCount);
		method.addUnsignedLongParameter(targetID);
		method.addUnicodeParameter(arguments);

		return method.executeWithFloatReturn();
	} else
		return _implementation->activateCommand(object, actionCRC, actionCount, targetID, arguments);
}

void ObjectController::addQueueCommand(QueueCommand* command) {
	ObjectControllerImplementation* _implementation = (ObjectControllerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addQueueCommand(command);
}

QueueCommand* ObjectController::getQueueCommand(const String& name) {
	ObjectControllerImplementation* _implementation = (ObjectControllerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getQueueCommand(name);
}

QueueCommand* ObjectController::getQueueCommand(unsigned int crc) {
	ObjectControllerImplementation* _implementation = (ObjectControllerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getQueueCommand(crc);
}

DistributedObjectServant* ObjectController::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void ObjectController::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<ObjectControllerImplementation*>(servant));
}

/*
 *	ObjectControllerImplementation
 */

ObjectControllerImplementation::ObjectControllerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ObjectControllerImplementation::~ObjectControllerImplementation() {
	if (_this->isCurrentVersion(this))
	ObjectControllerImplementation::finalize();
}


void ObjectControllerImplementation::_initializeImplementation() {
	_setClassHelper(ObjectControllerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ObjectControllerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ObjectController*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ObjectControllerImplementation::_getStub() {
	return _this;
}

ObjectControllerImplementation::operator const ObjectController*() {
	return _this;
}

Object* ObjectControllerImplementation::clone() {
	return dynamic_cast<Object*>(new ObjectControllerImplementation(*this));
}


void ObjectControllerImplementation::lock(bool doLock) {
}

void ObjectControllerImplementation::lock(ManagedObject* obj) {
}

void ObjectControllerImplementation::rlock(bool doLock) {
}

void ObjectControllerImplementation::wlock(bool doLock) {
}

void ObjectControllerImplementation::wlock(ManagedObject* obj) {
}

void ObjectControllerImplementation::unlock(bool doLock) {
}

void ObjectControllerImplementation::runlock(bool doLock) {
}

void ObjectControllerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ObjectController");

}

void ObjectControllerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ObjectControllerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ObjectControllerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ObjectControllerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ObjectControllerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ObjectControllerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ManagedServiceImplementation::writeObjectMembers(stream);
}

ObjectControllerImplementation::ObjectControllerImplementation(ZoneProcessServer* srv) {
	_initializeImplementation();
	// server/zone/managers/objectcontroller/ObjectController.idl():  		server = srv;
	server = srv;
	// server/zone/managers/objectcontroller/ObjectController.idl():  		Logger.setLoggingName("ObjectController");
	Logger::setLoggingName("ObjectController");
	// server/zone/managers/objectcontroller/ObjectController.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/objectcontroller/ObjectController.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/objectcontroller/ObjectController.idl():  		loadCommands();
	loadCommands();
}

/*
 *	ObjectControllerAdapter
 */

ObjectControllerAdapter::ObjectControllerAdapter(ObjectControllerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* ObjectControllerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_LOADCOMMANDS__:
		loadCommands();
		break;
	case RPC_TRANSFEROBJECT__SCENEOBJECT_SCENEOBJECT_INT_BOOL_:
		resp->insertBoolean(transferObject((SceneObject*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case RPC_ACTIVATECOMMAND__CREATUREOBJECT_INT_INT_LONG_UNICODESTRING_:
		resp->insertFloat(activateCommand((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedLongParameter(), inv->getUnicodeParameter(_param4_activateCommand__CreatureObject_int_int_long_UnicodeString_)));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ObjectControllerAdapter::finalize() {
	((ObjectControllerImplementation*) impl)->finalize();
}

void ObjectControllerAdapter::loadCommands() {
	((ObjectControllerImplementation*) impl)->loadCommands();
}

bool ObjectControllerAdapter::transferObject(SceneObject* objectToTransfer, SceneObject* destinationObject, int containmentType, bool notifyClient) {
	return ((ObjectControllerImplementation*) impl)->transferObject(objectToTransfer, destinationObject, containmentType, notifyClient);
}

float ObjectControllerAdapter::activateCommand(CreatureObject* object, unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, const UnicodeString& arguments) {
	return ((ObjectControllerImplementation*) impl)->activateCommand(object, actionCRC, actionCount, targetID, arguments);
}

/*
 *	ObjectControllerHelper
 */

ObjectControllerHelper* ObjectControllerHelper::staticInitializer = ObjectControllerHelper::instance();

ObjectControllerHelper::ObjectControllerHelper() {
	className = "ObjectController";

	Core::getObjectBroker()->registerClass(className, this);
}

void ObjectControllerHelper::finalizeHelper() {
	ObjectControllerHelper::finalize();
}

DistributedObject* ObjectControllerHelper::instantiateObject() {
	return new ObjectController(DummyConstructorParameter::instance());
}

DistributedObjectServant* ObjectControllerHelper::instantiateServant() {
	return new ObjectControllerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ObjectControllerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ObjectControllerAdapter((ObjectControllerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

