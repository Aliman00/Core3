/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

/*
 *	server/zone/managers/resource/ResourceTemplate.h generated by Engine3 IDL compiler 0.51
 */

#ifndef RESOURCETEMPLATE_H_
#define RESOURCETEMPLATE_H_

#include "engine/orb/ObjectRequestBroker.h"

class SpawnLocation;

class ResourceTemplate : public ORBObjectStub {
public:
	ResourceTemplate();
	ResourceTemplate(ORBObjectServant* obj);
	ResourceTemplate(ResourceTemplate& ref);

	ResourceTemplate* clone();

	virtual ~ResourceTemplate();

	SpawnLocation* getSpawn(int i);

	int getSpawnSize();

	void addSpawn(SpawnLocation* sl);

	SpawnLocation* removeSpawn(int id);

	void setName(const string& instring);

	void setClass1(const string& inString);

	void setClass2(const string& inString);

	void setClass3(const string& inString);

	void setClass4(const string& inString);

	void setClass5(const string& inString);

	void setClass6(const string& inString);

	void setClass7(const string& inString);

	void setAtt1(const string& inString);

	void setAtt2(const string& inString);

	void setAtt3(const string& inString);

	void setAtt4(const string& inString);

	void setAtt5(const string& inString);

	void setAtt6(const string& inString);

	void setAtt7(const string& inString);

	void setAtt8(const string& inString);

	void setAtt9(const string& inString);

	void setAtt10(const string& inString);

	void setAtt11(const string& inString);

	void setAtt1Stat(int inInt);

	void setAtt2Stat(int inInt);

	void setAtt3Stat(int inInt);

	void setAtt4Stat(int inInt);

	void setAtt5Stat(int inInt);

	void setAtt6Stat(int inInt);

	void setAtt7Stat(int inInt);

	void setAtt8Stat(int inInt);

	void setAtt9Stat(int inInt);

	void setAtt10Stat(int inInt);

	void setAtt11Stat(int inInt);

	void setMaxType(int inInt);

	void setMinType(int inInt);

	void setMaxPool(int inInt);

	void setMinPool(int inInt);

	void setContainer(const string& inString);

	void setContainerCRC(unsigned int inCRC);

	void setResourceID(unsigned long long inCRC);

	string& getName();

	string& getType();

	string& getClass1();

	string& getClass2();

	string& getClass3();

	string& getClass4();

	string& getClass5();

	string& getClass6();

	string& getClass7();

	string& getAtt1();

	string& getAtt2();

	string& getAtt3();

	string& getAtt4();

	string& getAtt5();

	string& getAtt6();

	string& getAtt7();

	string& getAtt8();

	string& getAtt9();

	string& getAtt10();

	string& getAtt11();

	int getAtt1Stat();

	int getAtt2Stat();

	int getAtt3Stat();

	int getAtt4Stat();

	int getAtt5Stat();

	int getAtt6Stat();

	int getAtt7Stat();

	int getAtt8Stat();

	int getAtt9Stat();

	int getAtt10Stat();

	int getAtt11Stat();

	int getMaxType();

	int getMinType();

	int getMaxPool();

	int getMinPool();

	string& getContainer();

	unsigned int getContainerCRC();

	unsigned long long getResourceID();

	int getObjectSubType();

protected:
	string _return_getAtt1;

	string _return_getAtt10;

	string _return_getAtt11;

	string _return_getAtt2;

	string _return_getAtt3;

	string _return_getAtt4;

	string _return_getAtt5;

	string _return_getAtt6;

	string _return_getAtt7;

	string _return_getAtt8;

	string _return_getAtt9;

	string _return_getClass1;

	string _return_getClass2;

	string _return_getClass3;

	string _return_getClass4;

	string _return_getClass5;

	string _return_getClass6;

	string _return_getClass7;

	string _return_getContainer;

	string _return_getName;

	string _return_getType;

};

class ResourceTemplateImplementation;

class ResourceTemplateAdapter : public ORBObjectAdapter {
public:
	ResourceTemplateAdapter(ResourceTemplateImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, ORBMethodInvocation* inv);

	SpawnLocation* getSpawn(int i);

	int getSpawnSize();

	void addSpawn(SpawnLocation* sl);

	SpawnLocation* removeSpawn(int id);

	void setName(const string& instring);

	void setClass1(const string& inString);

	void setClass2(const string& inString);

	void setClass3(const string& inString);

	void setClass4(const string& inString);

	void setClass5(const string& inString);

	void setClass6(const string& inString);

	void setClass7(const string& inString);

	void setAtt1(const string& inString);

	void setAtt2(const string& inString);

	void setAtt3(const string& inString);

	void setAtt4(const string& inString);

	void setAtt5(const string& inString);

	void setAtt6(const string& inString);

	void setAtt7(const string& inString);

	void setAtt8(const string& inString);

	void setAtt9(const string& inString);

	void setAtt10(const string& inString);

	void setAtt11(const string& inString);

	void setAtt1Stat(int inInt);

	void setAtt2Stat(int inInt);

	void setAtt3Stat(int inInt);

	void setAtt4Stat(int inInt);

	void setAtt5Stat(int inInt);

	void setAtt6Stat(int inInt);

	void setAtt7Stat(int inInt);

	void setAtt8Stat(int inInt);

	void setAtt9Stat(int inInt);

	void setAtt10Stat(int inInt);

	void setAtt11Stat(int inInt);

	void setMaxType(int inInt);

	void setMinType(int inInt);

	void setMaxPool(int inInt);

	void setMinPool(int inInt);

	void setContainer(const string& inString);

	void setContainerCRC(unsigned int inCRC);

	void setResourceID(unsigned long long inCRC);

	string& getName();

	string& getType();

	string& getClass1();

	string& getClass2();

	string& getClass3();

	string& getClass4();

	string& getClass5();

	string& getClass6();

	string& getClass7();

	string& getAtt1();

	string& getAtt2();

	string& getAtt3();

	string& getAtt4();

	string& getAtt5();

	string& getAtt6();

	string& getAtt7();

	string& getAtt8();

	string& getAtt9();

	string& getAtt10();

	string& getAtt11();

	int getAtt1Stat();

	int getAtt2Stat();

	int getAtt3Stat();

	int getAtt4Stat();

	int getAtt5Stat();

	int getAtt6Stat();

	int getAtt7Stat();

	int getAtt8Stat();

	int getAtt9Stat();

	int getAtt10Stat();

	int getAtt11Stat();

	int getMaxType();

	int getMinType();

	int getMaxPool();

	int getMinPool();

	string& getContainer();

	unsigned int getContainerCRC();

	unsigned long long getResourceID();

	int getObjectSubType();

protected:
	string _param0_setName__string_;
	string _param0_setClass1__string_;
	string _param0_setClass2__string_;
	string _param0_setClass3__string_;
	string _param0_setClass4__string_;
	string _param0_setClass5__string_;
	string _param0_setClass6__string_;
	string _param0_setClass7__string_;
	string _param0_setAtt1__string_;
	string _param0_setAtt2__string_;
	string _param0_setAtt3__string_;
	string _param0_setAtt4__string_;
	string _param0_setAtt5__string_;
	string _param0_setAtt6__string_;
	string _param0_setAtt7__string_;
	string _param0_setAtt8__string_;
	string _param0_setAtt9__string_;
	string _param0_setAtt10__string_;
	string _param0_setAtt11__string_;
	string _param0_setContainer__string_;
};

class ResourceTemplateHelper : public ORBClassHelper {
	static ORBClassHelper* instance;

public:
	ResourceTemplateHelper();

	static ORBClassHelper* getInstance();

	ORBObject* instantiateObject();

	ORBObjectAdapter* createAdapter(ORBObjectServant* obj);

};

class ResourceTemplateServant : public ORBObjectServant {
public:
	ResourceTemplate* _this;

public:
	ResourceTemplateServant();
	virtual ~ResourceTemplateServant();

	void _setStub(ORBObjectStub* stub);
	ORBObjectStub* _getStub();

};

#endif /*RESOURCETEMPLATE_H_*/
