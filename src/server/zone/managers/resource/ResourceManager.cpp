/*
 *	server/zone/managers/resource/ResourceManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "ResourceManager.h"

#include "ResourceManagerImplementation.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServerImplementation.h"

/*
 *	ResourceManagerStub
 */

ResourceManager::ResourceManager(ZoneServer* server, ZoneProcessServerImplementation* processor) {
	_impl = new ResourceManagerImplementation(server, processor);
	_impl->_setStub(this);
}

ResourceManager::ResourceManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

ResourceManager::~ResourceManager() {
}

/*
 *	ResourceManagerAdapter
 */

ResourceManagerAdapter::ResourceManagerAdapter(ResourceManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ResourceManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	ResourceManagerHelper
 */

ResourceManagerHelper* ResourceManagerHelper::staticInitializer = ResourceManagerHelper::instance();

ResourceManagerHelper::ResourceManagerHelper() {
	className = "ResourceManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceManagerHelper::finalizeHelper() {
	ResourceManagerHelper::finalize();
}

DistributedObject* ResourceManagerHelper::instantiateObject() {
	return new ResourceManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceManagerAdapter((ResourceManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ResourceManagerServant
 */

ResourceManagerServant::ResourceManagerServant() {
	_classHelper = ResourceManagerHelper::instance();
}

ResourceManagerServant::~ResourceManagerServant() {
}

void ResourceManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceManager*) stub;
}

DistributedObjectStub* ResourceManagerServant::_getStub() {
	return _this;
}

