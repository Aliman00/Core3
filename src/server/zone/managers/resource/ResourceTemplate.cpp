/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

/*
 *	ResourceTemplate.cpp generated by Engine3 IDL compiler 0.51
 */

#include "SpawnLocation.h"

#include "ResourceTemplate.h"

#include "ResourceTemplateImplementation.h"

/*
 *	ResourceTemplateStub
 */

ResourceTemplate::ResourceTemplate() : ORBObjectStub(NULL) {
}

ResourceTemplate::ResourceTemplate(ORBObjectServant* obj) : ORBObjectStub(obj) {
}

ResourceTemplate::ResourceTemplate(ResourceTemplate& ref) : ORBObjectStub(ref) {
}

ResourceTemplate::~ResourceTemplate() {
}

ResourceTemplate* ResourceTemplate::clone() {
	return new ResourceTemplate(*this);
}


SpawnLocation* ResourceTemplate::getSpawn(int i) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 6);
		invocation.addSignedIntParameter(i);

		return (SpawnLocation*) invocation.executeWithObjectReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getSpawn(i);
}

int ResourceTemplate::getSpawnSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 7);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getSpawnSize();
}

void ResourceTemplate::addSpawn(SpawnLocation* sl) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 8);
		invocation.addObjectParameter(sl);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->addSpawn(sl);
}

SpawnLocation* ResourceTemplate::removeSpawn(int id) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 9);
		invocation.addSignedIntParameter(id);

		return (SpawnLocation*) invocation.executeWithObjectReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->removeSpawn(id);
}

void ResourceTemplate::setName(const string& instring) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 10);
		invocation.addAsciiParameter(instring);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setName(instring);
}

void ResourceTemplate::setClass1(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 11);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass1(inString);
}

void ResourceTemplate::setClass2(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 12);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass2(inString);
}

void ResourceTemplate::setClass3(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 13);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass3(inString);
}

void ResourceTemplate::setClass4(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 14);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass4(inString);
}

void ResourceTemplate::setClass5(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 15);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass5(inString);
}

void ResourceTemplate::setClass6(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 16);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass6(inString);
}

void ResourceTemplate::setClass7(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 17);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setClass7(inString);
}

void ResourceTemplate::setAtt1(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 18);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt1(inString);
}

void ResourceTemplate::setAtt2(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 19);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt2(inString);
}

void ResourceTemplate::setAtt3(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 20);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt3(inString);
}

void ResourceTemplate::setAtt4(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 21);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt4(inString);
}

void ResourceTemplate::setAtt5(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 22);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt5(inString);
}

void ResourceTemplate::setAtt6(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 23);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt6(inString);
}

void ResourceTemplate::setAtt7(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 24);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt7(inString);
}

void ResourceTemplate::setAtt8(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 25);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt8(inString);
}

void ResourceTemplate::setAtt9(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 26);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt9(inString);
}

void ResourceTemplate::setAtt10(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 27);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt10(inString);
}

void ResourceTemplate::setAtt11(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 28);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt11(inString);
}

void ResourceTemplate::setAtt1Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 29);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt1Stat(inInt);
}

void ResourceTemplate::setAtt2Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 30);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt2Stat(inInt);
}

void ResourceTemplate::setAtt3Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 31);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt3Stat(inInt);
}

void ResourceTemplate::setAtt4Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 32);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt4Stat(inInt);
}

void ResourceTemplate::setAtt5Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 33);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt5Stat(inInt);
}

void ResourceTemplate::setAtt6Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 34);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt6Stat(inInt);
}

void ResourceTemplate::setAtt7Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 35);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt7Stat(inInt);
}

void ResourceTemplate::setAtt8Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 36);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt8Stat(inInt);
}

void ResourceTemplate::setAtt9Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 37);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt9Stat(inInt);
}

void ResourceTemplate::setAtt10Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 38);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt10Stat(inInt);
}

void ResourceTemplate::setAtt11Stat(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 39);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setAtt11Stat(inInt);
}

void ResourceTemplate::setMaxType(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 40);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setMaxType(inInt);
}

void ResourceTemplate::setMinType(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 41);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setMinType(inInt);
}

void ResourceTemplate::setMaxPool(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 42);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setMaxPool(inInt);
}

void ResourceTemplate::setMinPool(int inInt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 43);
		invocation.addSignedIntParameter(inInt);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setMinPool(inInt);
}

void ResourceTemplate::setContainer(const string& inString) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 44);
		invocation.addAsciiParameter(inString);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setContainer(inString);
}

void ResourceTemplate::setContainerCRC(unsigned int inCRC) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 45);
		invocation.addUnsignedIntParameter(inCRC);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setContainerCRC(inCRC);
}

void ResourceTemplate::setResourceID(unsigned long long inCRC) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 46);
		invocation.addUnsignedLongParameter(inCRC);

		invocation.executeWithVoidReturn();
	} else
		((ResourceTemplateImplementation*) _impl)->setResourceID(inCRC);
}

string& ResourceTemplate::getName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 47);

		invocation.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getName();
}

string& ResourceTemplate::getType() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 48);

		invocation.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getType();
}

string& ResourceTemplate::getClass1() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 49);

		invocation.executeWithAsciiReturn(_return_getClass1);
		return _return_getClass1;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass1();
}

string& ResourceTemplate::getClass2() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 50);

		invocation.executeWithAsciiReturn(_return_getClass2);
		return _return_getClass2;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass2();
}

string& ResourceTemplate::getClass3() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 51);

		invocation.executeWithAsciiReturn(_return_getClass3);
		return _return_getClass3;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass3();
}

string& ResourceTemplate::getClass4() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 52);

		invocation.executeWithAsciiReturn(_return_getClass4);
		return _return_getClass4;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass4();
}

string& ResourceTemplate::getClass5() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 53);

		invocation.executeWithAsciiReturn(_return_getClass5);
		return _return_getClass5;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass5();
}

string& ResourceTemplate::getClass6() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 54);

		invocation.executeWithAsciiReturn(_return_getClass6);
		return _return_getClass6;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass6();
}

string& ResourceTemplate::getClass7() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 55);

		invocation.executeWithAsciiReturn(_return_getClass7);
		return _return_getClass7;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getClass7();
}

string& ResourceTemplate::getAtt1() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 56);

		invocation.executeWithAsciiReturn(_return_getAtt1);
		return _return_getAtt1;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt1();
}

string& ResourceTemplate::getAtt2() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 57);

		invocation.executeWithAsciiReturn(_return_getAtt2);
		return _return_getAtt2;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt2();
}

string& ResourceTemplate::getAtt3() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 58);

		invocation.executeWithAsciiReturn(_return_getAtt3);
		return _return_getAtt3;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt3();
}

string& ResourceTemplate::getAtt4() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 59);

		invocation.executeWithAsciiReturn(_return_getAtt4);
		return _return_getAtt4;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt4();
}

string& ResourceTemplate::getAtt5() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 60);

		invocation.executeWithAsciiReturn(_return_getAtt5);
		return _return_getAtt5;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt5();
}

string& ResourceTemplate::getAtt6() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 61);

		invocation.executeWithAsciiReturn(_return_getAtt6);
		return _return_getAtt6;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt6();
}

string& ResourceTemplate::getAtt7() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 62);

		invocation.executeWithAsciiReturn(_return_getAtt7);
		return _return_getAtt7;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt7();
}

string& ResourceTemplate::getAtt8() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 63);

		invocation.executeWithAsciiReturn(_return_getAtt8);
		return _return_getAtt8;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt8();
}

string& ResourceTemplate::getAtt9() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 64);

		invocation.executeWithAsciiReturn(_return_getAtt9);
		return _return_getAtt9;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt9();
}

string& ResourceTemplate::getAtt10() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 65);

		invocation.executeWithAsciiReturn(_return_getAtt10);
		return _return_getAtt10;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt10();
}

string& ResourceTemplate::getAtt11() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 66);

		invocation.executeWithAsciiReturn(_return_getAtt11);
		return _return_getAtt11;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt11();
}

int ResourceTemplate::getAtt1Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 67);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt1Stat();
}

int ResourceTemplate::getAtt2Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 68);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt2Stat();
}

int ResourceTemplate::getAtt3Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 69);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt3Stat();
}

int ResourceTemplate::getAtt4Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 70);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt4Stat();
}

int ResourceTemplate::getAtt5Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 71);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt5Stat();
}

int ResourceTemplate::getAtt6Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 72);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt6Stat();
}

int ResourceTemplate::getAtt7Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 73);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt7Stat();
}

int ResourceTemplate::getAtt8Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 74);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt8Stat();
}

int ResourceTemplate::getAtt9Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 75);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt9Stat();
}

int ResourceTemplate::getAtt10Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 76);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt10Stat();
}

int ResourceTemplate::getAtt11Stat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 77);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getAtt11Stat();
}

int ResourceTemplate::getMaxType() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 78);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getMaxType();
}

int ResourceTemplate::getMinType() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 79);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getMinType();
}

int ResourceTemplate::getMaxPool() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 80);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getMaxPool();
}

int ResourceTemplate::getMinPool() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 81);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getMinPool();
}

string& ResourceTemplate::getContainer() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 82);

		invocation.executeWithAsciiReturn(_return_getContainer);
		return _return_getContainer;
	} else
		return ((ResourceTemplateImplementation*) _impl)->getContainer();
}

unsigned int ResourceTemplate::getContainerCRC() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 83);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getContainerCRC();
}

unsigned long long ResourceTemplate::getResourceID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 84);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getResourceID();
}

int ResourceTemplate::getObjectSubType() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 85);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ResourceTemplateImplementation*) _impl)->getObjectSubType();
}

/*
 *	ResourceTemplateAdapter
 */

ResourceTemplateAdapter::ResourceTemplateAdapter(ResourceTemplateImplementation* obj) : ORBObjectAdapter((ORBObjectServant*) obj) {
}

Packet* ResourceTemplateAdapter::invokeMethod(uint32 methid, ORBMethodInvocation* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(getSpawn(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 7:
		resp->insertSignedInt(getSpawnSize());
		break;
	case 8:
		addSpawn((SpawnLocation*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertLong(removeSpawn(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 10:
		setName(inv->getAsciiParameter(_param0_setName__string_));
		break;
	case 11:
		setClass1(inv->getAsciiParameter(_param0_setClass1__string_));
		break;
	case 12:
		setClass2(inv->getAsciiParameter(_param0_setClass2__string_));
		break;
	case 13:
		setClass3(inv->getAsciiParameter(_param0_setClass3__string_));
		break;
	case 14:
		setClass4(inv->getAsciiParameter(_param0_setClass4__string_));
		break;
	case 15:
		setClass5(inv->getAsciiParameter(_param0_setClass5__string_));
		break;
	case 16:
		setClass6(inv->getAsciiParameter(_param0_setClass6__string_));
		break;
	case 17:
		setClass7(inv->getAsciiParameter(_param0_setClass7__string_));
		break;
	case 18:
		setAtt1(inv->getAsciiParameter(_param0_setAtt1__string_));
		break;
	case 19:
		setAtt2(inv->getAsciiParameter(_param0_setAtt2__string_));
		break;
	case 20:
		setAtt3(inv->getAsciiParameter(_param0_setAtt3__string_));
		break;
	case 21:
		setAtt4(inv->getAsciiParameter(_param0_setAtt4__string_));
		break;
	case 22:
		setAtt5(inv->getAsciiParameter(_param0_setAtt5__string_));
		break;
	case 23:
		setAtt6(inv->getAsciiParameter(_param0_setAtt6__string_));
		break;
	case 24:
		setAtt7(inv->getAsciiParameter(_param0_setAtt7__string_));
		break;
	case 25:
		setAtt8(inv->getAsciiParameter(_param0_setAtt8__string_));
		break;
	case 26:
		setAtt9(inv->getAsciiParameter(_param0_setAtt9__string_));
		break;
	case 27:
		setAtt10(inv->getAsciiParameter(_param0_setAtt10__string_));
		break;
	case 28:
		setAtt11(inv->getAsciiParameter(_param0_setAtt11__string_));
		break;
	case 29:
		setAtt1Stat(inv->getSignedIntParameter());
		break;
	case 30:
		setAtt2Stat(inv->getSignedIntParameter());
		break;
	case 31:
		setAtt3Stat(inv->getSignedIntParameter());
		break;
	case 32:
		setAtt4Stat(inv->getSignedIntParameter());
		break;
	case 33:
		setAtt5Stat(inv->getSignedIntParameter());
		break;
	case 34:
		setAtt6Stat(inv->getSignedIntParameter());
		break;
	case 35:
		setAtt7Stat(inv->getSignedIntParameter());
		break;
	case 36:
		setAtt8Stat(inv->getSignedIntParameter());
		break;
	case 37:
		setAtt9Stat(inv->getSignedIntParameter());
		break;
	case 38:
		setAtt10Stat(inv->getSignedIntParameter());
		break;
	case 39:
		setAtt11Stat(inv->getSignedIntParameter());
		break;
	case 40:
		setMaxType(inv->getSignedIntParameter());
		break;
	case 41:
		setMinType(inv->getSignedIntParameter());
		break;
	case 42:
		setMaxPool(inv->getSignedIntParameter());
		break;
	case 43:
		setMinPool(inv->getSignedIntParameter());
		break;
	case 44:
		setContainer(inv->getAsciiParameter(_param0_setContainer__string_));
		break;
	case 45:
		setContainerCRC(inv->getUnsignedIntParameter());
		break;
	case 46:
		setResourceID(inv->getUnsignedLongParameter());
		break;
	case 47:
		resp->insertAscii(getName());
		break;
	case 48:
		resp->insertAscii(getType());
		break;
	case 49:
		resp->insertAscii(getClass1());
		break;
	case 50:
		resp->insertAscii(getClass2());
		break;
	case 51:
		resp->insertAscii(getClass3());
		break;
	case 52:
		resp->insertAscii(getClass4());
		break;
	case 53:
		resp->insertAscii(getClass5());
		break;
	case 54:
		resp->insertAscii(getClass6());
		break;
	case 55:
		resp->insertAscii(getClass7());
		break;
	case 56:
		resp->insertAscii(getAtt1());
		break;
	case 57:
		resp->insertAscii(getAtt2());
		break;
	case 58:
		resp->insertAscii(getAtt3());
		break;
	case 59:
		resp->insertAscii(getAtt4());
		break;
	case 60:
		resp->insertAscii(getAtt5());
		break;
	case 61:
		resp->insertAscii(getAtt6());
		break;
	case 62:
		resp->insertAscii(getAtt7());
		break;
	case 63:
		resp->insertAscii(getAtt8());
		break;
	case 64:
		resp->insertAscii(getAtt9());
		break;
	case 65:
		resp->insertAscii(getAtt10());
		break;
	case 66:
		resp->insertAscii(getAtt11());
		break;
	case 67:
		resp->insertSignedInt(getAtt1Stat());
		break;
	case 68:
		resp->insertSignedInt(getAtt2Stat());
		break;
	case 69:
		resp->insertSignedInt(getAtt3Stat());
		break;
	case 70:
		resp->insertSignedInt(getAtt4Stat());
		break;
	case 71:
		resp->insertSignedInt(getAtt5Stat());
		break;
	case 72:
		resp->insertSignedInt(getAtt6Stat());
		break;
	case 73:
		resp->insertSignedInt(getAtt7Stat());
		break;
	case 74:
		resp->insertSignedInt(getAtt8Stat());
		break;
	case 75:
		resp->insertSignedInt(getAtt9Stat());
		break;
	case 76:
		resp->insertSignedInt(getAtt10Stat());
		break;
	case 77:
		resp->insertSignedInt(getAtt11Stat());
		break;
	case 78:
		resp->insertSignedInt(getMaxType());
		break;
	case 79:
		resp->insertSignedInt(getMinType());
		break;
	case 80:
		resp->insertSignedInt(getMaxPool());
		break;
	case 81:
		resp->insertSignedInt(getMinPool());
		break;
	case 82:
		resp->insertAscii(getContainer());
		break;
	case 83:
		resp->insertInt(getContainerCRC());
		break;
	case 84:
		resp->insertLong(getResourceID());
		break;
	case 85:
		resp->insertSignedInt(getObjectSubType());
		break;
	default:
		return NULL;
	}

	return resp;
}

SpawnLocation* ResourceTemplateAdapter::getSpawn(int i) {
	return ((ResourceTemplateImplementation*) impl)->getSpawn(i);
}

int ResourceTemplateAdapter::getSpawnSize() {
	return ((ResourceTemplateImplementation*) impl)->getSpawnSize();
}

void ResourceTemplateAdapter::addSpawn(SpawnLocation* sl) {
	return ((ResourceTemplateImplementation*) impl)->addSpawn(sl);
}

SpawnLocation* ResourceTemplateAdapter::removeSpawn(int id) {
	return ((ResourceTemplateImplementation*) impl)->removeSpawn(id);
}

void ResourceTemplateAdapter::setName(const string& instring) {
	return ((ResourceTemplateImplementation*) impl)->setName(instring);
}

void ResourceTemplateAdapter::setClass1(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass1(inString);
}

void ResourceTemplateAdapter::setClass2(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass2(inString);
}

void ResourceTemplateAdapter::setClass3(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass3(inString);
}

void ResourceTemplateAdapter::setClass4(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass4(inString);
}

void ResourceTemplateAdapter::setClass5(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass5(inString);
}

void ResourceTemplateAdapter::setClass6(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass6(inString);
}

void ResourceTemplateAdapter::setClass7(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setClass7(inString);
}

void ResourceTemplateAdapter::setAtt1(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt1(inString);
}

void ResourceTemplateAdapter::setAtt2(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt2(inString);
}

void ResourceTemplateAdapter::setAtt3(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt3(inString);
}

void ResourceTemplateAdapter::setAtt4(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt4(inString);
}

void ResourceTemplateAdapter::setAtt5(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt5(inString);
}

void ResourceTemplateAdapter::setAtt6(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt6(inString);
}

void ResourceTemplateAdapter::setAtt7(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt7(inString);
}

void ResourceTemplateAdapter::setAtt8(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt8(inString);
}

void ResourceTemplateAdapter::setAtt9(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt9(inString);
}

void ResourceTemplateAdapter::setAtt10(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt10(inString);
}

void ResourceTemplateAdapter::setAtt11(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setAtt11(inString);
}

void ResourceTemplateAdapter::setAtt1Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt1Stat(inInt);
}

void ResourceTemplateAdapter::setAtt2Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt2Stat(inInt);
}

void ResourceTemplateAdapter::setAtt3Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt3Stat(inInt);
}

void ResourceTemplateAdapter::setAtt4Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt4Stat(inInt);
}

void ResourceTemplateAdapter::setAtt5Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt5Stat(inInt);
}

void ResourceTemplateAdapter::setAtt6Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt6Stat(inInt);
}

void ResourceTemplateAdapter::setAtt7Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt7Stat(inInt);
}

void ResourceTemplateAdapter::setAtt8Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt8Stat(inInt);
}

void ResourceTemplateAdapter::setAtt9Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt9Stat(inInt);
}

void ResourceTemplateAdapter::setAtt10Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt10Stat(inInt);
}

void ResourceTemplateAdapter::setAtt11Stat(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setAtt11Stat(inInt);
}

void ResourceTemplateAdapter::setMaxType(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setMaxType(inInt);
}

void ResourceTemplateAdapter::setMinType(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setMinType(inInt);
}

void ResourceTemplateAdapter::setMaxPool(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setMaxPool(inInt);
}

void ResourceTemplateAdapter::setMinPool(int inInt) {
	return ((ResourceTemplateImplementation*) impl)->setMinPool(inInt);
}

void ResourceTemplateAdapter::setContainer(const string& inString) {
	return ((ResourceTemplateImplementation*) impl)->setContainer(inString);
}

void ResourceTemplateAdapter::setContainerCRC(unsigned int inCRC) {
	return ((ResourceTemplateImplementation*) impl)->setContainerCRC(inCRC);
}

void ResourceTemplateAdapter::setResourceID(unsigned long long inCRC) {
	return ((ResourceTemplateImplementation*) impl)->setResourceID(inCRC);
}

string& ResourceTemplateAdapter::getName() {
	return ((ResourceTemplateImplementation*) impl)->getName();
}

string& ResourceTemplateAdapter::getType() {
	return ((ResourceTemplateImplementation*) impl)->getType();
}

string& ResourceTemplateAdapter::getClass1() {
	return ((ResourceTemplateImplementation*) impl)->getClass1();
}

string& ResourceTemplateAdapter::getClass2() {
	return ((ResourceTemplateImplementation*) impl)->getClass2();
}

string& ResourceTemplateAdapter::getClass3() {
	return ((ResourceTemplateImplementation*) impl)->getClass3();
}

string& ResourceTemplateAdapter::getClass4() {
	return ((ResourceTemplateImplementation*) impl)->getClass4();
}

string& ResourceTemplateAdapter::getClass5() {
	return ((ResourceTemplateImplementation*) impl)->getClass5();
}

string& ResourceTemplateAdapter::getClass6() {
	return ((ResourceTemplateImplementation*) impl)->getClass6();
}

string& ResourceTemplateAdapter::getClass7() {
	return ((ResourceTemplateImplementation*) impl)->getClass7();
}

string& ResourceTemplateAdapter::getAtt1() {
	return ((ResourceTemplateImplementation*) impl)->getAtt1();
}

string& ResourceTemplateAdapter::getAtt2() {
	return ((ResourceTemplateImplementation*) impl)->getAtt2();
}

string& ResourceTemplateAdapter::getAtt3() {
	return ((ResourceTemplateImplementation*) impl)->getAtt3();
}

string& ResourceTemplateAdapter::getAtt4() {
	return ((ResourceTemplateImplementation*) impl)->getAtt4();
}

string& ResourceTemplateAdapter::getAtt5() {
	return ((ResourceTemplateImplementation*) impl)->getAtt5();
}

string& ResourceTemplateAdapter::getAtt6() {
	return ((ResourceTemplateImplementation*) impl)->getAtt6();
}

string& ResourceTemplateAdapter::getAtt7() {
	return ((ResourceTemplateImplementation*) impl)->getAtt7();
}

string& ResourceTemplateAdapter::getAtt8() {
	return ((ResourceTemplateImplementation*) impl)->getAtt8();
}

string& ResourceTemplateAdapter::getAtt9() {
	return ((ResourceTemplateImplementation*) impl)->getAtt9();
}

string& ResourceTemplateAdapter::getAtt10() {
	return ((ResourceTemplateImplementation*) impl)->getAtt10();
}

string& ResourceTemplateAdapter::getAtt11() {
	return ((ResourceTemplateImplementation*) impl)->getAtt11();
}

int ResourceTemplateAdapter::getAtt1Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt1Stat();
}

int ResourceTemplateAdapter::getAtt2Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt2Stat();
}

int ResourceTemplateAdapter::getAtt3Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt3Stat();
}

int ResourceTemplateAdapter::getAtt4Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt4Stat();
}

int ResourceTemplateAdapter::getAtt5Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt5Stat();
}

int ResourceTemplateAdapter::getAtt6Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt6Stat();
}

int ResourceTemplateAdapter::getAtt7Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt7Stat();
}

int ResourceTemplateAdapter::getAtt8Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt8Stat();
}

int ResourceTemplateAdapter::getAtt9Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt9Stat();
}

int ResourceTemplateAdapter::getAtt10Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt10Stat();
}

int ResourceTemplateAdapter::getAtt11Stat() {
	return ((ResourceTemplateImplementation*) impl)->getAtt11Stat();
}

int ResourceTemplateAdapter::getMaxType() {
	return ((ResourceTemplateImplementation*) impl)->getMaxType();
}

int ResourceTemplateAdapter::getMinType() {
	return ((ResourceTemplateImplementation*) impl)->getMinType();
}

int ResourceTemplateAdapter::getMaxPool() {
	return ((ResourceTemplateImplementation*) impl)->getMaxPool();
}

int ResourceTemplateAdapter::getMinPool() {
	return ((ResourceTemplateImplementation*) impl)->getMinPool();
}

string& ResourceTemplateAdapter::getContainer() {
	return ((ResourceTemplateImplementation*) impl)->getContainer();
}

unsigned int ResourceTemplateAdapter::getContainerCRC() {
	return ((ResourceTemplateImplementation*) impl)->getContainerCRC();
}

unsigned long long ResourceTemplateAdapter::getResourceID() {
	return ((ResourceTemplateImplementation*) impl)->getResourceID();
}

int ResourceTemplateAdapter::getObjectSubType() {
	return ((ResourceTemplateImplementation*) impl)->getObjectSubType();
}

/*
 *	ResourceTemplateHelper
 */

ORBClassHelper* ResourceTemplateHelper::instance = new ResourceTemplateHelper();

ResourceTemplateHelper::ResourceTemplateHelper() {
	className = "ResourceTemplate";

	ObjectRequestBroker::instance()->registerClass(className, this);
}

ORBClassHelper* ResourceTemplateHelper::getInstance() {
	if (instance == NULL)
		return instance = new ResourceTemplateHelper();
	else
		return instance;
}

ORBObject* ResourceTemplateHelper::instantiateObject() {
	return new ResourceTemplate();
}

ORBObjectAdapter* ResourceTemplateHelper::createAdapter(ORBObjectServant* obj) {
	ORBObjectAdapter* adapter = new ResourceTemplateAdapter((ResourceTemplateImplementation*)obj);

	ORBObjectStub* stub = new ResourceTemplate(obj);
	stub->_setORBClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	ResourceTemplateServant
 */

ResourceTemplateServant::ResourceTemplateServant() {
	_classHelper = ResourceTemplateHelper::getInstance();
}

ResourceTemplateServant::~ResourceTemplateServant() {
}
void ResourceTemplateServant::_setStub(ORBObjectStub* stub) {
	_this = (ResourceTemplate*) stub;
}

ORBObjectStub* ResourceTemplateServant::_getStub() {
	return _this;
}

