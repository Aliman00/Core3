/*
 *	server/zone/managers/planet/PlanetManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlanetManager.h"

#include "PlanetManagerImplementation.h"

#include "server/zone/Zone.h"

/*
 *	PlanetManagerStub
 */

PlanetManager::PlanetManager(Zone* zone, ZoneProcessServerImplementation* processor) {
	_impl = new PlanetManagerImplementation(zone, processor);
	_impl->_setStub(this);
}

PlanetManager::PlanetManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

PlanetManager::~PlanetManager() {
}

void PlanetManager::init() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->init();
}

void PlanetManager::start() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->start();
}

void PlanetManager::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->stop();
}

/*
 *	PlanetManagerAdapter
 */

PlanetManagerAdapter::PlanetManagerAdapter(PlanetManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* PlanetManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		init();
		break;
	case 7:
		start();
		break;
	case 8:
		stop();
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlanetManagerAdapter::init() {
	return ((PlanetManagerImplementation*) impl)->init();
}

void PlanetManagerAdapter::start() {
	return ((PlanetManagerImplementation*) impl)->start();
}

void PlanetManagerAdapter::stop() {
	return ((PlanetManagerImplementation*) impl)->stop();
}

/*
 *	PlanetManagerHelper
 */

PlanetManagerHelper* PlanetManagerHelper::staticInitializer = PlanetManagerHelper::instance();

PlanetManagerHelper::PlanetManagerHelper() {
	className = "PlanetManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlanetManagerHelper::finalizeHelper() {
	PlanetManagerHelper::finalize();
}

DistributedObject* PlanetManagerHelper::instantiateObject() {
	return new PlanetManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlanetManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlanetManagerAdapter((PlanetManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlanetManagerServant
 */

PlanetManagerServant::PlanetManagerServant() {
	_classHelper = PlanetManagerHelper::instance();
}

PlanetManagerServant::~PlanetManagerServant() {
}

void PlanetManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlanetManager*) stub;
}

DistributedObjectStub* PlanetManagerServant::_getStub() {
	return _this;
}

