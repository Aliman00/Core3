/*
 *	server/zone/managers/city/CityManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityManager.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/building/city/CityHallObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/chat/StringIdChatParameter.h"


// Imported class dependencies

#include "server/zone/objects/tangible/terminal/city/CityVoteTerminal.h"

#include "system/util/Vector.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/core/ManagedObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/login/account/Account.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "system/lang/Time.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "system/util/VectorMap.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/terminal/city/CityTerminal.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/tangible/terminal/vendor/bazaar/BazaarTerminal.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/installation/shuttle/ShuttleInstallation.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/ZoneClientSession.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/region/Region.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/building/city/CityHallObject.h"

/*
 *	CityManagerStub
 */

enum {RPC_LOADLUACONFIG__ = 6,RPC_CREATENEWCITY__CITYHALLOBJECT_PLAYERCREATURE_STRING_,RPC_CHANGECITYNAME__CITYHALLOBJECT_PLAYERCREATURE_STRING_,RPC_VALIDATECITYNAME__STRING_,RPC_HANDLECITYADVANCEMENT__CITYHALLOBJECT_,RPC_EXPANDCITY__CITYHALLOBJECT_,RPC_CONTRACTCITY__CITYHALLOBJECT_,RPC_DESTROYCITY__CITYHALLOBJECT_,RPC_DECLARECITIZENSHIP__CITYHALLOBJECT_PLAYERCREATURE_BOOL_,RPC_REVOKECITIZENSHIP__CITYHALLOBJECT_PLAYERCREATURE_BOOL_,RPC_ADDMILITIAMEMBER__CITYHALLOBJECT_PLAYERCREATURE_STRING_,RPC_REMOVEMILITIAMEMBER__CITYHALLOBJECT_PLAYERCREATURE_LONG_,RPC_CHECKCITIESCAPPEDATRANK__BYTE_,RPC_GETCITIESALLOWED__BYTE_,RPC_ADDCITY__CITYHALLOBJECT_,RPC_GETTOTALCITIES__};

CityManager::CityManager(Zone* zne) : ManagedService(DummyConstructorParameter::instance()) {
	CityManagerImplementation* _implementation = new CityManagerImplementation(zne);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

CityManager::CityManager(DummyConstructorParameter* param) : ManagedService(param) {
}

CityManager::~CityManager() {
}


void CityManager::loadLuaConfig() {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadLuaConfig();
}

void CityManager::createNewCity(CityHallObject* city, PlayerCreature* player, const String& name) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATENEWCITY__CITYHALLOBJECT_PLAYERCREATURE_STRING_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->createNewCity(city, player, name);
}

void CityManager::changeCityName(CityHallObject* city, PlayerCreature* player, const String& name) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHANGECITYNAME__CITYHALLOBJECT_PLAYERCREATURE_STRING_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->changeCityName(city, player, name);
}

bool CityManager::validateCityName(const String& name) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATECITYNAME__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateCityName(name);
}

void CityManager::sendMailToMayor(CityHallObject* city, const String& sendername, const UnicodeString& subject, StringIdChatParameter& body) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->sendMailToMayor(city, sendername, subject, body);
}

void CityManager::sendMailToAllCitizens(CityHallObject* city, const String& sendername, const UnicodeString& subject, StringIdChatParameter& body) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->sendMailToAllCitizens(city, sendername, subject, body);
}

void CityManager::handleCityAdvancement(CityHallObject* city) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECITYADVANCEMENT__CITYHALLOBJECT_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else
		_implementation->handleCityAdvancement(city);
}

void CityManager::expandCity(CityHallObject* city) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXPANDCITY__CITYHALLOBJECT_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else
		_implementation->expandCity(city);
}

void CityManager::contractCity(CityHallObject* city) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTRACTCITY__CITYHALLOBJECT_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else
		_implementation->contractCity(city);
}

void CityManager::destroyCity(CityHallObject* city) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYCITY__CITYHALLOBJECT_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyCity(city);
}

void CityManager::declareCitizenship(CityHallObject* city, PlayerCreature* player, bool sendMail) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECLARECITIZENSHIP__CITYHALLOBJECT_PLAYERCREATURE_BOOL_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addBooleanParameter(sendMail);

		method.executeWithVoidReturn();
	} else
		_implementation->declareCitizenship(city, player, sendMail);
}

void CityManager::revokeCitizenship(CityHallObject* city, PlayerCreature* player, bool sendMail) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REVOKECITIZENSHIP__CITYHALLOBJECT_PLAYERCREATURE_BOOL_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addBooleanParameter(sendMail);

		method.executeWithVoidReturn();
	} else
		_implementation->revokeCitizenship(city, player, sendMail);
}

void CityManager::addMilitiaMember(CityHallObject* city, PlayerCreature* player, const String& citizenName) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMILITIAMEMBER__CITYHALLOBJECT_PLAYERCREATURE_STRING_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addAsciiParameter(citizenName);

		method.executeWithVoidReturn();
	} else
		_implementation->addMilitiaMember(city, player, citizenName);
}

void CityManager::removeMilitiaMember(CityHallObject* city, PlayerCreature* player, unsigned long long playerID) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMILITIAMEMBER__CITYHALLOBJECT_PLAYERCREATURE_LONG_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMilitiaMember(city, player, playerID);
}

bool CityManager::checkCitiesCappedAtRank(byte rank) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKCITIESCAPPEDATRANK__BYTE_);
		method.addByteParameter(rank);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkCitiesCappedAtRank(rank);
}

byte CityManager::getCitiesAllowed(byte rank) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITIESALLOWED__BYTE_);
		method.addByteParameter(rank);

		return method.executeWithByteReturn();
	} else
		return _implementation->getCitiesAllowed(rank);
}

void CityManager::addCity(CityHallObject* city) {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCITY__CITYHALLOBJECT_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else
		_implementation->addCity(city);
}

int CityManager::getTotalCities() {
	CityManagerImplementation* _implementation = (CityManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALCITIES__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTotalCities();
}

DistributedObjectServant* CityManager::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void CityManager::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<CityManagerImplementation*>(servant));
}

/*
 *	CityManagerImplementation
 */

CityManagerImplementation::CityManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


CityManagerImplementation::~CityManagerImplementation() {
}


void CityManagerImplementation::finalize() {
}

void CityManagerImplementation::_initializeImplementation() {
	_setClassHelper(CityManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void CityManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CityManager*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* CityManagerImplementation::_getStub() {
	return _this;
}

CityManagerImplementation::operator const CityManager*() {
	return _this;
}

Object* CityManagerImplementation::clone() {
	return dynamic_cast<Object*>(new CityManagerImplementation(*this));
}


void CityManagerImplementation::lock(bool doLock) {
}

void CityManagerImplementation::lock(ManagedObject* obj) {
}

void CityManagerImplementation::rlock(bool doLock) {
}

void CityManagerImplementation::wlock(bool doLock) {
}

void CityManagerImplementation::wlock(ManagedObject* obj) {
}

void CityManagerImplementation::unlock(bool doLock) {
}

void CityManagerImplementation::runlock(bool doLock) {
}

void CityManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("CityManager");

}

void CityManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CityManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zone") {
		TypeInfo<ManagedWeakReference<Zone* > >::parseFromBinaryStream(&zone, stream);
		return true;
	}

	if (_name == "cities") {
		TypeInfo<VectorMap<unsigned long long, ManagedReference<CityHallObject* > > >::parseFromBinaryStream(&cities, stream);
		return true;
	}


	return false;
}

void CityManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<Zone* > >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cities";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<CityHallObject* > > >::toBinaryStream(&cities, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 2 + ManagedServiceImplementation::writeObjectMembers(stream);
}

CityManagerImplementation::CityManagerImplementation(Zone* zne) {
	_initializeImplementation();
	// server/zone/managers/city/CityManager.idl():  		Logger.setLoggingName("CityManager");
	Logger::setLoggingName("CityManager");
	// server/zone/managers/city/CityManager.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/managers/city/CityManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/city/CityManager.idl():  		zone = zne;
	zone = zne;
	// server/zone/managers/city/CityManager.idl():  		cities.setNullValue(null);
	(&cities)->setNullValue(NULL);
	// server/zone/managers/city/CityManager.idl():  		cities.setInsertPlan(3);
	(&cities)->setInsertPlan(3);
}

byte CityManagerImplementation::getCitiesAllowed(byte rank) {
	// server/zone/managers/city/CityManager.idl():  		return citiesAllowedPerRank.get(rank);
	return (&citiesAllowedPerRank)->get(rank);
}

void CityManagerImplementation::addCity(CityHallObject* city) {
	Locker _locker(_this);
	// server/zone/managers/city/CityManager.idl():  		cities.put(city.getObjectID(), city);
	(&cities)->put(city->getObjectID(), city);
}

int CityManagerImplementation::getTotalCities() {
	Locker _locker(_this);
	// server/zone/managers/city/CityManager.idl():  		return cities.size();
	return (&cities)->size();
}

/*
 *	CityManagerAdapter
 */

CityManagerAdapter::CityManagerAdapter(CityManagerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* CityManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_LOADLUACONFIG__:
		loadLuaConfig();
		break;
	case RPC_CREATENEWCITY__CITYHALLOBJECT_PLAYERCREATURE_STRING_:
		createNewCity((CityHallObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_createNewCity__CityHallObject_PlayerCreature_String_));
		break;
	case RPC_CHANGECITYNAME__CITYHALLOBJECT_PLAYERCREATURE_STRING_:
		changeCityName((CityHallObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_changeCityName__CityHallObject_PlayerCreature_String_));
		break;
	case RPC_VALIDATECITYNAME__STRING_:
		resp->insertBoolean(validateCityName(inv->getAsciiParameter(_param0_validateCityName__String_)));
		break;
	case RPC_HANDLECITYADVANCEMENT__CITYHALLOBJECT_:
		handleCityAdvancement((CityHallObject*) inv->getObjectParameter());
		break;
	case RPC_EXPANDCITY__CITYHALLOBJECT_:
		expandCity((CityHallObject*) inv->getObjectParameter());
		break;
	case RPC_CONTRACTCITY__CITYHALLOBJECT_:
		contractCity((CityHallObject*) inv->getObjectParameter());
		break;
	case RPC_DESTROYCITY__CITYHALLOBJECT_:
		destroyCity((CityHallObject*) inv->getObjectParameter());
		break;
	case RPC_DECLARECITIZENSHIP__CITYHALLOBJECT_PLAYERCREATURE_BOOL_:
		declareCitizenship((CityHallObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_REVOKECITIZENSHIP__CITYHALLOBJECT_PLAYERCREATURE_BOOL_:
		revokeCitizenship((CityHallObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_ADDMILITIAMEMBER__CITYHALLOBJECT_PLAYERCREATURE_STRING_:
		addMilitiaMember((CityHallObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_addMilitiaMember__CityHallObject_PlayerCreature_String_));
		break;
	case RPC_REMOVEMILITIAMEMBER__CITYHALLOBJECT_PLAYERCREATURE_LONG_:
		removeMilitiaMember((CityHallObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_CHECKCITIESCAPPEDATRANK__BYTE_:
		resp->insertBoolean(checkCitiesCappedAtRank(inv->getByteParameter()));
		break;
	case RPC_GETCITIESALLOWED__BYTE_:
		resp->insertByte(getCitiesAllowed(inv->getByteParameter()));
		break;
	case RPC_ADDCITY__CITYHALLOBJECT_:
		addCity((CityHallObject*) inv->getObjectParameter());
		break;
	case RPC_GETTOTALCITIES__:
		resp->insertSignedInt(getTotalCities());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CityManagerAdapter::loadLuaConfig() {
	((CityManagerImplementation*) impl)->loadLuaConfig();
}

void CityManagerAdapter::createNewCity(CityHallObject* city, PlayerCreature* player, const String& name) {
	((CityManagerImplementation*) impl)->createNewCity(city, player, name);
}

void CityManagerAdapter::changeCityName(CityHallObject* city, PlayerCreature* player, const String& name) {
	((CityManagerImplementation*) impl)->changeCityName(city, player, name);
}

bool CityManagerAdapter::validateCityName(const String& name) {
	return ((CityManagerImplementation*) impl)->validateCityName(name);
}

void CityManagerAdapter::handleCityAdvancement(CityHallObject* city) {
	((CityManagerImplementation*) impl)->handleCityAdvancement(city);
}

void CityManagerAdapter::expandCity(CityHallObject* city) {
	((CityManagerImplementation*) impl)->expandCity(city);
}

void CityManagerAdapter::contractCity(CityHallObject* city) {
	((CityManagerImplementation*) impl)->contractCity(city);
}

void CityManagerAdapter::destroyCity(CityHallObject* city) {
	((CityManagerImplementation*) impl)->destroyCity(city);
}

void CityManagerAdapter::declareCitizenship(CityHallObject* city, PlayerCreature* player, bool sendMail) {
	((CityManagerImplementation*) impl)->declareCitizenship(city, player, sendMail);
}

void CityManagerAdapter::revokeCitizenship(CityHallObject* city, PlayerCreature* player, bool sendMail) {
	((CityManagerImplementation*) impl)->revokeCitizenship(city, player, sendMail);
}

void CityManagerAdapter::addMilitiaMember(CityHallObject* city, PlayerCreature* player, const String& citizenName) {
	((CityManagerImplementation*) impl)->addMilitiaMember(city, player, citizenName);
}

void CityManagerAdapter::removeMilitiaMember(CityHallObject* city, PlayerCreature* player, unsigned long long playerID) {
	((CityManagerImplementation*) impl)->removeMilitiaMember(city, player, playerID);
}

bool CityManagerAdapter::checkCitiesCappedAtRank(byte rank) {
	return ((CityManagerImplementation*) impl)->checkCitiesCappedAtRank(rank);
}

byte CityManagerAdapter::getCitiesAllowed(byte rank) {
	return ((CityManagerImplementation*) impl)->getCitiesAllowed(rank);
}

void CityManagerAdapter::addCity(CityHallObject* city) {
	((CityManagerImplementation*) impl)->addCity(city);
}

int CityManagerAdapter::getTotalCities() {
	return ((CityManagerImplementation*) impl)->getTotalCities();
}

/*
 *	CityManagerHelper
 */

CityManagerHelper* CityManagerHelper::staticInitializer = CityManagerHelper::instance();

CityManagerHelper::CityManagerHelper() {
	className = "CityManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityManagerHelper::finalizeHelper() {
	CityManagerHelper::finalize();
}

DistributedObject* CityManagerHelper::instantiateObject() {
	return new CityManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityManagerHelper::instantiateServant() {
	return new CityManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityManagerAdapter((CityManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

