/*
 *	server/zone/managers/ZoneManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/managers/object/ObjectManager.h"


// Imported class dependencies

#include "system/util/Vector.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/chat/ChatManager.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "engine/core/ManagedObject.h"

#include "system/net/Socket.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "system/util/SortedVector.h"

#include "system/lang/Time.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/lang/Exception.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "system/net/SocketAddress.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/Zone.h"

#include "system/net/Packet.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/ZoneHandler.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "engine/service/Message.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/planet/PlanetManager.h"

/*
 *	ZoneManagerStub
 */

enum {RPC_SETZONEPROCESSOR__ZONEPROCESSSERVER_ = 6};

ZoneManager::ZoneManager(const String& name) : ManagedService(DummyConstructorParameter::instance()) {
	ZoneManagerImplementation* _implementation = new ZoneManagerImplementation(name);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

ZoneManager::ZoneManager(DummyConstructorParameter* param) : ManagedService(param) {
}

ZoneManager::~ZoneManager() {
}


void ZoneManager::setZoneProcessor(ZoneProcessServer* server) {
	ZoneManagerImplementation* _implementation = (ZoneManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONEPROCESSOR__ZONEPROCESSSERVER_);
		method.addObjectParameter(server);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoneProcessor(server);
}

DistributedObjectServant* ZoneManager::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void ZoneManager::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<ZoneManagerImplementation*>(servant));
}

/*
 *	ZoneManagerImplementation
 */

ZoneManagerImplementation::ZoneManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ZoneManagerImplementation::~ZoneManagerImplementation() {
}


void ZoneManagerImplementation::finalize() {
}

void ZoneManagerImplementation::_initializeImplementation() {
	_setClassHelper(ZoneManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ZoneManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneManager*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneManagerImplementation::_getStub() {
	return _this;
}

ZoneManagerImplementation::operator const ZoneManager*() {
	return _this;
}

Object* ZoneManagerImplementation::clone() {
	return dynamic_cast<Object*>(new ZoneManagerImplementation(*this));
}


void ZoneManagerImplementation::lock(bool doLock) {
}

void ZoneManagerImplementation::lock(ManagedObject* obj) {
}

void ZoneManagerImplementation::rlock(bool doLock) {
}

void ZoneManagerImplementation::wlock(bool doLock) {
}

void ZoneManagerImplementation::wlock(ManagedObject* obj) {
}

void ZoneManagerImplementation::unlock(bool doLock) {
}

void ZoneManagerImplementation::runlock(bool doLock) {
}

void ZoneManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ZoneManager");

}

void ZoneManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ZoneManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ZoneManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ZoneManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ManagedServiceImplementation::writeObjectMembers(stream);
}

ZoneManagerImplementation::ZoneManagerImplementation(const String& name) {
	_initializeImplementation();
	// server/zone/managers/ZoneManager.idl():  		Logger.setLoggingName(name);
	Logger::setLoggingName(name);
	// server/zone/managers/ZoneManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/ZoneManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/ZoneManager.idl():  		zoneServer = null;
	zoneServer = NULL;
	// server/zone/managers/ZoneManager.idl():  		zoneProcessor = null;
	zoneProcessor = NULL;
	// server/zone/managers/ZoneManager.idl():  		objectManager = null;
	objectManager = NULL;
}

void ZoneManagerImplementation::setZoneProcessor(ZoneProcessServer* server) {
	// server/zone/managers/ZoneManager.idl():  		zoneServer = server.getZoneServer();
	zoneServer = server->getZoneServer();
	// server/zone/managers/ZoneManager.idl():  		zoneProcessor = server;
	zoneProcessor = server;
	// server/zone/managers/ZoneManager.idl():  		objectManager = zoneServer.getObjectManager();
	objectManager = zoneServer->getObjectManager();
}

/*
 *	ZoneManagerAdapter
 */

ZoneManagerAdapter::ZoneManagerAdapter(ZoneManagerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* ZoneManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_SETZONEPROCESSOR__ZONEPROCESSSERVER_:
		setZoneProcessor((ZoneProcessServer*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneManagerAdapter::setZoneProcessor(ZoneProcessServer* server) {
	((ZoneManagerImplementation*) impl)->setZoneProcessor(server);
}

/*
 *	ZoneManagerHelper
 */

ZoneManagerHelper* ZoneManagerHelper::staticInitializer = ZoneManagerHelper::instance();

ZoneManagerHelper::ZoneManagerHelper() {
	className = "ZoneManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void ZoneManagerHelper::finalizeHelper() {
	ZoneManagerHelper::finalize();
}

DistributedObject* ZoneManagerHelper::instantiateObject() {
	return new ZoneManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneManagerHelper::instantiateServant() {
	return new ZoneManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneManagerAdapter((ZoneManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

