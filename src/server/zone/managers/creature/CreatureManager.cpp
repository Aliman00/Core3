/*
 *	server/zone/managers/creature/CreatureManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "CreatureManager.h"

#include "CreatureManagerImplementation.h"

#include "server/zone/Zone.h"

/*
 *	CreatureManagerStub
 */

CreatureManager::CreatureManager(Zone* zone, ZoneProcessServerImplementation* processor) {
	_impl = new CreatureManagerImplementation(zone, processor);
	_impl->_setStub(this);
}

CreatureManager::CreatureManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

CreatureManager::~CreatureManager() {
}

void CreatureManager::start() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((CreatureManagerImplementation*) _impl)->start();
}

void CreatureManager::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((CreatureManagerImplementation*) _impl)->stop();
}

/*
 *	CreatureManagerAdapter
 */

CreatureManagerAdapter::CreatureManagerAdapter(CreatureManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* CreatureManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		start();
		break;
	case 7:
		stop();
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureManagerAdapter::start() {
	return ((CreatureManagerImplementation*) impl)->start();
}

void CreatureManagerAdapter::stop() {
	return ((CreatureManagerImplementation*) impl)->stop();
}

/*
 *	CreatureManagerHelper
 */

CreatureManagerHelper* CreatureManagerHelper::staticInitializer = CreatureManagerHelper::instance();

CreatureManagerHelper::CreatureManagerHelper() {
	className = "CreatureManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureManagerHelper::finalizeHelper() {
	CreatureManagerHelper::finalize();
}

DistributedObject* CreatureManagerHelper::instantiateObject() {
	return new CreatureManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureManagerAdapter((CreatureManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CreatureManagerServant
 */

CreatureManagerServant::CreatureManagerServant() {
	_classHelper = CreatureManagerHelper::instance();
}

CreatureManagerServant::~CreatureManagerServant() {
}

void CreatureManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureManager*) stub;
}

DistributedObjectStub* CreatureManagerServant::_getStub() {
	return _this;
}

