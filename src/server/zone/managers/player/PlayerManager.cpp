/*
 *	server/zone/managers/player/PlayerManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlayerManager.h"

#include "PlayerManagerImplementation.h"

/*
 *	PlayerManagerStub
 */

PlayerManager::PlayerManager(ZoneProcessServerImplementation* processor) {
	_impl = new PlayerManagerImplementation(processor);
	_impl->_setStub(this);
}

PlayerManager::PlayerManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

PlayerManager::~PlayerManager() {
}

void PlayerManager::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlayerManagerImplementation*) _impl)->stop();
}

/*
 *	PlayerManagerAdapter
 */

PlayerManagerAdapter::PlayerManagerAdapter(PlayerManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* PlayerManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		stop();
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerManagerAdapter::stop() {
	return ((PlayerManagerImplementation*) impl)->stop();
}

/*
 *	PlayerManagerHelper
 */

PlayerManagerHelper* PlayerManagerHelper::staticInitializer = PlayerManagerHelper::instance();

PlayerManagerHelper::PlayerManagerHelper() {
	className = "PlayerManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerManagerHelper::finalizeHelper() {
	PlayerManagerHelper::finalize();
}

DistributedObject* PlayerManagerHelper::instantiateObject() {
	return new PlayerManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerManagerAdapter((PlayerManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerManagerServant
 */

PlayerManagerServant::PlayerManagerServant() {
	_classHelper = PlayerManagerHelper::instance();
}

PlayerManagerServant::~PlayerManagerServant() {
}

void PlayerManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerManager*) stub;
}

DistributedObjectStub* PlayerManagerServant::_getStub() {
	return _this;
}

