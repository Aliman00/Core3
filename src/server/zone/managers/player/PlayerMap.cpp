/*
 *	server/zone/managers/player/PlayerMap.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../objects/player/Player.h"

#include "PlayerMap.h"

#include "PlayerMapImplementation.h"

/*
 *	PlayerMapStub
 */

PlayerMap::PlayerMap() : DistributedObjectStub(NULL) {
}

PlayerMap::PlayerMap(DistributedObjectServant* obj) : DistributedObjectStub(obj) {
}

PlayerMap::PlayerMap(PlayerMap& ref) : DistributedObjectStub(ref) {
}

PlayerMap::~PlayerMap() {
}

PlayerMap* PlayerMap::clone() {
	return new PlayerMap(*this);
}


Player* PlayerMap::put(string& name, Player* player, bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addAsciiParameter(name);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->put(name, player, doLock);
}

Player* PlayerMap::get(string& name, bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addAsciiParameter(name);
		method.addBooleanParameter(doLock);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->get(name, doLock);
}

Player* PlayerMap::remove(string& name, bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);
		method.addAsciiParameter(name);
		method.addBooleanParameter(doLock);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->remove(name, doLock);
}

int PlayerMap::size() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->size();
}

Player* PlayerMap::getNextValue(bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addBooleanParameter(doLock);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->getNextValue(doLock);
}

Player* PlayerMap::next() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->next();
}

bool PlayerMap::hasNext(bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);
		method.addBooleanParameter(doLock);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerMapImplementation*) _impl)->hasNext(doLock);
}

void PlayerMap::resetIterator(bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerMapImplementation*) _impl)->resetIterator(doLock);
}

void PlayerMap::lock() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		((PlayerMapImplementation*) _impl)->lock();
}

void PlayerMap::unlock() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((PlayerMapImplementation*) _impl)->unlock();
}

/*
 *	PlayerMapAdapter
 */

PlayerMapAdapter::PlayerMapAdapter(PlayerMapImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* PlayerMapAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(put(inv->getAsciiParameter(_param0_put__string_Player_bool_), (Player*) inv->getObjectParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 7:
		resp->insertLong(get(inv->getAsciiParameter(_param0_get__string_bool_), inv->getBooleanParameter())->_getObjectID());
		break;
	case 8:
		resp->insertLong(remove(inv->getAsciiParameter(_param0_remove__string_bool_), inv->getBooleanParameter())->_getObjectID());
		break;
	case 9:
		resp->insertSignedInt(size());
		break;
	case 10:
		resp->insertLong(getNextValue(inv->getBooleanParameter())->_getObjectID());
		break;
	case 11:
		resp->insertLong(next()->_getObjectID());
		break;
	case 12:
		resp->insertBoolean(hasNext(inv->getBooleanParameter()));
		break;
	case 13:
		resetIterator(inv->getBooleanParameter());
		break;
	case 14:
		lock();
		break;
	case 15:
		unlock();
		break;
	default:
		return NULL;
	}

	return resp;
}

Player* PlayerMapAdapter::put(string& name, Player* player, bool doLock) {
	return ((PlayerMapImplementation*) impl)->put(name, player, doLock);
}

Player* PlayerMapAdapter::get(string& name, bool doLock) {
	return ((PlayerMapImplementation*) impl)->get(name, doLock);
}

Player* PlayerMapAdapter::remove(string& name, bool doLock) {
	return ((PlayerMapImplementation*) impl)->remove(name, doLock);
}

int PlayerMapAdapter::size() {
	return ((PlayerMapImplementation*) impl)->size();
}

Player* PlayerMapAdapter::getNextValue(bool doLock) {
	return ((PlayerMapImplementation*) impl)->getNextValue(doLock);
}

Player* PlayerMapAdapter::next() {
	return ((PlayerMapImplementation*) impl)->next();
}

bool PlayerMapAdapter::hasNext(bool doLock) {
	return ((PlayerMapImplementation*) impl)->hasNext(doLock);
}

void PlayerMapAdapter::resetIterator(bool doLock) {
	return ((PlayerMapImplementation*) impl)->resetIterator(doLock);
}

void PlayerMapAdapter::lock() {
	return ((PlayerMapImplementation*) impl)->lock();
}

void PlayerMapAdapter::unlock() {
	return ((PlayerMapImplementation*) impl)->unlock();
}

/*
 *	PlayerMapHelper
 */

PlayerMapHelper* PlayerMapHelper::staticInitializer = PlayerMapHelper::instance();

PlayerMapHelper::PlayerMapHelper() {
	className = "PlayerMap";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerMapHelper::finalizeHelper() {
	PlayerMapHelper::finalize();
}

DistributedObject* PlayerMapHelper::instantiateObject() {
	return new PlayerMap();
}

DistributedObjectAdapter* PlayerMapHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new PlayerMapAdapter((PlayerMapImplementation*) obj);

	DistributedObjectStub* stub = new PlayerMap(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	PlayerMapServant
 */

PlayerMapServant::PlayerMapServant() {
	_classHelper = PlayerMapHelper::instance();
}

PlayerMapServant::~PlayerMapServant() {
}

void PlayerMapServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerMap*) stub;
}

DistributedObjectStub* PlayerMapServant::_getStub() {
	return _this;
}

