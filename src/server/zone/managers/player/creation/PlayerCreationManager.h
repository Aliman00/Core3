/*
 *	server/zone/managers/player/creation/PlayerCreationManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYERCREATIONMANAGER_H_
#define PLAYERCREATIONMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class ZoneProcessServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/core/ManagedObject.h"

#include "system/util/VectorMap.h"

#include "server/zone/managers/ZoneManager.h"

namespace server {
namespace zone {
namespace managers {
namespace player {
namespace creation {

class PlayerCreationManager : public ZoneManager {
public:
	PlayerCreationManager(ZoneProcessServer* zoneProcessServer);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerCreationManager(DummyConstructorParameter* param);

	virtual ~PlayerCreationManager();

	friend class PlayerCreationManagerHelper;
};

} // namespace creation
} // namespace player
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::player::creation;

namespace server {
namespace zone {
namespace managers {
namespace player {
namespace creation {

class PlayerCreationManagerImplementation : public ZoneManagerImplementation {

public:
	PlayerCreationManagerImplementation(ZoneProcessServer* zoneProcessServer);

	PlayerCreationManagerImplementation(DummyConstructorParameter* param);

	PlayerCreationManager* _this;

	operator const PlayerCreationManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerCreationManagerImplementation();

	Object* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerCreationManager;
	friend class TransactionalObjectHandle<PlayerCreationManagerImplementation*>;
};

class PlayerCreationManagerAdapter : public ZoneManagerAdapter {
public:
	PlayerCreationManagerAdapter(PlayerCreationManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class PlayerCreationManagerHelper : public DistributedObjectClassHelper, public Singleton<PlayerCreationManagerHelper> {
	static PlayerCreationManagerHelper* staticInitializer;

public:
	PlayerCreationManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerCreationManagerHelper>;
};

} // namespace creation
} // namespace player
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::player::creation;

#endif /*PLAYERCREATIONMANAGER_H_*/
