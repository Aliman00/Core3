/*
 *	server/zone/managers/player/creation/PlayerCreationManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerCreationManager.h"

#include "server/zone/ZoneProcessServer.h"


// Imported class dependencies

#include "server/zone/ZoneServer.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/ZonePacketHandler.h"

/*
 *	PlayerCreationManagerStub
 */

enum {};

PlayerCreationManager::PlayerCreationManager(ZoneProcessServer* zoneProcessServer) : ZoneManager(DummyConstructorParameter::instance()) {
	PlayerCreationManagerImplementation* _implementation = new PlayerCreationManagerImplementation(zoneProcessServer);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

PlayerCreationManager::PlayerCreationManager(DummyConstructorParameter* param) : ZoneManager(param) {
}

PlayerCreationManager::~PlayerCreationManager() {
}


DistributedObjectServant* PlayerCreationManager::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void PlayerCreationManager::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<PlayerCreationManagerImplementation*>(servant));
}

/*
 *	PlayerCreationManagerImplementation
 */

PlayerCreationManagerImplementation::PlayerCreationManagerImplementation(DummyConstructorParameter* param) : ZoneManagerImplementation(param) {
	_initializeImplementation();
}


PlayerCreationManagerImplementation::~PlayerCreationManagerImplementation() {
}


void PlayerCreationManagerImplementation::finalize() {
}

void PlayerCreationManagerImplementation::_initializeImplementation() {
	_setClassHelper(PlayerCreationManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void PlayerCreationManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerCreationManager*) stub;
	ZoneManagerImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerCreationManagerImplementation::_getStub() {
	return _this;
}

PlayerCreationManagerImplementation::operator const PlayerCreationManager*() {
	return _this;
}

Object* PlayerCreationManagerImplementation::clone() {
	return dynamic_cast<Object*>(new PlayerCreationManagerImplementation(*this));
}


void PlayerCreationManagerImplementation::lock(bool doLock) {
}

void PlayerCreationManagerImplementation::lock(ManagedObject* obj) {
}

void PlayerCreationManagerImplementation::rlock(bool doLock) {
}

void PlayerCreationManagerImplementation::wlock(bool doLock) {
}

void PlayerCreationManagerImplementation::wlock(ManagedObject* obj) {
}

void PlayerCreationManagerImplementation::unlock(bool doLock) {
}

void PlayerCreationManagerImplementation::runlock(bool doLock) {
}

void PlayerCreationManagerImplementation::_serializationHelperMethod() {
	ZoneManagerImplementation::_serializationHelperMethod();

	_setClassName("PlayerCreationManager");

}

void PlayerCreationManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PlayerCreationManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerCreationManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ZoneManagerImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void PlayerCreationManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerCreationManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerCreationManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ZoneManagerImplementation::writeObjectMembers(stream);
}

PlayerCreationManagerImplementation::PlayerCreationManagerImplementation(ZoneProcessServer* zoneProcessServer) : ZoneManagerImplementation("PlayerCreationManager") {
	_initializeImplementation();
}

/*
 *	PlayerCreationManagerAdapter
 */

PlayerCreationManagerAdapter::PlayerCreationManagerAdapter(PlayerCreationManagerImplementation* obj) : ZoneManagerAdapter(obj) {
}

Packet* PlayerCreationManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	PlayerCreationManagerHelper
 */

PlayerCreationManagerHelper* PlayerCreationManagerHelper::staticInitializer = PlayerCreationManagerHelper::instance();

PlayerCreationManagerHelper::PlayerCreationManagerHelper() {
	className = "PlayerCreationManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerCreationManagerHelper::finalizeHelper() {
	PlayerCreationManagerHelper::finalize();
}

DistributedObject* PlayerCreationManagerHelper::instantiateObject() {
	return new PlayerCreationManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerCreationManagerHelper::instantiateServant() {
	return new PlayerCreationManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerCreationManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerCreationManagerAdapter((PlayerCreationManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

