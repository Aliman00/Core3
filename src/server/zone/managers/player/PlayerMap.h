/*
 *	server/zone/managers/player/PlayerMap.h generated by engine3 IDL compiler 0.55
 */

#ifndef PLAYERMAP_H_
#define PLAYERMAP_H_

#include "engine/orb/DistributedObjectBroker.h"

class PlayerObject;

class PlayerMap : public DistributedObjectStub {
public:
	PlayerMap(int initsize);

	PlayerObject* put(const String& name, PlayerObject* player, bool doLock = true);

	PlayerObject* get(const String& name, bool doLock = true);

	PlayerObject* remove(const String& name, bool doLock = true);

	int size(bool doLock = true);

	PlayerObject* getNextValue(bool doLock = true);

	PlayerObject* next(bool doLock = true);

	bool hasNext(bool doLock = true);

	void resetIterator(bool doLock = true);

	void lock(bool doLock = true);

	void unlock(bool doLock = true);

protected:
	PlayerMap(DummyConstructorParameter* param);

	virtual ~PlayerMap();

	friend class PlayerMapHelper;
};

class PlayerMapImplementation;

class PlayerMapAdapter : public DistributedObjectAdapter {
public:
	PlayerMapAdapter(PlayerMapImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	PlayerObject* put(const String& name, PlayerObject* player, bool doLock);

	PlayerObject* get(const String& name, bool doLock);

	PlayerObject* remove(const String& name, bool doLock);

	int size(bool doLock);

	PlayerObject* getNextValue(bool doLock);

	PlayerObject* next(bool doLock);

	bool hasNext(bool doLock);

	void resetIterator(bool doLock);

	void lock(bool doLock);

	void unlock(bool doLock);

protected:
	String _param0_put__String_PlayerObject_bool_;
	String _param0_get__String_bool_;
	String _param0_remove__String_bool_;
};

class PlayerMapHelper : public DistributedObjectClassHelper, public Singleton<PlayerMapHelper> {
	static PlayerMapHelper* staticInitializer;

public:
	PlayerMapHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<PlayerMapHelper>;
};

class PlayerMapServant : public DistributedObjectServant {
public:
	PlayerMap* _this;

public:
	PlayerMapServant();
	virtual ~PlayerMapServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*PLAYERMAP_H_*/
