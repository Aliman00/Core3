/*
 *	server/zone/managers/bank/BankManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../objects/player/Player.h"

#include "BankManager.h"

#include "BankManagerImplementation.h"

/*
 *	BankManagerStub
 */

BankManager::BankManager() : DistributedObjectStub(NULL) {
}

BankManager::BankManager(DistributedObjectServant* obj) : DistributedObjectStub(obj) {
}

BankManager::BankManager(BankManager& ref) : DistributedObjectStub(ref) {
}

BankManager::~BankManager() {
}

BankManager* BankManager::clone() {
	return new BankManager(*this);
}


bool BankManager::isBankTerminal(long long objectid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addSignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return ((BankManagerImplementation*) _impl)->isBankTerminal(objectid);
}

/*
 *	BankManagerAdapter
 */

BankManagerAdapter::BankManagerAdapter(BankManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* BankManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(isBankTerminal(inv->getSignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

bool BankManagerAdapter::isBankTerminal(long long objectid) {
	return ((BankManagerImplementation*) impl)->isBankTerminal(objectid);
}

/*
 *	BankManagerHelper
 */

BankManagerHelper* BankManagerHelper::staticInitializer = BankManagerHelper::instance();

BankManagerHelper::BankManagerHelper() {
	className = "BankManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BankManagerHelper::finalizeHelper() {
	BankManagerHelper::finalize();
}

DistributedObject* BankManagerHelper::instantiateObject() {
	return new BankManager();
}

DistributedObjectAdapter* BankManagerHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new BankManagerAdapter((BankManagerImplementation*) obj);

	DistributedObjectStub* stub = new BankManager(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	BankManagerServant
 */

BankManagerServant::BankManagerServant() {
	_classHelper = BankManagerHelper::instance();
}

BankManagerServant::~BankManagerServant() {
}

void BankManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (BankManager*) stub;
}

DistributedObjectStub* BankManagerServant::_getStub() {
	return _this;
}

