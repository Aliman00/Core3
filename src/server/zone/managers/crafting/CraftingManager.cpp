/*
 *	server/zone/managers/crafting/CraftingManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../objects/player/Player.h"

#include "../../objects/draftschematic/DraftSchematic.h"

#include "../../objects/tangible/resource/ResourceContainer.h"

#include "../../objects/tangible/crafting/CraftingTool.h"

#include "../../objects/tangible/crafting/CraftingStation.h"

#include "CraftingManager.h"

#include "CraftingManagerImplementation.h"

/*
 *	CraftingManagerStub
 */

CraftingManager::CraftingManager() : DistributedObjectStub(NULL) {
}

CraftingManager::CraftingManager(DistributedObjectServant* obj) : DistributedObjectStub(obj) {
}

CraftingManager::CraftingManager(CraftingManager& ref) : DistributedObjectStub(ref) {
}

CraftingManager::~CraftingManager() {
}

CraftingManager* CraftingManager::clone() {
	return new CraftingManager(*this);
}


void CraftingManager::prepareCraftingSession(Player* player, CraftingTool* ct, DraftSchematic* ds) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addObjectParameter(ct);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->prepareCraftingSession(player, ct, ds);
}

void CraftingManager::addResourceToCraft(Player* player, ResourceContainer* rcno, int slot, int counter) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addObjectParameter(rcno);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->addResourceToCraft(player, rcno, slot, counter);
}

void CraftingManager::removeResourceFromCraft(Player* player, unsigned int resID, int slot, int counter) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(resID);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->removeResourceFromCraft(player, resID, slot, counter);
}

void CraftingManager::nextCraftingStage(Player* player, string& test) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addAsciiParameter(test);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->nextCraftingStage(player, test);
}

void CraftingManager::craftingCustomization(Player* player, string& name, int condition) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(condition);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->craftingCustomization(player, name, condition);
}

void CraftingManager::createPrototype(Player* player, string& test) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addAsciiParameter(test);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->createPrototype(player, test);
}

void CraftingManager::addDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->addDraftSchematicsFromGroupName(player, schematicGroupName);
}

void CraftingManager::subtractDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->subtractDraftSchematicsFromGroupName(player, schematicGroupName);
}

/*
 *	CraftingManagerAdapter
 */

CraftingManagerAdapter::CraftingManagerAdapter(CraftingManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* CraftingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		prepareCraftingSession((Player*) inv->getObjectParameter(), (CraftingTool*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter());
		break;
	case 7:
		addResourceToCraft((Player*) inv->getObjectParameter(), (ResourceContainer*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 8:
		removeResourceFromCraft((Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		nextCraftingStage((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_nextCraftingStage__Player_string_));
		break;
	case 10:
		craftingCustomization((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_craftingCustomization__Player_string_int_), inv->getSignedIntParameter());
		break;
	case 11:
		createPrototype((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_createPrototype__Player_string_));
		break;
	case 12:
		addDraftSchematicsFromGroupName((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_addDraftSchematicsFromGroupName__Player_string_));
		break;
	case 13:
		subtractDraftSchematicsFromGroupName((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_subtractDraftSchematicsFromGroupName__Player_string_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void CraftingManagerAdapter::prepareCraftingSession(Player* player, CraftingTool* ct, DraftSchematic* ds) {
	return ((CraftingManagerImplementation*) impl)->prepareCraftingSession(player, ct, ds);
}

void CraftingManagerAdapter::addResourceToCraft(Player* player, ResourceContainer* rcno, int slot, int counter) {
	return ((CraftingManagerImplementation*) impl)->addResourceToCraft(player, rcno, slot, counter);
}

void CraftingManagerAdapter::removeResourceFromCraft(Player* player, unsigned int resID, int slot, int counter) {
	return ((CraftingManagerImplementation*) impl)->removeResourceFromCraft(player, resID, slot, counter);
}

void CraftingManagerAdapter::nextCraftingStage(Player* player, string& test) {
	return ((CraftingManagerImplementation*) impl)->nextCraftingStage(player, test);
}

void CraftingManagerAdapter::craftingCustomization(Player* player, string& name, int condition) {
	return ((CraftingManagerImplementation*) impl)->craftingCustomization(player, name, condition);
}

void CraftingManagerAdapter::createPrototype(Player* player, string& test) {
	return ((CraftingManagerImplementation*) impl)->createPrototype(player, test);
}

void CraftingManagerAdapter::addDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName) {
	return ((CraftingManagerImplementation*) impl)->addDraftSchematicsFromGroupName(player, schematicGroupName);
}

void CraftingManagerAdapter::subtractDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName) {
	return ((CraftingManagerImplementation*) impl)->subtractDraftSchematicsFromGroupName(player, schematicGroupName);
}

/*
 *	CraftingManagerHelper
 */

CraftingManagerHelper::CraftingManagerHelper() {
	className = "CraftingManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingManagerHelper::finalizeHelper() {
	CraftingManagerHelper::finalize();
}

DistributedObject* CraftingManagerHelper::instantiateObject() {
	return new CraftingManager();
}

DistributedObjectAdapter* CraftingManagerHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new CraftingManagerAdapter((CraftingManagerImplementation*) obj);

	DistributedObjectStub* stub = new CraftingManager(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	CraftingManagerServant
 */

CraftingManagerServant::CraftingManagerServant() {
	_classHelper = CraftingManagerHelper::instance();
}

CraftingManagerServant::~CraftingManagerServant() {
}

void CraftingManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingManager*) stub;
}

DistributedObjectStub* CraftingManagerServant::_getStub() {
	return _this;
}

