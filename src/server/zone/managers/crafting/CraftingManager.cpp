/*
 *	server/zone/managers/crafting/CraftingManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CraftingManager.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/player/variables/FactionStandingList.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/templates/intangible/DraftSchematicObjectTemplate.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/player/variables/FriendList.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/objects/player/variables/SchematicList.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/variables/SkillList.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/player/variables/WaypointList.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/packets/object/ObjectControllerMessage.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/player/variables/IgnoreList.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	CraftingManagerStub
 */

enum {RPC_GETSCHEMATIC__INT_,RPC_SENDDRAFTSLOTSTO__PLAYERCREATURE_INT_,RPC_SENDRESOURCEWEIGHTSTO__PLAYERCREATURE_INT_,RPC_CALCULATEASSEMBLYSUCCESS__PLAYERCREATURE_DRAFTSCHEMATIC_FLOAT_,RPC_CALCULATEASSEMBLYVALUEMODIFIER__INT_,RPC_GETASSEMBLYPERCENTAGE__FLOAT_,RPC_CALCULATEEXPERIMENTATIONFAILURERATE__PLAYERCREATURE_MANUFACTURESCHEMATIC_INT_,RPC_CALCULATEEXPERIMENTATIONSUCCESS__PLAYERCREATURE_DRAFTSCHEMATIC_FLOAT_,RPC_CALCULATEEXPERIMENTATIONVALUEMODIFIER__INT_INT_,RPC_GETWEIGHTEDVALUE__MANUFACTURESCHEMATIC_INT_,RPC_GENERATESERIAL__};

CraftingManager::CraftingManager() : ZoneManager(DummyConstructorParameter::instance()) {
	CraftingManagerImplementation* _implementation = new CraftingManagerImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

CraftingManager::CraftingManager(DummyConstructorParameter* param) : ZoneManager(param) {
}

CraftingManager::~CraftingManager() {
}


void CraftingManager::initialize() {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->initialize();
}

void CraftingManager::awardSchematicGroup(PlayerObject* playerObject, Vector<String>& schematicgroups, bool updateClient) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->awardSchematicGroup(playerObject, schematicgroups, updateClient);
}

void CraftingManager::removeSchematicGroup(PlayerObject* playerObject, Vector<String>& schematicgroups, bool updateClient) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removeSchematicGroup(playerObject, schematicgroups, updateClient);
}

DraftSchematic* CraftingManager::getSchematic(unsigned int schematicID) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSCHEMATIC__INT_);
		method.addUnsignedIntParameter(schematicID);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return _implementation->getSchematic(schematicID);
}

void CraftingManager::sendDraftSlotsTo(PlayerCreature* player, unsigned int schematicID) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDRAFTSLOTSTO__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(schematicID);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDraftSlotsTo(player, schematicID);
}

void CraftingManager::sendResourceWeightsTo(PlayerCreature* player, unsigned int schematicID) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRESOURCEWEIGHTSTO__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(schematicID);

		method.executeWithVoidReturn();
	} else
		_implementation->sendResourceWeightsTo(player, schematicID);
}

int CraftingManager::calculateAssemblySuccess(PlayerCreature* player, DraftSchematic* draftSchematic, float effectiveness) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEASSEMBLYSUCCESS__PLAYERCREATURE_DRAFTSCHEMATIC_FLOAT_);
		method.addObjectParameter(player);
		method.addObjectParameter(draftSchematic);
		method.addFloatParameter(effectiveness);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->calculateAssemblySuccess(player, draftSchematic, effectiveness);
}

float CraftingManager::calculateAssemblyValueModifier(int assemblyResult) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEASSEMBLYVALUEMODIFIER__INT_);
		method.addSignedIntParameter(assemblyResult);

		return method.executeWithFloatReturn();
	} else
		return _implementation->calculateAssemblyValueModifier(assemblyResult);
}

float CraftingManager::getAssemblyPercentage(float value) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETASSEMBLYPERCENTAGE__FLOAT_);
		method.addFloatParameter(value);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getAssemblyPercentage(value);
}

int CraftingManager::calculateExperimentationFailureRate(PlayerCreature* player, ManufactureSchematic* manufactureSchematic, int pointsUsed) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEEXPERIMENTATIONFAILURERATE__PLAYERCREATURE_MANUFACTURESCHEMATIC_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(manufactureSchematic);
		method.addSignedIntParameter(pointsUsed);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->calculateExperimentationFailureRate(player, manufactureSchematic, pointsUsed);
}

int CraftingManager::calculateExperimentationSuccess(PlayerCreature* player, DraftSchematic* draftSchematic, float effectiveness) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEEXPERIMENTATIONSUCCESS__PLAYERCREATURE_DRAFTSCHEMATIC_FLOAT_);
		method.addObjectParameter(player);
		method.addObjectParameter(draftSchematic);
		method.addFloatParameter(effectiveness);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->calculateExperimentationSuccess(player, draftSchematic, effectiveness);
}

float CraftingManager::calculateExperimentationValueModifier(int experimentationResult, int pointsAttempted) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEEXPERIMENTATIONVALUEMODIFIER__INT_INT_);
		method.addSignedIntParameter(experimentationResult);
		method.addSignedIntParameter(pointsAttempted);

		return method.executeWithFloatReturn();
	} else
		return _implementation->calculateExperimentationValueModifier(experimentationResult, pointsAttempted);
}

float CraftingManager::getWeightedValue(ManufactureSchematic* manufactureSchematic, int type) {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWEIGHTEDVALUE__MANUFACTURESCHEMATIC_INT_);
		method.addObjectParameter(manufactureSchematic);
		method.addSignedIntParameter(type);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getWeightedValue(manufactureSchematic, type);
}

String CraftingManager::generateSerial() {
	CraftingManagerImplementation* _implementation = (CraftingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATESERIAL__);

		method.executeWithAsciiReturn(_return_generateSerial);
		return _return_generateSerial;
	} else
		return _implementation->generateSerial();
}

DistributedObjectServant* CraftingManager::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void CraftingManager::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<CraftingManagerImplementation*>(servant));
}

/*
 *	CraftingManagerImplementation
 */

CraftingManagerImplementation::CraftingManagerImplementation(DummyConstructorParameter* param) : ZoneManagerImplementation(param) {
	_initializeImplementation();
}


CraftingManagerImplementation::~CraftingManagerImplementation() {
}


void CraftingManagerImplementation::finalize() {
}

void CraftingManagerImplementation::_initializeImplementation() {
	_setClassHelper(CraftingManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void CraftingManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingManager*) stub;
	ZoneManagerImplementation::_setStub(stub);
}

DistributedObjectStub* CraftingManagerImplementation::_getStub() {
	return _this;
}

CraftingManagerImplementation::operator const CraftingManager*() {
	return _this;
}

Object* CraftingManagerImplementation::clone() {
	return dynamic_cast<Object*>(new CraftingManagerImplementation(*this));
}


void CraftingManagerImplementation::lock(bool doLock) {
}

void CraftingManagerImplementation::lock(ManagedObject* obj) {
}

void CraftingManagerImplementation::rlock(bool doLock) {
}

void CraftingManagerImplementation::wlock(bool doLock) {
}

void CraftingManagerImplementation::wlock(ManagedObject* obj) {
}

void CraftingManagerImplementation::unlock(bool doLock) {
}

void CraftingManagerImplementation::runlock(bool doLock) {
}

void CraftingManagerImplementation::_serializationHelperMethod() {
	ZoneManagerImplementation::_serializationHelperMethod();

	_setClassName("CraftingManager");

}

void CraftingManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CraftingManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CraftingManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ZoneManagerImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void CraftingManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CraftingManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CraftingManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ZoneManagerImplementation::writeObjectMembers(stream);
}

CraftingManagerImplementation::CraftingManagerImplementation() : ZoneManagerImplementation("CraftingManager") {
	_initializeImplementation();
}

DraftSchematic* CraftingManagerImplementation::getSchematic(unsigned int schematicID) {
	// server/zone/managers/crafting/CraftingManager.idl():  		return schematicMap.get(schematicID);
	return schematicMap->get(schematicID);
}

/*
 *	CraftingManagerAdapter
 */

CraftingManagerAdapter::CraftingManagerAdapter(CraftingManagerImplementation* obj) : ZoneManagerAdapter(obj) {
}

Packet* CraftingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GETSCHEMATIC__INT_:
		resp->insertLong(getSchematic(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case RPC_SENDDRAFTSLOTSTO__PLAYERCREATURE_INT_:
		sendDraftSlotsTo((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_SENDRESOURCEWEIGHTSTO__PLAYERCREATURE_INT_:
		sendResourceWeightsTo((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_CALCULATEASSEMBLYSUCCESS__PLAYERCREATURE_DRAFTSCHEMATIC_FLOAT_:
		resp->insertSignedInt(calculateAssemblySuccess((PlayerCreature*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case RPC_CALCULATEASSEMBLYVALUEMODIFIER__INT_:
		resp->insertFloat(calculateAssemblyValueModifier(inv->getSignedIntParameter()));
		break;
	case RPC_GETASSEMBLYPERCENTAGE__FLOAT_:
		resp->insertFloat(getAssemblyPercentage(inv->getFloatParameter()));
		break;
	case RPC_CALCULATEEXPERIMENTATIONFAILURERATE__PLAYERCREATURE_MANUFACTURESCHEMATIC_INT_:
		resp->insertSignedInt(calculateExperimentationFailureRate((PlayerCreature*) inv->getObjectParameter(), (ManufactureSchematic*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_CALCULATEEXPERIMENTATIONSUCCESS__PLAYERCREATURE_DRAFTSCHEMATIC_FLOAT_:
		resp->insertSignedInt(calculateExperimentationSuccess((PlayerCreature*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case RPC_CALCULATEEXPERIMENTATIONVALUEMODIFIER__INT_INT_:
		resp->insertFloat(calculateExperimentationValueModifier(inv->getSignedIntParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_GETWEIGHTEDVALUE__MANUFACTURESCHEMATIC_INT_:
		resp->insertFloat(getWeightedValue((ManufactureSchematic*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_GENERATESERIAL__:
		resp->insertAscii(generateSerial());
		break;
	default:
		return NULL;
	}

	return resp;
}

DraftSchematic* CraftingManagerAdapter::getSchematic(unsigned int schematicID) {
	return ((CraftingManagerImplementation*) impl)->getSchematic(schematicID);
}

void CraftingManagerAdapter::sendDraftSlotsTo(PlayerCreature* player, unsigned int schematicID) {
	((CraftingManagerImplementation*) impl)->sendDraftSlotsTo(player, schematicID);
}

void CraftingManagerAdapter::sendResourceWeightsTo(PlayerCreature* player, unsigned int schematicID) {
	((CraftingManagerImplementation*) impl)->sendResourceWeightsTo(player, schematicID);
}

int CraftingManagerAdapter::calculateAssemblySuccess(PlayerCreature* player, DraftSchematic* draftSchematic, float effectiveness) {
	return ((CraftingManagerImplementation*) impl)->calculateAssemblySuccess(player, draftSchematic, effectiveness);
}

float CraftingManagerAdapter::calculateAssemblyValueModifier(int assemblyResult) {
	return ((CraftingManagerImplementation*) impl)->calculateAssemblyValueModifier(assemblyResult);
}

float CraftingManagerAdapter::getAssemblyPercentage(float value) {
	return ((CraftingManagerImplementation*) impl)->getAssemblyPercentage(value);
}

int CraftingManagerAdapter::calculateExperimentationFailureRate(PlayerCreature* player, ManufactureSchematic* manufactureSchematic, int pointsUsed) {
	return ((CraftingManagerImplementation*) impl)->calculateExperimentationFailureRate(player, manufactureSchematic, pointsUsed);
}

int CraftingManagerAdapter::calculateExperimentationSuccess(PlayerCreature* player, DraftSchematic* draftSchematic, float effectiveness) {
	return ((CraftingManagerImplementation*) impl)->calculateExperimentationSuccess(player, draftSchematic, effectiveness);
}

float CraftingManagerAdapter::calculateExperimentationValueModifier(int experimentationResult, int pointsAttempted) {
	return ((CraftingManagerImplementation*) impl)->calculateExperimentationValueModifier(experimentationResult, pointsAttempted);
}

float CraftingManagerAdapter::getWeightedValue(ManufactureSchematic* manufactureSchematic, int type) {
	return ((CraftingManagerImplementation*) impl)->getWeightedValue(manufactureSchematic, type);
}

String CraftingManagerAdapter::generateSerial() {
	return ((CraftingManagerImplementation*) impl)->generateSerial();
}

/*
 *	CraftingManagerHelper
 */

CraftingManagerHelper* CraftingManagerHelper::staticInitializer = CraftingManagerHelper::instance();

CraftingManagerHelper::CraftingManagerHelper() {
	className = "CraftingManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void CraftingManagerHelper::finalizeHelper() {
	CraftingManagerHelper::finalize();
}

DistributedObject* CraftingManagerHelper::instantiateObject() {
	return new CraftingManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CraftingManagerHelper::instantiateServant() {
	return new CraftingManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CraftingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CraftingManagerAdapter((CraftingManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

