/*
 *	server/zone/managers/crafting/CraftingManager.h generated by engine3 IDL compiler 0.55
 */

#ifndef CRAFTINGMANAGER_H_
#define CRAFTINGMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

class Player;

class DraftSchematic;

class ResourceContainer;

class CraftingTool;

class CraftingStation;

class CraftingManager : public DistributedObjectStub {
protected:
	CraftingManager();
	CraftingManager(DistributedObjectServant* obj);
	CraftingManager(CraftingManager& ref);

	virtual ~CraftingManager();

public:
	CraftingManager* clone();

	void prepareCraftingSession(Player* player, CraftingTool* ct, DraftSchematic* ds);

	void addResourceToCraft(Player* player, ResourceContainer* rcno, int slot, int counter);

	void removeResourceFromCraft(Player* player, unsigned int resID, int slot, int counter);

	void nextCraftingStage(Player* player, string& test);

	void craftingCustomization(Player* player, string& name, int condition);

	void createPrototype(Player* player, string& test);

	void addDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName);

	void subtractDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName);

protected:
	friend class CraftingManagerHelper;
};

class CraftingManagerImplementation;

class CraftingManagerAdapter : public DistributedObjectAdapter {
public:
	CraftingManagerAdapter(CraftingManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void prepareCraftingSession(Player* player, CraftingTool* ct, DraftSchematic* ds);

	void addResourceToCraft(Player* player, ResourceContainer* rcno, int slot, int counter);

	void removeResourceFromCraft(Player* player, unsigned int resID, int slot, int counter);

	void nextCraftingStage(Player* player, string& test);

	void craftingCustomization(Player* player, string& name, int condition);

	void createPrototype(Player* player, string& test);

	void addDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName);

	void subtractDraftSchematicsFromGroupName(Player* player, const string& schematicGroupName);

protected:
	string _param1_nextCraftingStage__Player_string_;
	string _param1_craftingCustomization__Player_string_int_;
	string _param1_createPrototype__Player_string_;
	string _param1_addDraftSchematicsFromGroupName__Player_string_;
	string _param1_subtractDraftSchematicsFromGroupName__Player_string_;
};

class CraftingManagerHelper : public DistributedObjectClassHelper, public Singleton<CraftingManagerHelper> {
	static CraftingManagerHelper* staticInitializer;

public:
	CraftingManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<CraftingManagerHelper>;
};

class CraftingManagerServant : public DistributedObjectServant {
public:
	CraftingManager* _this;

public:
	CraftingManagerServant();
	virtual ~CraftingManagerServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CRAFTINGMANAGER_H_*/
