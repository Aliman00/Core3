/*
 *	server/zone/managers/user/UserManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "UserManager.h"

/*
 *	UserManagerStub
 */

UserManager::UserManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

UserManager::~UserManager() {
}


/*
 *	UserManagerImplementation
 */

UserManagerImplementation::UserManagerImplementation() {
	_initializeImplementation();
}

UserManagerImplementation::UserManagerImplementation(DummyConstructorParameter* param) {
	_initializeImplementation();
}

UserManagerImplementation::~UserManagerImplementation() {
}


void UserManagerImplementation::finalize() {
}

void UserManagerImplementation::_initializeImplementation() {
	_setClassHelper(UserManagerHelper::instance());

	_serializationHelperMethod();
}

void UserManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (UserManager*) stub;
}

DistributedObjectStub* UserManagerImplementation::_getStub() {
	return _this;
}

UserManagerImplementation::operator const UserManager*() {
	return _this;
}

void UserManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void UserManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void UserManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void UserManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void UserManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void UserManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void UserManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void UserManagerImplementation::_serializationHelperMethod() {
	_setClassName("UserManager");

}

/*
 *	UserManagerAdapter
 */

UserManagerAdapter::UserManagerAdapter(UserManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* UserManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	UserManagerHelper
 */

UserManagerHelper* UserManagerHelper::staticInitializer = UserManagerHelper::instance();

UserManagerHelper::UserManagerHelper() {
	className = "UserManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void UserManagerHelper::finalizeHelper() {
	UserManagerHelper::finalize();
}

DistributedObject* UserManagerHelper::instantiateObject() {
	return new UserManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* UserManagerHelper::instantiateServant() {
	return new UserManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* UserManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new UserManagerAdapter((UserManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

