/*
 *	server/zone/managers/user/UserManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef USERMANAGER_H_
#define USERMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

class UserManager : public DistributedObjectStub {
public:
protected:
	UserManager(DummyConstructorParameter* param);

	virtual ~UserManager();

	friend class UserManagerHelper;
};

class UserManagerImplementation : public DistributedObjectServant {

public:
	UserManagerImplementation();
	UserManagerImplementation(DummyConstructorParameter* param);

	UserManager* _this;

	operator const UserManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~UserManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class UserManager;
};

class UserManagerAdapter : public DistributedObjectAdapter {
public:
	UserManagerAdapter(UserManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class UserManagerHelper : public DistributedObjectClassHelper, public Singleton<UserManagerHelper> {
	static UserManagerHelper* staticInitializer;

public:
	UserManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<UserManagerHelper>;
};

#endif /*USERMANAGER_H_*/
