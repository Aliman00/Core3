/*
 *	server/zone/managers/loot/LootManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "LootManager.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/loot/lootgroup/LootGroupObject.h"

#include "server/zone/managers/loot/lootgroup/LootObject.h"


// Imported class dependencies

#include "system/util/Vector.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/crafting/schematicmap/SchematicMap.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "engine/core/Task.h"

#include "system/net/Socket.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/login/account/Account.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "system/lang/Time.h"

#include "server/zone/objects/cell/CellObject.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "system/util/VectorMap.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "system/lang/Exception.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "engine/util/u3d/Quaternion.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "engine/stm/TransactionalReference.h"

#include "system/net/SocketAddress.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "system/net/Packet.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/managers/loot/lootgroup/LootObject.h"

#include "server/zone/ZoneHandler.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "engine/service/Message.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/planet/PlanetManager.h"

/*
 *	LootManagerStub
 */

enum {RPC_INITIALIZE__ = 6,RPC_CONTAINS__INT_,RPC_CREATELOOT__PLAYERCREATURE_SCENEOBJECT_INT_INT_INT_,RPC_TESTLOOT__PLAYERCREATURE_SCENEOBJECT_};

LootManager::LootManager(CraftingManager* craftman) : ZoneManager(DummyConstructorParameter::instance()) {
	LootManagerImplementation* _implementation = new LootManagerImplementation(craftman);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

LootManager::LootManager(DummyConstructorParameter* param) : ZoneManager(param) {
}

LootManager::~LootManager() {
}


void LootManager::initialize() {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

bool LootManager::contains(unsigned int lootGroup) {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINS__INT_);
		method.addUnsignedIntParameter(lootGroup);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->contains(lootGroup);
}

void LootManager::createLoot(PlayerCreature* receiver, SceneObject* container, int level, unsigned int lootGroup, int objectCount) {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATELOOT__PLAYERCREATURE_SCENEOBJECT_INT_INT_INT_);
		method.addObjectParameter(receiver);
		method.addObjectParameter(container);
		method.addSignedIntParameter(level);
		method.addUnsignedIntParameter(lootGroup);
		method.addSignedIntParameter(objectCount);

		method.executeWithVoidReturn();
	} else
		_implementation->createLoot(receiver, container, level, lootGroup, objectCount);
}

void LootManager::createLoot(PlayerCreature* receiver, SceneObject* container, int level, Vector<unsigned int>* lootGroup) {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->createLoot(receiver, container, level, lootGroup);
}

void LootManager::testLoot(PlayerCreature* receiver, SceneObject* container) {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TESTLOOT__PLAYERCREATURE_SCENEOBJECT_);
		method.addObjectParameter(receiver);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		_implementation->testLoot(receiver, container);
}

DistributedObjectServant* LootManager::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void LootManager::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<LootManagerImplementation*>(servant));
}

/*
 *	LootManagerImplementation
 */

LootManagerImplementation::LootManagerImplementation(DummyConstructorParameter* param) : ZoneManagerImplementation(param) {
	_initializeImplementation();
}


LootManagerImplementation::~LootManagerImplementation() {
}


void LootManagerImplementation::finalize() {
}

void LootManagerImplementation::_initializeImplementation() {
	_setClassHelper(LootManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void LootManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LootManager*) stub;
	ZoneManagerImplementation::_setStub(stub);
}

DistributedObjectStub* LootManagerImplementation::_getStub() {
	return _this;
}

LootManagerImplementation::operator const LootManager*() {
	return _this;
}

Object* LootManagerImplementation::clone() {
	return dynamic_cast<Object*>(new LootManagerImplementation(*this));
}


void LootManagerImplementation::lock(bool doLock) {
}

void LootManagerImplementation::lock(ManagedObject* obj) {
}

void LootManagerImplementation::rlock(bool doLock) {
}

void LootManagerImplementation::wlock(bool doLock) {
}

void LootManagerImplementation::wlock(ManagedObject* obj) {
}

void LootManagerImplementation::unlock(bool doLock) {
}

void LootManagerImplementation::runlock(bool doLock) {
}

void LootManagerImplementation::_serializationHelperMethod() {
	ZoneManagerImplementation::_serializationHelperMethod();

	_setClassName("LootManager");

}

void LootManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(LootManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LootManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ZoneManagerImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "lootGroups") {
		TypeInfo<VectorMap<unsigned int, ManagedReference<LootGroupObject* > > >::parseFromBinaryStream(&lootGroups, stream);
		return true;
	}


	return false;
}

void LootManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "lootGroups";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned int, ManagedReference<LootGroupObject* > > >::toBinaryStream(&lootGroups, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ZoneManagerImplementation::writeObjectMembers(stream);
}

LootManagerImplementation::LootManagerImplementation(CraftingManager* craftman) : ZoneManagerImplementation("LootManager") {
	_initializeImplementation();
	// server/zone/managers/loot/LootManager.idl():  		lootGroups.setNullValue(null);
	(&lootGroups)->setNullValue(NULL);
	// server/zone/managers/loot/LootManager.idl():  		lootGroups.setNoDuplicateInsertPlan();
	(&lootGroups)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		craftingManager = craftman;
	craftingManager = craftman;
}

bool LootManagerImplementation::contains(unsigned int lootGroup) {
	// server/zone/managers/loot/LootManager.idl():  		return (lootGroups.contains(lootGroup));
	return ((&lootGroups)->contains(lootGroup));
}

/*
 *	LootManagerAdapter
 */

LootManagerAdapter::LootManagerAdapter(LootManagerImplementation* obj) : ZoneManagerAdapter(obj) {
}

Packet* LootManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZE__:
		initialize();
		break;
	case RPC_CONTAINS__INT_:
		resp->insertBoolean(contains(inv->getUnsignedIntParameter()));
		break;
	case RPC_CREATELOOT__PLAYERCREATURE_SCENEOBJECT_INT_INT_INT_:
		createLoot((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case RPC_TESTLOOT__PLAYERCREATURE_SCENEOBJECT_:
		testLoot((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void LootManagerAdapter::initialize() {
	((LootManagerImplementation*) impl)->initialize();
}

bool LootManagerAdapter::contains(unsigned int lootGroup) {
	return ((LootManagerImplementation*) impl)->contains(lootGroup);
}

void LootManagerAdapter::createLoot(PlayerCreature* receiver, SceneObject* container, int level, unsigned int lootGroup, int objectCount) {
	((LootManagerImplementation*) impl)->createLoot(receiver, container, level, lootGroup, objectCount);
}

void LootManagerAdapter::testLoot(PlayerCreature* receiver, SceneObject* container) {
	((LootManagerImplementation*) impl)->testLoot(receiver, container);
}

/*
 *	LootManagerHelper
 */

LootManagerHelper* LootManagerHelper::staticInitializer = LootManagerHelper::instance();

LootManagerHelper::LootManagerHelper() {
	className = "LootManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void LootManagerHelper::finalizeHelper() {
	LootManagerHelper::finalize();
}

DistributedObject* LootManagerHelper::instantiateObject() {
	return new LootManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootManagerHelper::instantiateServant() {
	return new LootManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LootManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootManagerAdapter((LootManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

