/*
 *	server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../Zone.h"

#include "../../ZoneClient.h"

#include "../player/Player.h"

#include "SceneObject.h"

#include "SceneObjectImplementation.h"

/*
 *	SceneObjectStub
 */

SceneObject::SceneObject() : ManagedObject(NULL) {
}

SceneObject::SceneObject(DistributedObjectServant* obj) : ManagedObject(obj) {
}

SceneObject::SceneObject(SceneObject& ref) : ManagedObject(ref) {
}

SceneObject::~SceneObject() {
}

SceneObject* SceneObject::clone() {
	return new SceneObject(*this);
}


bool SceneObject::_destroy() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->destroy();
}

void SceneObject::redeploy() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->redeploy();
}

void SceneObject::scheduleUndeploy() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->scheduleUndeploy();
}

void SceneObject::removeUndeploymentEvent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeUndeploymentEvent();
}

void SceneObject::sendTo(Player* player, bool doClose) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendTo(player, doClose);
}

void SceneObject::sendDestroyTo(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendDestroyTo(player);
}

void SceneObject::create(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->create(client);
}

void SceneObject::destroy(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroy(client);
}

void SceneObject::sendConversationStartTo(SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 14);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendConversationStartTo(obj);
}

void SceneObject::selectConversationOption(int option, SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 15);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->selectConversationOption(option, obj);
}

void SceneObject::close(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 16);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->close(client);
}

bool SceneObject::isInRange(SceneObject* obj, float range) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 17);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

bool SceneObject::isInRange(float x, float y, float range) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 18);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(x, y, range);
}

int SceneObject::inRangeObjectCount() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->inRangeObjectCount();
}

QuadTreeEntry* SceneObject::getInRangeObject(int idx) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 20);
		method.addSignedIntParameter(idx);

		return (QuadTreeEntry*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getInRangeObject(idx);
}

void SceneObject::addInRangeObject(QuadTreeEntry* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 21);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->addInRangeObject(obj);
}

void SceneObject::removeInRangeObject(QuadTreeEntry* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 22);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeInRangeObject(obj);
}

bool SceneObject::isInQuadTree() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInQuadTree();
}

QuadTreeEntry* SceneObject::getQuadTreeEntry() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 24);

		return (QuadTreeEntry*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getQuadTreeEntry();
}

int SceneObject::compareTo(SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 25);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->compareTo(obj);
}

BaseMessage* SceneObject::link(SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 26);
		method.addObjectParameter(obj);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->link(obj);
}

void SceneObject::link(ZoneClient* client, SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 27);
		method.addObjectParameter(client);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->link(client, obj);
}

void SceneObject::randomizePosition(float radius) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 28);
		method.addFloatParameter(radius);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->randomizePosition(radius);
}

int SceneObject::useObject(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 29);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->useObject(player);
}

void SceneObject::initializePosition(float x, float z, float y) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 30);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializePosition(x, z, y);
}

void SceneObject::setPosition(float x, float z, float y) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 31);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setPosition(x, z, y);
}

void SceneObject::setDirection(float x, float z, float y, float w) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 32);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addFloatParameter(w);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setDirection(x, z, y, w);
}

void SceneObject::generateAttributes(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 33);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->generateAttributes(player);
}

void SceneObject::info(const string& message, bool forcedLog) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 34);
		method.addAsciiParameter(message);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->info(message, forcedLog);
}

void SceneObject::error(const string& message) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 35);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->error(message);
}

void SceneObject::setObjectID(unsigned long long oid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 36);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setObjectID(oid);
}

void SceneObject::setObjectCRC(unsigned int crc) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 37);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setObjectCRC(crc);
}

void SceneObject::setMovementCounter(unsigned int cntr) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 38);
		method.addUnsignedIntParameter(cntr);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setMovementCounter(cntr);
}

void SceneObject::setZoneIndex(int id) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 39);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setZoneIndex(id);
}

void SceneObject::setParent(SceneObject* par, unsigned int linktype) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 40);
		method.addObjectParameter(par);
		method.addUnsignedIntParameter(linktype);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setParent(par, linktype);
}

void SceneObject::setZone(Zone* zne) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 41);
		method.addObjectParameter(zne);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setZone(zne);
}

void SceneObject::clearUndeploymentEvent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 42);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->clearUndeploymentEvent();
}

bool SceneObject::isUndeploymentScheduled() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isUndeploymentScheduled();
}

int SceneObject::getObjectType() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 44);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectType();
}

unsigned long long SceneObject::getObjectID() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 45);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectID();
}

unsigned int SceneObject::getObjectCRC() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 46);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectCRC();
}

unsigned int SceneObject::getMovementCounter() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 47);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMovementCounter();
}

float SceneObject::getPositionX() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 48);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionX();
}

float SceneObject::getPositionZ() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 49);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionZ();
}

float SceneObject::getPositionY() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 50);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionY();
}

int SceneObject::getDirectionAngle() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 51);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionAngle();
}

float SceneObject::getDirectionX() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 52);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionX();
}

float SceneObject::getDirectionZ() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 53);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionZ();
}

float SceneObject::getDirectionY() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 54);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionY();
}

float SceneObject::getDirectionW() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 55);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionW();
}

string& SceneObject::getLoggingName() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 56);

		method.executeWithAsciiReturn(_return_getLoggingName);
		return _return_getLoggingName;
	} else
		return ((SceneObjectImplementation*) _impl)->getLoggingName();
}

bool SceneObject::isPlayer() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 57);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isPlayer();
}

bool SceneObject::isNonPlayerCreature() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 58);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isNonPlayerCreature();
}

bool SceneObject::isBuilding() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBuilding();
}

bool SceneObject::isCell() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 60);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCell();
}

bool SceneObject::isTangible() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 61);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isTangible();
}

bool SceneObject::isIntangible() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 62);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isIntangible();
}

bool SceneObject::isStatic() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 63);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isStatic();
}

bool SceneObject::isShip() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 64);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isShip();
}

Zone* SceneObject::getZone() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 65);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZone();
}

int SceneObject::getZoneID() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 66);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZoneID();
}

SceneObject* SceneObject::getParent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 67);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParent();
}

unsigned long long SceneObject::getParentID() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 68);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParentID();
}

bool SceneObject::isMoving() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 69);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isMoving();
}

void SceneObject::switchMovingState() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 70);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->switchMovingState();
}

bool SceneObject::doKeepObject() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 71);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->doKeepObject();
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(destroy());
		break;
	case 7:
		redeploy();
		break;
	case 8:
		scheduleUndeploy();
		break;
	case 9:
		removeUndeploymentEvent();
		break;
	case 10:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 11:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 12:
		create((ZoneClient*) inv->getObjectParameter());
		break;
	case 13:
		destroy((ZoneClient*) inv->getObjectParameter());
		break;
	case 14:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 15:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 16:
		close((ZoneClient*) inv->getObjectParameter());
		break;
	case 17:
		resp->insertBoolean(isInRange((SceneObject*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case 18:
		resp->insertBoolean(isInRange(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter()));
		break;
	case 19:
		resp->insertSignedInt(inRangeObjectCount());
		break;
	case 20:
		resp->insertLong(getInRangeObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 21:
		addInRangeObject((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 22:
		removeInRangeObject((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 23:
		resp->insertBoolean(isInQuadTree());
		break;
	case 24:
		resp->insertLong(getQuadTreeEntry()->_getObjectID());
		break;
	case 25:
		resp->insertSignedInt(compareTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 26:
		resp->insertLong(link((SceneObject*) inv->getObjectParameter())->_getObjectID());
		break;
	case 27:
		link((ZoneClient*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 28:
		randomizePosition(inv->getFloatParameter());
		break;
	case 29:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 30:
		initializePosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 31:
		setPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 32:
		setDirection(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 33:
		generateAttributes((Player*) inv->getObjectParameter());
		break;
	case 34:
		info(inv->getAsciiParameter(_param0_info__string_bool_), inv->getBooleanParameter());
		break;
	case 35:
		error(inv->getAsciiParameter(_param0_error__string_));
		break;
	case 36:
		setObjectID(inv->getUnsignedLongParameter());
		break;
	case 37:
		setObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 38:
		setMovementCounter(inv->getUnsignedIntParameter());
		break;
	case 39:
		setZoneIndex(inv->getSignedIntParameter());
		break;
	case 40:
		setParent((SceneObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 41:
		setZone((Zone*) inv->getObjectParameter());
		break;
	case 42:
		clearUndeploymentEvent();
		break;
	case 43:
		resp->insertBoolean(isUndeploymentScheduled());
		break;
	case 44:
		resp->insertSignedInt(getObjectType());
		break;
	case 45:
		resp->insertLong(getObjectID());
		break;
	case 46:
		resp->insertInt(getObjectCRC());
		break;
	case 47:
		resp->insertInt(getMovementCounter());
		break;
	case 48:
		resp->insertFloat(getPositionX());
		break;
	case 49:
		resp->insertFloat(getPositionZ());
		break;
	case 50:
		resp->insertFloat(getPositionY());
		break;
	case 51:
		resp->insertSignedInt(getDirectionAngle());
		break;
	case 52:
		resp->insertFloat(getDirectionX());
		break;
	case 53:
		resp->insertFloat(getDirectionZ());
		break;
	case 54:
		resp->insertFloat(getDirectionY());
		break;
	case 55:
		resp->insertFloat(getDirectionW());
		break;
	case 56:
		resp->insertAscii(getLoggingName());
		break;
	case 57:
		resp->insertBoolean(isPlayer());
		break;
	case 58:
		resp->insertBoolean(isNonPlayerCreature());
		break;
	case 59:
		resp->insertBoolean(isBuilding());
		break;
	case 60:
		resp->insertBoolean(isCell());
		break;
	case 61:
		resp->insertBoolean(isTangible());
		break;
	case 62:
		resp->insertBoolean(isIntangible());
		break;
	case 63:
		resp->insertBoolean(isStatic());
		break;
	case 64:
		resp->insertBoolean(isShip());
		break;
	case 65:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case 66:
		resp->insertSignedInt(getZoneID());
		break;
	case 67:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case 68:
		resp->insertLong(getParentID());
		break;
	case 69:
		resp->insertBoolean(isMoving());
		break;
	case 70:
		switchMovingState();
		break;
	case 71:
		resp->insertBoolean(doKeepObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool SceneObjectAdapter::destroy() {
	return ((SceneObjectImplementation*) impl)->destroy();
}

void SceneObjectAdapter::redeploy() {
	return ((SceneObjectImplementation*) impl)->redeploy();
}

void SceneObjectAdapter::scheduleUndeploy() {
	return ((SceneObjectImplementation*) impl)->scheduleUndeploy();
}

void SceneObjectAdapter::removeUndeploymentEvent() {
	return ((SceneObjectImplementation*) impl)->removeUndeploymentEvent();
}

void SceneObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((SceneObjectImplementation*) impl)->sendTo(player, doClose);
}

void SceneObjectAdapter::sendDestroyTo(Player* player) {
	return ((SceneObjectImplementation*) impl)->sendDestroyTo(player);
}

void SceneObjectAdapter::create(ZoneClient* client) {
	return ((SceneObjectImplementation*) impl)->create(client);
}

void SceneObjectAdapter::destroy(ZoneClient* client) {
	return ((SceneObjectImplementation*) impl)->destroy(client);
}

void SceneObjectAdapter::sendConversationStartTo(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->sendConversationStartTo(obj);
}

void SceneObjectAdapter::selectConversationOption(int option, SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->selectConversationOption(option, obj);
}

void SceneObjectAdapter::close(ZoneClient* client) {
	return ((SceneObjectImplementation*) impl)->close(client);
}

bool SceneObjectAdapter::isInRange(SceneObject* obj, float range) {
	return ((SceneObjectImplementation*) impl)->isInRange(obj, range);
}

bool SceneObjectAdapter::isInRange(float x, float y, float range) {
	return ((SceneObjectImplementation*) impl)->isInRange(x, y, range);
}

int SceneObjectAdapter::inRangeObjectCount() {
	return ((SceneObjectImplementation*) impl)->inRangeObjectCount();
}

QuadTreeEntry* SceneObjectAdapter::getInRangeObject(int idx) {
	return ((SceneObjectImplementation*) impl)->getInRangeObject(idx);
}

void SceneObjectAdapter::addInRangeObject(QuadTreeEntry* obj) {
	return ((SceneObjectImplementation*) impl)->addInRangeObject(obj);
}

void SceneObjectAdapter::removeInRangeObject(QuadTreeEntry* obj) {
	return ((SceneObjectImplementation*) impl)->removeInRangeObject(obj);
}

bool SceneObjectAdapter::isInQuadTree() {
	return ((SceneObjectImplementation*) impl)->isInQuadTree();
}

QuadTreeEntry* SceneObjectAdapter::getQuadTreeEntry() {
	return ((SceneObjectImplementation*) impl)->getQuadTreeEntry();
}

int SceneObjectAdapter::compareTo(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->compareTo(obj);
}

BaseMessage* SceneObjectAdapter::link(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->link(obj);
}

void SceneObjectAdapter::link(ZoneClient* client, SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->link(client, obj);
}

void SceneObjectAdapter::randomizePosition(float radius) {
	return ((SceneObjectImplementation*) impl)->randomizePosition(radius);
}

int SceneObjectAdapter::useObject(Player* player) {
	return ((SceneObjectImplementation*) impl)->useObject(player);
}

void SceneObjectAdapter::initializePosition(float x, float z, float y) {
	return ((SceneObjectImplementation*) impl)->initializePosition(x, z, y);
}

void SceneObjectAdapter::setPosition(float x, float z, float y) {
	return ((SceneObjectImplementation*) impl)->setPosition(x, z, y);
}

void SceneObjectAdapter::setDirection(float x, float z, float y, float w) {
	return ((SceneObjectImplementation*) impl)->setDirection(x, z, y, w);
}

void SceneObjectAdapter::generateAttributes(Player* player) {
	return ((SceneObjectImplementation*) impl)->generateAttributes(player);
}

void SceneObjectAdapter::info(const string& message, bool forcedLog) {
	return ((SceneObjectImplementation*) impl)->info(message, forcedLog);
}

void SceneObjectAdapter::error(const string& message) {
	return ((SceneObjectImplementation*) impl)->error(message);
}

void SceneObjectAdapter::setObjectID(unsigned long long oid) {
	return ((SceneObjectImplementation*) impl)->setObjectID(oid);
}

void SceneObjectAdapter::setObjectCRC(unsigned int crc) {
	return ((SceneObjectImplementation*) impl)->setObjectCRC(crc);
}

void SceneObjectAdapter::setMovementCounter(unsigned int cntr) {
	return ((SceneObjectImplementation*) impl)->setMovementCounter(cntr);
}

void SceneObjectAdapter::setZoneIndex(int id) {
	return ((SceneObjectImplementation*) impl)->setZoneIndex(id);
}

void SceneObjectAdapter::setParent(SceneObject* par, unsigned int linktype) {
	return ((SceneObjectImplementation*) impl)->setParent(par, linktype);
}

void SceneObjectAdapter::setZone(Zone* zne) {
	return ((SceneObjectImplementation*) impl)->setZone(zne);
}

void SceneObjectAdapter::clearUndeploymentEvent() {
	return ((SceneObjectImplementation*) impl)->clearUndeploymentEvent();
}

bool SceneObjectAdapter::isUndeploymentScheduled() {
	return ((SceneObjectImplementation*) impl)->isUndeploymentScheduled();
}

int SceneObjectAdapter::getObjectType() {
	return ((SceneObjectImplementation*) impl)->getObjectType();
}

unsigned long long SceneObjectAdapter::getObjectID() {
	return ((SceneObjectImplementation*) impl)->getObjectID();
}

unsigned int SceneObjectAdapter::getObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getObjectCRC();
}

unsigned int SceneObjectAdapter::getMovementCounter() {
	return ((SceneObjectImplementation*) impl)->getMovementCounter();
}

float SceneObjectAdapter::getPositionX() {
	return ((SceneObjectImplementation*) impl)->getPositionX();
}

float SceneObjectAdapter::getPositionZ() {
	return ((SceneObjectImplementation*) impl)->getPositionZ();
}

float SceneObjectAdapter::getPositionY() {
	return ((SceneObjectImplementation*) impl)->getPositionY();
}

int SceneObjectAdapter::getDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getDirectionAngle();
}

float SceneObjectAdapter::getDirectionX() {
	return ((SceneObjectImplementation*) impl)->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() {
	return ((SceneObjectImplementation*) impl)->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() {
	return ((SceneObjectImplementation*) impl)->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() {
	return ((SceneObjectImplementation*) impl)->getDirectionW();
}

string& SceneObjectAdapter::getLoggingName() {
	return ((SceneObjectImplementation*) impl)->getLoggingName();
}

bool SceneObjectAdapter::isPlayer() {
	return ((SceneObjectImplementation*) impl)->isPlayer();
}

bool SceneObjectAdapter::isNonPlayerCreature() {
	return ((SceneObjectImplementation*) impl)->isNonPlayerCreature();
}

bool SceneObjectAdapter::isBuilding() {
	return ((SceneObjectImplementation*) impl)->isBuilding();
}

bool SceneObjectAdapter::isCell() {
	return ((SceneObjectImplementation*) impl)->isCell();
}

bool SceneObjectAdapter::isTangible() {
	return ((SceneObjectImplementation*) impl)->isTangible();
}

bool SceneObjectAdapter::isIntangible() {
	return ((SceneObjectImplementation*) impl)->isIntangible();
}

bool SceneObjectAdapter::isStatic() {
	return ((SceneObjectImplementation*) impl)->isStatic();
}

bool SceneObjectAdapter::isShip() {
	return ((SceneObjectImplementation*) impl)->isShip();
}

Zone* SceneObjectAdapter::getZone() {
	return ((SceneObjectImplementation*) impl)->getZone();
}

int SceneObjectAdapter::getZoneID() {
	return ((SceneObjectImplementation*) impl)->getZoneID();
}

SceneObject* SceneObjectAdapter::getParent() {
	return ((SceneObjectImplementation*) impl)->getParent();
}

unsigned long long SceneObjectAdapter::getParentID() {
	return ((SceneObjectImplementation*) impl)->getParentID();
}

bool SceneObjectAdapter::isMoving() {
	return ((SceneObjectImplementation*) impl)->isMoving();
}

void SceneObjectAdapter::switchMovingState() {
	return ((SceneObjectImplementation*) impl)->switchMovingState();
}

bool SceneObjectAdapter::doKeepObject() {
	return ((SceneObjectImplementation*) impl)->doKeepObject();
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject();
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj);

	DistributedObjectStub* stub = new SceneObject(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	SceneObjectServant
 */

SceneObjectServant::SceneObjectServant() : ManagedObjectImplementation() {
	_classHelper = SceneObjectHelper::instance();
}

SceneObjectServant::~SceneObjectServant() {
}

void SceneObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	ManagedObjectServant::_setStub(stub);
}

DistributedObjectStub* SceneObjectServant::_getStub() {
	return _this;
}

