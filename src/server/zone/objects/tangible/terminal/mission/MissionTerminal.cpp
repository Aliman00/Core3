/*
 *	server/zone/objects/tangible/terminal/mission/MissionTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionTerminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	MissionTerminalStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_ISMISSIONTERMINAL__,RPC_ISARTISANTERMINAL__,RPC_ISGENERALTERMINAL__,RPC_ISBOUNTYTERMINAL__,RPC_ISENTERTAINERTERMINAL__,RPC_ISIMPERIALTERMINAL__,RPC_ISNEWBIETERMINAL__,RPC_ISREBELTERMINAL__,RPC_ISSCOUTTERMINAL__,RPC_ISSTATUETERMINAL__,RPC_ISSLICER__PLAYERCREATURE_,RPC_ADDSLICER__PLAYERCREATURE_,RPC_REMOVESLICER__PLAYERCREATURE_};

MissionTerminal::MissionTerminal() : Terminal(DummyConstructorParameter::instance()) {
	MissionTerminalImplementation* _implementation = new MissionTerminalImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

MissionTerminal::MissionTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

MissionTerminal::~MissionTerminal() {
}


void MissionTerminal::loadTemplateData(SharedObjectTemplate* templateData) {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void MissionTerminal::initializeTransientMembers() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int MissionTerminal::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

bool MissionTerminal::isMissionTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMissionTerminal();
}

bool MissionTerminal::isArtisanTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISARTISANTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isArtisanTerminal();
}

bool MissionTerminal::isGeneralTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGENERALTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGeneralTerminal();
}

bool MissionTerminal::isBountyTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBOUNTYTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBountyTerminal();
}

bool MissionTerminal::isEntertainerTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISENTERTAINERTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isEntertainerTerminal();
}

bool MissionTerminal::isImperialTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISIMPERIALTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isImperialTerminal();
}

bool MissionTerminal::isNewbieTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISNEWBIETERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isNewbieTerminal();
}

bool MissionTerminal::isRebelTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREBELTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRebelTerminal();
}

bool MissionTerminal::isScoutTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSCOUTTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isScoutTerminal();
}

bool MissionTerminal::isStatueTerminal() {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTATUETERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStatueTerminal();
}

bool MissionTerminal::isSlicer(PlayerCreature* slicer) {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICER__PLAYERCREATURE_);
		method.addObjectParameter(slicer);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSlicer(slicer);
}

void MissionTerminal::addSlicer(PlayerCreature* slicer) {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSLICER__PLAYERCREATURE_);
		method.addObjectParameter(slicer);

		method.executeWithVoidReturn();
	} else
		_implementation->addSlicer(slicer);
}

void MissionTerminal::removeSlicer(PlayerCreature* slicer) {
	MissionTerminalImplementation* _implementation = (MissionTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESLICER__PLAYERCREATURE_);
		method.addObjectParameter(slicer);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSlicer(slicer);
}

DistributedObjectServant* MissionTerminal::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void MissionTerminal::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<MissionTerminalImplementation*>(servant));
}

/*
 *	MissionTerminalImplementation
 */

MissionTerminalImplementation::MissionTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


MissionTerminalImplementation::~MissionTerminalImplementation() {
}


void MissionTerminalImplementation::finalize() {
}

void MissionTerminalImplementation::_initializeImplementation() {
	_setClassHelper(MissionTerminalHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void MissionTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionTerminal*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* MissionTerminalImplementation::_getStub() {
	return _this;
}

MissionTerminalImplementation::operator const MissionTerminal*() {
	return _this;
}

Object* MissionTerminalImplementation::clone() {
	return dynamic_cast<Object*>(new MissionTerminalImplementation(*this));
}


void MissionTerminalImplementation::lock(bool doLock) {
}

void MissionTerminalImplementation::lock(ManagedObject* obj) {
}

void MissionTerminalImplementation::rlock(bool doLock) {
}

void MissionTerminalImplementation::wlock(bool doLock) {
}

void MissionTerminalImplementation::wlock(ManagedObject* obj) {
}

void MissionTerminalImplementation::unlock(bool doLock) {
}

void MissionTerminalImplementation::runlock(bool doLock) {
}

void MissionTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("MissionTerminal");

}

void MissionTerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(MissionTerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionTerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "terminalType") {
		TypeInfo<String >::parseFromBinaryStream(&terminalType, stream);
		return true;
	}


	return false;
}

void MissionTerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionTerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionTerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "terminalType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&terminalType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + TerminalImplementation::writeObjectMembers(stream);
}

MissionTerminalImplementation::MissionTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		Logger.setLoggingName("MissionTerminal");
	Logger::setLoggingName("MissionTerminal");
}

void MissionTerminalImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		super.loadTemplateData(templateData);
	TerminalImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		MissionTerminalTemplate 
	if (!templateData->isMissionTerminalTemplate())	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  			return;
	return;
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		MissionTerminalTemplate templ = (MissionTerminalTemplate) templateData;
	MissionTerminalTemplate* templ = (MissionTerminalTemplate*) templateData;
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		terminalType = templ.getMissionTerminalType();
	terminalType = templ->getMissionTerminalType();
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		boolean sliceTempFix = true;
	bool sliceTempFix = true;
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		setSliceable(sliceTempFix);
	setSliceable(sliceTempFix);
}

void MissionTerminalImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		Logger.setLoggingName("MissionTerminal");
	Logger::setLoggingName("MissionTerminal");
}

bool MissionTerminalImplementation::isMissionTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return true;
	return true;
}

bool MissionTerminalImplementation::isArtisanTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "artisan";
	return terminalType == "artisan";
}

bool MissionTerminalImplementation::isGeneralTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "general";
	return terminalType == "general";
}

bool MissionTerminalImplementation::isBountyTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "bounty";
	return terminalType == "bounty";
}

bool MissionTerminalImplementation::isEntertainerTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "entertainer";
	return terminalType == "entertainer";
}

bool MissionTerminalImplementation::isImperialTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "imperial";
	return terminalType == "imperial";
}

bool MissionTerminalImplementation::isNewbieTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "newbie";
	return terminalType == "newbie";
}

bool MissionTerminalImplementation::isRebelTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "rebel";
	return terminalType == "rebel";
}

bool MissionTerminalImplementation::isScoutTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "scout";
	return terminalType == "scout";
}

bool MissionTerminalImplementation::isStatueTerminal() {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return terminalType == "statue";
	return terminalType == "statue";
}

bool MissionTerminalImplementation::isSlicer(PlayerCreature* slicer) {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		for 
	if (slicer == NULL)	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  			return 0;
	return 0;
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		}
	for (	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		for (int i = 0;
	int i = 0;
	(&slicers)->size();
 ++i) {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  			PlayerCreature player = slicers.get(i);
	PlayerCreature* player = (&slicers)->get(i);
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		}
	if (player == slicer)	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  				return true;
	return true;
}
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		return 0;
	return 0;
}

void MissionTerminalImplementation::addSlicer(PlayerCreature* slicer) {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		slicers.add(slicer);
	(&slicers)->add(slicer);
}

void MissionTerminalImplementation::removeSlicer(PlayerCreature* slicer) {
	// server/zone/objects/tangible/terminal/mission/MissionTerminal.idl():  		slicers.removeElement(slicer);
	(&slicers)->removeElement(slicer);
}

/*
 *	MissionTerminalAdapter
 */

MissionTerminalAdapter::MissionTerminalAdapter(MissionTerminalImplementation* obj) : TerminalAdapter(obj) {
}

Packet* MissionTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_ISMISSIONTERMINAL__:
		resp->insertBoolean(isMissionTerminal());
		break;
	case RPC_ISARTISANTERMINAL__:
		resp->insertBoolean(isArtisanTerminal());
		break;
	case RPC_ISGENERALTERMINAL__:
		resp->insertBoolean(isGeneralTerminal());
		break;
	case RPC_ISBOUNTYTERMINAL__:
		resp->insertBoolean(isBountyTerminal());
		break;
	case RPC_ISENTERTAINERTERMINAL__:
		resp->insertBoolean(isEntertainerTerminal());
		break;
	case RPC_ISIMPERIALTERMINAL__:
		resp->insertBoolean(isImperialTerminal());
		break;
	case RPC_ISNEWBIETERMINAL__:
		resp->insertBoolean(isNewbieTerminal());
		break;
	case RPC_ISREBELTERMINAL__:
		resp->insertBoolean(isRebelTerminal());
		break;
	case RPC_ISSCOUTTERMINAL__:
		resp->insertBoolean(isScoutTerminal());
		break;
	case RPC_ISSTATUETERMINAL__:
		resp->insertBoolean(isStatueTerminal());
		break;
	case RPC_ISSLICER__PLAYERCREATURE_:
		resp->insertBoolean(isSlicer((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_ADDSLICER__PLAYERCREATURE_:
		addSlicer((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_REMOVESLICER__PLAYERCREATURE_:
		removeSlicer((PlayerCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionTerminalAdapter::initializeTransientMembers() {
	((MissionTerminalImplementation*) impl)->initializeTransientMembers();
}

int MissionTerminalAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((MissionTerminalImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

bool MissionTerminalAdapter::isMissionTerminal() {
	return ((MissionTerminalImplementation*) impl)->isMissionTerminal();
}

bool MissionTerminalAdapter::isArtisanTerminal() {
	return ((MissionTerminalImplementation*) impl)->isArtisanTerminal();
}

bool MissionTerminalAdapter::isGeneralTerminal() {
	return ((MissionTerminalImplementation*) impl)->isGeneralTerminal();
}

bool MissionTerminalAdapter::isBountyTerminal() {
	return ((MissionTerminalImplementation*) impl)->isBountyTerminal();
}

bool MissionTerminalAdapter::isEntertainerTerminal() {
	return ((MissionTerminalImplementation*) impl)->isEntertainerTerminal();
}

bool MissionTerminalAdapter::isImperialTerminal() {
	return ((MissionTerminalImplementation*) impl)->isImperialTerminal();
}

bool MissionTerminalAdapter::isNewbieTerminal() {
	return ((MissionTerminalImplementation*) impl)->isNewbieTerminal();
}

bool MissionTerminalAdapter::isRebelTerminal() {
	return ((MissionTerminalImplementation*) impl)->isRebelTerminal();
}

bool MissionTerminalAdapter::isScoutTerminal() {
	return ((MissionTerminalImplementation*) impl)->isScoutTerminal();
}

bool MissionTerminalAdapter::isStatueTerminal() {
	return ((MissionTerminalImplementation*) impl)->isStatueTerminal();
}

bool MissionTerminalAdapter::isSlicer(PlayerCreature* slicer) {
	return ((MissionTerminalImplementation*) impl)->isSlicer(slicer);
}

void MissionTerminalAdapter::addSlicer(PlayerCreature* slicer) {
	((MissionTerminalImplementation*) impl)->addSlicer(slicer);
}

void MissionTerminalAdapter::removeSlicer(PlayerCreature* slicer) {
	((MissionTerminalImplementation*) impl)->removeSlicer(slicer);
}

/*
 *	MissionTerminalHelper
 */

MissionTerminalHelper* MissionTerminalHelper::staticInitializer = MissionTerminalHelper::instance();

MissionTerminalHelper::MissionTerminalHelper() {
	className = "MissionTerminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionTerminalHelper::finalizeHelper() {
	MissionTerminalHelper::finalize();
}

DistributedObject* MissionTerminalHelper::instantiateObject() {
	return new MissionTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionTerminalHelper::instantiateServant() {
	return new MissionTerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionTerminalAdapter((MissionTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

