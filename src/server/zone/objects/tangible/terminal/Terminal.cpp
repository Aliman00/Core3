/*
 *	server/zone/objects/tangible/terminal/Terminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "Terminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "engine/util/Observer.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	TerminalStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_ISTERMINAL__,RPC_ISGUILDTERMINAL__,RPC_SETCONTROLLEDOBJECT__SCENEOBJECT_,RPC_GETCONTROLLEDOBJECT__,RPC_ISELEVATORTERMINAL__,RPC_ISVENDORTERMINAL__,RPC_ISBAZAARTERMINAL__};

Terminal::Terminal() : TangibleObject(DummyConstructorParameter::instance()) {
	TerminalImplementation* _implementation = new TerminalImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

Terminal::Terminal(DummyConstructorParameter* param) : TangibleObject(param) {
}

Terminal::~Terminal() {
}


void Terminal::initializeTransientMembers() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

bool Terminal::isTerminal() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTerminal();
}

bool Terminal::isGuildTerminal() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGuildTerminal();
}

void Terminal::setControlledObject(SceneObject* obj) {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTROLLEDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setControlledObject(obj);
}

SceneObject* Terminal::getControlledObject() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTROLLEDOBJECT__);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getControlledObject();
}

bool Terminal::isElevatorTerminal() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISELEVATORTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isElevatorTerminal();
}

bool Terminal::isVendorTerminal() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVENDORTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVendorTerminal();
}

bool Terminal::isBazaarTerminal() {
	TerminalImplementation* _implementation = (TerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBAZAARTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBazaarTerminal();
}

DistributedObjectServant* Terminal::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void Terminal::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<TerminalImplementation*>(servant));
}

/*
 *	TerminalImplementation
 */

TerminalImplementation::TerminalImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


TerminalImplementation::~TerminalImplementation() {
}


void TerminalImplementation::finalize() {
}

void TerminalImplementation::_initializeImplementation() {
	_setClassHelper(TerminalHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Terminal*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TerminalImplementation::_getStub() {
	return _this;
}

TerminalImplementation::operator const Terminal*() {
	return _this;
}

Object* TerminalImplementation::clone() {
	return dynamic_cast<Object*>(new TerminalImplementation(*this));
}


void TerminalImplementation::lock(bool doLock) {
}

void TerminalImplementation::lock(ManagedObject* obj) {
}

void TerminalImplementation::rlock(bool doLock) {
}

void TerminalImplementation::wlock(bool doLock) {
}

void TerminalImplementation::wlock(ManagedObject* obj) {
}

void TerminalImplementation::unlock(bool doLock) {
}

void TerminalImplementation::runlock(bool doLock) {
}

void TerminalImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Terminal");

}

void TerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "controlledObject") {
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&controlledObject, stream);
		return true;
	}


	return false;
}

void TerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "controlledObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&controlledObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + TangibleObjectImplementation::writeObjectMembers(stream);
}

TerminalImplementation::TerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/Terminal.idl():  		Logger.setLoggingName("Terminal");
	Logger::setLoggingName("Terminal");
	// server/zone/objects/tangible/terminal/Terminal.idl():  		controlledObject = null;
	controlledObject = NULL;
}

bool TerminalImplementation::isTerminal() {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		return true;
	return true;
}

bool TerminalImplementation::isGuildTerminal() {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		return false;
	return false;
}

void TerminalImplementation::setControlledObject(SceneObject* obj) {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		controlledObject = obj;
	controlledObject = obj;
}

SceneObject* TerminalImplementation::getControlledObject() {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		return controlledObject;
	return controlledObject;
}

bool TerminalImplementation::isElevatorTerminal() {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		return false;
	return false;
}

bool TerminalImplementation::isVendorTerminal() {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		return false;
	return false;
}

bool TerminalImplementation::isBazaarTerminal() {
	// server/zone/objects/tangible/terminal/Terminal.idl():  		return false;
	return false;
}

/*
 *	TerminalAdapter
 */

TerminalAdapter::TerminalAdapter(TerminalImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* TerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_ISTERMINAL__:
		resp->insertBoolean(isTerminal());
		break;
	case RPC_ISGUILDTERMINAL__:
		resp->insertBoolean(isGuildTerminal());
		break;
	case RPC_SETCONTROLLEDOBJECT__SCENEOBJECT_:
		setControlledObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_GETCONTROLLEDOBJECT__:
		resp->insertLong(getControlledObject()->_getObjectID());
		break;
	case RPC_ISELEVATORTERMINAL__:
		resp->insertBoolean(isElevatorTerminal());
		break;
	case RPC_ISVENDORTERMINAL__:
		resp->insertBoolean(isVendorTerminal());
		break;
	case RPC_ISBAZAARTERMINAL__:
		resp->insertBoolean(isBazaarTerminal());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TerminalAdapter::initializeTransientMembers() {
	((TerminalImplementation*) impl)->initializeTransientMembers();
}

bool TerminalAdapter::isTerminal() {
	return ((TerminalImplementation*) impl)->isTerminal();
}

bool TerminalAdapter::isGuildTerminal() {
	return ((TerminalImplementation*) impl)->isGuildTerminal();
}

void TerminalAdapter::setControlledObject(SceneObject* obj) {
	((TerminalImplementation*) impl)->setControlledObject(obj);
}

SceneObject* TerminalAdapter::getControlledObject() {
	return ((TerminalImplementation*) impl)->getControlledObject();
}

bool TerminalAdapter::isElevatorTerminal() {
	return ((TerminalImplementation*) impl)->isElevatorTerminal();
}

bool TerminalAdapter::isVendorTerminal() {
	return ((TerminalImplementation*) impl)->isVendorTerminal();
}

bool TerminalAdapter::isBazaarTerminal() {
	return ((TerminalImplementation*) impl)->isBazaarTerminal();
}

/*
 *	TerminalHelper
 */

TerminalHelper* TerminalHelper::staticInitializer = TerminalHelper::instance();

TerminalHelper::TerminalHelper() {
	className = "Terminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void TerminalHelper::finalizeHelper() {
	TerminalHelper::finalize();
}

DistributedObject* TerminalHelper::instantiateObject() {
	return new Terminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* TerminalHelper::instantiateServant() {
	return new TerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TerminalAdapter((TerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

