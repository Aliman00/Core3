/*
 *	server/zone/objects/tangible/holocron/Holocron.cpp generated by engine3 IDL compiler 0.55
 */

#include "../TangibleObject.h"

#include "../../player/Player.h"

#include "Holocron.h"

#include "HolocronImplementation.h"

/*
 *	HolocronStub
 */

Holocron::Holocron() : TangibleObject(NULL) {
}

Holocron::Holocron(DistributedObjectServant* obj) : TangibleObject(obj) {
}

Holocron::Holocron(Holocron& ref) : TangibleObject(ref) {
}

Holocron::~Holocron() {
}

Holocron* Holocron::clone() {
	return new Holocron(*this);
}


int Holocron::useObject(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((HolocronImplementation*) _impl)->useObject(player);
}

/*
 *	HolocronAdapter
 */

HolocronAdapter::HolocronAdapter(HolocronImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* HolocronAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int HolocronAdapter::useObject(Player* player) {
	return ((HolocronImplementation*) impl)->useObject(player);
}

/*
 *	HolocronHelper
 */

HolocronHelper::HolocronHelper() {
	className = "Holocron";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HolocronHelper::finalizeHelper() {
	HolocronHelper::finalize();
}

DistributedObject* HolocronHelper::instantiateObject() {
	return new Holocron();
}

DistributedObjectAdapter* HolocronHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new HolocronAdapter((HolocronImplementation*) obj);

	DistributedObjectStub* stub = new Holocron(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	HolocronServant
 */

HolocronServant::HolocronServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = HolocronHelper::instance();
}

HolocronServant::~HolocronServant() {
}

void HolocronServant::_setStub(DistributedObjectStub* stub) {
	_this = (Holocron*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* HolocronServant::_getStub() {
	return _this;
}

