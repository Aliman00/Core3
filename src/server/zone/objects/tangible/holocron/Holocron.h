/*
 *	server/zone/objects/tangible/holocron/Holocron.h generated by engine3 IDL compiler 0.55
 */

#ifndef HOLOCRON_H_
#define HOLOCRON_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

#include "../TangibleObject.h"

class Holocron : public TangibleObject {
protected:
	Holocron();
	Holocron(DistributedObjectServant* obj);
	Holocron(Holocron& ref);

	virtual ~Holocron();

public:
	Holocron* clone();

	int useObject(Player* player);

protected:
	friend class HolocronHelper;
};

class HolocronImplementation;

class HolocronAdapter : public TangibleObjectAdapter {
public:
	HolocronAdapter(HolocronImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

};

class HolocronHelper : public DistributedObjectClassHelper, public Singleton<HolocronHelper> {
	static HolocronHelper* staticInitializer;

public:
	HolocronHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<HolocronHelper>;
};

#include "../TangibleObjectImplementation.h"

class HolocronServant : public TangibleObjectImplementation {
public:
	Holocron* _this;

public:
	HolocronServant(unsigned long long oid, int tp);
	virtual ~HolocronServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*HOLOCRON_H_*/
