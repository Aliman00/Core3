/*
 *	server/zone/objects/tangible/loot/LootkitObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "LootkitObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/DatagramServiceThread.h"

#include "engine/service/Message.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/ChatManager.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Exception.h"

#include "system/lang/Time.h"

#include "system/net/Packet.h"

#include "system/net/Socket.h"

#include "system/net/SocketAddress.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	LootkitObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_,RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_,RPC_GETPLAYER__,RPC_FILLATTRIBUTELIST__ATTRIBUTELISTMESSAGE_PLAYERCREATURE_};

LootkitObject::LootkitObject() : TangibleObject(DummyConstructorParameter::instance()) {
	LootkitObjectImplementation* _implementation = new LootkitObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

LootkitObject::LootkitObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

LootkitObject::~LootkitObject() {
}


void LootkitObject::initializeTransientMembers() {
	LootkitObjectImplementation* _implementation = (LootkitObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int LootkitObject::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	LootkitObjectImplementation* _implementation = (LootkitObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->canAddObject(object, containmentType, errorDescription);
}

int LootkitObject::notifyObjectInserted(SceneObject* object) {
	LootkitObjectImplementation* _implementation = (LootkitObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectInserted(object);
}

PlayerCreature* LootkitObject::getPlayer() {
	LootkitObjectImplementation* _implementation = (LootkitObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return _implementation->getPlayer();
}

void LootkitObject::loadTemplateData(SharedObjectTemplate* templateData) {
	LootkitObjectImplementation* _implementation = (LootkitObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void LootkitObject::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	LootkitObjectImplementation* _implementation = (LootkitObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FILLATTRIBUTELIST__ATTRIBUTELISTMESSAGE_PLAYERCREATURE_);
		method.addObjectParameter(msg);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->fillAttributeList(msg, object);
}

DistributedObjectServant* LootkitObject::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void LootkitObject::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<LootkitObjectImplementation*>(servant));
}

/*
 *	LootkitObjectImplementation
 */

LootkitObjectImplementation::LootkitObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


LootkitObjectImplementation::~LootkitObjectImplementation() {
}


void LootkitObjectImplementation::finalize() {
}

void LootkitObjectImplementation::_initializeImplementation() {
	_setClassHelper(LootkitObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void LootkitObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LootkitObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* LootkitObjectImplementation::_getStub() {
	return _this;
}

LootkitObjectImplementation::operator const LootkitObject*() {
	return _this;
}

Object* LootkitObjectImplementation::clone() {
	return dynamic_cast<Object*>(new LootkitObjectImplementation(*this));
}


void LootkitObjectImplementation::lock(bool doLock) {
}

void LootkitObjectImplementation::lock(ManagedObject* obj) {
}

void LootkitObjectImplementation::rlock(bool doLock) {
}

void LootkitObjectImplementation::wlock(bool doLock) {
}

void LootkitObjectImplementation::wlock(ManagedObject* obj) {
}

void LootkitObjectImplementation::unlock(bool doLock) {
}

void LootkitObjectImplementation::runlock(bool doLock) {
}

void LootkitObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("LootkitObject");

}

void LootkitObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(LootkitObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LootkitObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "components") {
		TypeInfo<VectorMap<unsigned int, bool> >::parseFromBinaryStream(&components, stream);
		return true;
	}

	if (_name == "attributes") {
		TypeInfo<VectorMap<unsigned int, String> >::parseFromBinaryStream(&attributes, stream);
		return true;
	}

	if (_name == "comps") {
		TypeInfo<Vector<unsigned int> >::parseFromBinaryStream(&comps, stream);
		return true;
	}

	if (_name == "reward") {
		TypeInfo<Vector<unsigned int> >::parseFromBinaryStream(&reward, stream);
		return true;
	}

	if (_name == "deleteComponents") {
		TypeInfo<bool >::parseFromBinaryStream(&deleteComponents, stream);
		return true;
	}


	return false;
}

void LootkitObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootkitObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootkitObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "components";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned int, bool> >::toBinaryStream(&components, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "attributes";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned int, String> >::toBinaryStream(&attributes, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "comps";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<unsigned int> >::toBinaryStream(&comps, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "reward";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<unsigned int> >::toBinaryStream(&reward, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "deleteComponents";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&deleteComponents, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 5 + TangibleObjectImplementation::writeObjectMembers(stream);
}

LootkitObjectImplementation::LootkitObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/loot/LootkitObject.idl():  		Logger.setLoggingName("LootKitObject");
	Logger::setLoggingName("LootKitObject");
}

void LootkitObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/loot/LootkitObject.idl():  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/loot/LootkitObject.idl():  		Logger.setLoggingName("LootKitObject");
	Logger::setLoggingName("LootKitObject");
}

/*
 *	LootkitObjectAdapter
 */

LootkitObjectAdapter::LootkitObjectAdapter(LootkitObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* LootkitObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param2_canAddObject__SceneObject_int_String_)));
		break;
	case RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_:
		resp->insertSignedInt(notifyObjectInserted((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_GETPLAYER__:
		resp->insertLong(getPlayer()->_getObjectID());
		break;
	case RPC_FILLATTRIBUTELIST__ATTRIBUTELISTMESSAGE_PLAYERCREATURE_:
		fillAttributeList((AttributeListMessage*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void LootkitObjectAdapter::initializeTransientMembers() {
	((LootkitObjectImplementation*) impl)->initializeTransientMembers();
}

int LootkitObjectAdapter::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	return ((LootkitObjectImplementation*) impl)->canAddObject(object, containmentType, errorDescription);
}

int LootkitObjectAdapter::notifyObjectInserted(SceneObject* object) {
	return ((LootkitObjectImplementation*) impl)->notifyObjectInserted(object);
}

PlayerCreature* LootkitObjectAdapter::getPlayer() {
	return ((LootkitObjectImplementation*) impl)->getPlayer();
}

void LootkitObjectAdapter::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	((LootkitObjectImplementation*) impl)->fillAttributeList(msg, object);
}

/*
 *	LootkitObjectHelper
 */

LootkitObjectHelper* LootkitObjectHelper::staticInitializer = LootkitObjectHelper::instance();

LootkitObjectHelper::LootkitObjectHelper() {
	className = "LootkitObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void LootkitObjectHelper::finalizeHelper() {
	LootkitObjectHelper::finalize();
}

DistributedObject* LootkitObjectHelper::instantiateObject() {
	return new LootkitObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootkitObjectHelper::instantiateServant() {
	return new LootkitObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LootkitObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootkitObjectAdapter((LootkitObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

