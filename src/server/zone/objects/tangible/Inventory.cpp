/*
 *	server/zone/objects/tangible/Inventory.cpp generated by engine3 IDL compiler 0.55
 */

#include "Container.h"

#include "../creature/CreatureObject.h"

#include "Inventory.h"

#include "InventoryImplementation.h"

/*
 *	InventoryStub
 */

Inventory::Inventory() : Container(NULL) {
}

Inventory::Inventory(DistributedObjectServant* obj) : Container(obj) {
}

Inventory::Inventory(Inventory& ref) : Container(ref) {
}

Inventory::~Inventory() {
}

Inventory* Inventory::clone() {
	return new Inventory(*this);
}


/*
 *	InventoryAdapter
 */

InventoryAdapter::InventoryAdapter(InventoryImplementation* obj) : ContainerAdapter(obj) {
}

Packet* InventoryAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	InventoryHelper
 */

InventoryHelper::InventoryHelper() {
	className = "Inventory";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InventoryHelper::finalizeHelper() {
	InventoryHelper::finalize();
}

DistributedObject* InventoryHelper::instantiateObject() {
	return new Inventory();
}

DistributedObjectAdapter* InventoryHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new InventoryAdapter((InventoryImplementation*) obj);

	DistributedObjectStub* stub = new Inventory(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	InventoryServant
 */

InventoryServant::InventoryServant(unsigned long long oid) : ContainerImplementation(oid) {
	_classHelper = InventoryHelper::instance();
}

InventoryServant::~InventoryServant() {
}

void InventoryServant::_setStub(DistributedObjectStub* stub) {
	_this = (Inventory*) stub;
	ContainerServant::_setStub(stub);
}

DistributedObjectStub* InventoryServant::_getStub() {
	return _this;
}

