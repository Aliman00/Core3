/*
 *	server/zone/objects/tangible/instrument/InstrumentObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "InstrumentObject.h"

#include "InstrumentObjectImplementation.h"

#include "../TangibleObject.h"

/*
 *	InstrumentObjectStub
 */

InstrumentObject::InstrumentObject(unsigned long long objectid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstrumentObjectImplementation(objectid);
	_impl->_setStub(this);
}

InstrumentObject::InstrumentObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstrumentObject::~InstrumentObject() {
}

unsigned int InstrumentObject::getInstrumentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstrumentObjectImplementation*) _impl)->getInstrumentID();
}

/*
 *	InstrumentObjectAdapter
 */

InstrumentObjectAdapter::InstrumentObjectAdapter(InstrumentObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstrumentObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertInt(getInstrumentID());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned int InstrumentObjectAdapter::getInstrumentID() {
	return ((InstrumentObjectImplementation*) impl)->getInstrumentID();
}

/*
 *	InstrumentObjectHelper
 */

InstrumentObjectHelper* InstrumentObjectHelper::staticInitializer = InstrumentObjectHelper::instance();

InstrumentObjectHelper::InstrumentObjectHelper() {
	className = "InstrumentObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstrumentObjectHelper::finalizeHelper() {
	InstrumentObjectHelper::finalize();
}

DistributedObject* InstrumentObjectHelper::instantiateObject() {
	return new InstrumentObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstrumentObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstrumentObjectAdapter((InstrumentObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	InstrumentObjectServant
 */

InstrumentObjectServant::InstrumentObjectServant(unsigned long long objectid, int type) : TangibleObjectImplementation(objectid, type) {
	_classHelper = InstrumentObjectHelper::instance();
}

InstrumentObjectServant::~InstrumentObjectServant() {
}

void InstrumentObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (InstrumentObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* InstrumentObjectServant::_getStub() {
	return _this;
}

