/*
 *	server/zone/objects/tangible/instrument/Instrument.h generated by engine3 IDL compiler 0.55
 */

#ifndef INSTRUMENT_H_
#define INSTRUMENT_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

#include "engine/service/Message.h"

#include "../TangibleObject.h"

class Instrument : public TangibleObject {
protected:
	Instrument();
	Instrument(DistributedObjectServant* obj);
	Instrument(Instrument& ref);

	virtual ~Instrument();

public:
	Instrument* clone();

	int useObject(Player* player);

	int getInstrumentType();

protected:
	friend class InstrumentHelper;
};

class InstrumentImplementation;

class InstrumentAdapter : public TangibleObjectAdapter {
public:
	InstrumentAdapter(InstrumentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

	int getInstrumentType();

};

class InstrumentHelper : public DistributedObjectClassHelper, public Singleton<InstrumentHelper> {
	static InstrumentHelper* staticInitializer;

public:
	InstrumentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<InstrumentHelper>;
};

#include "../TangibleObjectImplementation.h"

class InstrumentServant : public TangibleObjectImplementation {
public:
	Instrument* _this;

public:
	InstrumentServant(unsigned long long oid, int tp);
	virtual ~InstrumentServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*INSTRUMENT_H_*/
