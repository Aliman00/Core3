/*
 *	server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "PharmaceuticalObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/ZoneServer.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/chat/StringIdChatParameter.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "engine/core/Task.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/templates/tangible/SharedWeaponObjectTemplate.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/service/Message.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/util/Observer.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/ZoneClientSession.h"

#include "system/lang/Time.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

/*
 *	PharmaceuticalObjectStub
 */

enum {RPC_GETMEDICINEUSEREQUIRED__ = 6,RPC_GETRANGE__CREATUREOBJECT_,RPC_ISAREA__,RPC_GETAREA__,RPC_ISPHARMACEUTICALOBJECT__,RPC_ISSTIMPACK__,RPC_ISRANGEDSTIMPACK__,RPC_ISENHANCEPACK__,RPC_ISWOUNDPACK__,RPC_ISCUREPACK__,RPC_ISSTATEPACK__,RPC_ISREVIVEPACK__};

PharmaceuticalObject::PharmaceuticalObject() : TangibleObject(DummyConstructorParameter::instance()) {
	PharmaceuticalObjectImplementation* _implementation = new PharmaceuticalObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

PharmaceuticalObject::PharmaceuticalObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

PharmaceuticalObject::~PharmaceuticalObject() {
}


int PharmaceuticalObject::getMedicineUseRequired() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMEDICINEUSEREQUIRED__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMedicineUseRequired();
}

float PharmaceuticalObject::getRange(CreatureObject* creature) {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANGE__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRange(creature);
}

bool PharmaceuticalObject::isArea() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isArea();
}

float PharmaceuticalObject::getArea() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAREA__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getArea();
}

bool PharmaceuticalObject::isPharmaceuticalObject() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPHARMACEUTICALOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPharmaceuticalObject();
}

bool PharmaceuticalObject::isStimPack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTIMPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStimPack();
}

bool PharmaceuticalObject::isRangedStimPack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRANGEDSTIMPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRangedStimPack();
}

bool PharmaceuticalObject::isEnhancePack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISENHANCEPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isEnhancePack();
}

bool PharmaceuticalObject::isWoundPack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWOUNDPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isWoundPack();
}

bool PharmaceuticalObject::isCurePack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCUREPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCurePack();
}

bool PharmaceuticalObject::isStatePack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTATEPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStatePack();
}

bool PharmaceuticalObject::isRevivePack() {
	PharmaceuticalObjectImplementation* _implementation = (PharmaceuticalObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREVIVEPACK__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRevivePack();
}

DistributedObjectServant* PharmaceuticalObject::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void PharmaceuticalObject::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<PharmaceuticalObjectImplementation*>(servant));
}

/*
 *	PharmaceuticalObjectImplementation
 */

PharmaceuticalObjectImplementation::PharmaceuticalObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


PharmaceuticalObjectImplementation::~PharmaceuticalObjectImplementation() {
}


void PharmaceuticalObjectImplementation::finalize() {
}

void PharmaceuticalObjectImplementation::_initializeImplementation() {
	_setClassHelper(PharmaceuticalObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void PharmaceuticalObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PharmaceuticalObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PharmaceuticalObjectImplementation::_getStub() {
	return _this;
}

PharmaceuticalObjectImplementation::operator const PharmaceuticalObject*() {
	return _this;
}

Object* PharmaceuticalObjectImplementation::clone() {
	return dynamic_cast<Object*>(new PharmaceuticalObjectImplementation(*this));
}


void PharmaceuticalObjectImplementation::lock(bool doLock) {
}

void PharmaceuticalObjectImplementation::lock(ManagedObject* obj) {
}

void PharmaceuticalObjectImplementation::rlock(bool doLock) {
}

void PharmaceuticalObjectImplementation::wlock(bool doLock) {
}

void PharmaceuticalObjectImplementation::wlock(ManagedObject* obj) {
}

void PharmaceuticalObjectImplementation::unlock(bool doLock) {
}

void PharmaceuticalObjectImplementation::runlock(bool doLock) {
}

void PharmaceuticalObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("PharmaceuticalObject");

}

void PharmaceuticalObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PharmaceuticalObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PharmaceuticalObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "medicineUseRequired") {
		TypeInfo<int >::parseFromBinaryStream(&medicineUseRequired, stream);
		return true;
	}


	return false;
}

void PharmaceuticalObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PharmaceuticalObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PharmaceuticalObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "medicineUseRequired";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&medicineUseRequired, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + TangibleObjectImplementation::writeObjectMembers(stream);
}

PharmaceuticalObjectImplementation::PharmaceuticalObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		setLoggingName("PharmaceuticalObject");
	setLoggingName("PharmaceuticalObject");
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		medicineUseRequired = 0;
	medicineUseRequired = 0;
}

int PharmaceuticalObjectImplementation::getMedicineUseRequired() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return medicineUseRequired;
	return medicineUseRequired;
}

float PharmaceuticalObjectImplementation::getRange(CreatureObject* creature) {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return 5;
	return 5;
}

bool PharmaceuticalObjectImplementation::isArea() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

float PharmaceuticalObjectImplementation::getArea() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return 0;
	return 0;
}

bool PharmaceuticalObjectImplementation::isPharmaceuticalObject() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return true;
	return true;
}

bool PharmaceuticalObjectImplementation::isStimPack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

bool PharmaceuticalObjectImplementation::isRangedStimPack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

bool PharmaceuticalObjectImplementation::isEnhancePack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

bool PharmaceuticalObjectImplementation::isWoundPack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

bool PharmaceuticalObjectImplementation::isCurePack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

bool PharmaceuticalObjectImplementation::isStatePack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

bool PharmaceuticalObjectImplementation::isRevivePack() {
	// server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.idl():  		return false;
	return false;
}

/*
 *	PharmaceuticalObjectAdapter
 */

PharmaceuticalObjectAdapter::PharmaceuticalObjectAdapter(PharmaceuticalObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* PharmaceuticalObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GETMEDICINEUSEREQUIRED__:
		resp->insertSignedInt(getMedicineUseRequired());
		break;
	case RPC_GETRANGE__CREATUREOBJECT_:
		resp->insertFloat(getRange((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_ISAREA__:
		resp->insertBoolean(isArea());
		break;
	case RPC_GETAREA__:
		resp->insertFloat(getArea());
		break;
	case RPC_ISPHARMACEUTICALOBJECT__:
		resp->insertBoolean(isPharmaceuticalObject());
		break;
	case RPC_ISSTIMPACK__:
		resp->insertBoolean(isStimPack());
		break;
	case RPC_ISRANGEDSTIMPACK__:
		resp->insertBoolean(isRangedStimPack());
		break;
	case RPC_ISENHANCEPACK__:
		resp->insertBoolean(isEnhancePack());
		break;
	case RPC_ISWOUNDPACK__:
		resp->insertBoolean(isWoundPack());
		break;
	case RPC_ISCUREPACK__:
		resp->insertBoolean(isCurePack());
		break;
	case RPC_ISSTATEPACK__:
		resp->insertBoolean(isStatePack());
		break;
	case RPC_ISREVIVEPACK__:
		resp->insertBoolean(isRevivePack());
		break;
	default:
		return NULL;
	}

	return resp;
}

int PharmaceuticalObjectAdapter::getMedicineUseRequired() {
	return ((PharmaceuticalObjectImplementation*) impl)->getMedicineUseRequired();
}

float PharmaceuticalObjectAdapter::getRange(CreatureObject* creature) {
	return ((PharmaceuticalObjectImplementation*) impl)->getRange(creature);
}

bool PharmaceuticalObjectAdapter::isArea() {
	return ((PharmaceuticalObjectImplementation*) impl)->isArea();
}

float PharmaceuticalObjectAdapter::getArea() {
	return ((PharmaceuticalObjectImplementation*) impl)->getArea();
}

bool PharmaceuticalObjectAdapter::isPharmaceuticalObject() {
	return ((PharmaceuticalObjectImplementation*) impl)->isPharmaceuticalObject();
}

bool PharmaceuticalObjectAdapter::isStimPack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isStimPack();
}

bool PharmaceuticalObjectAdapter::isRangedStimPack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isRangedStimPack();
}

bool PharmaceuticalObjectAdapter::isEnhancePack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isEnhancePack();
}

bool PharmaceuticalObjectAdapter::isWoundPack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isWoundPack();
}

bool PharmaceuticalObjectAdapter::isCurePack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isCurePack();
}

bool PharmaceuticalObjectAdapter::isStatePack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isStatePack();
}

bool PharmaceuticalObjectAdapter::isRevivePack() {
	return ((PharmaceuticalObjectImplementation*) impl)->isRevivePack();
}

/*
 *	PharmaceuticalObjectHelper
 */

PharmaceuticalObjectHelper* PharmaceuticalObjectHelper::staticInitializer = PharmaceuticalObjectHelper::instance();

PharmaceuticalObjectHelper::PharmaceuticalObjectHelper() {
	className = "PharmaceuticalObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void PharmaceuticalObjectHelper::finalizeHelper() {
	PharmaceuticalObjectHelper::finalize();
}

DistributedObject* PharmaceuticalObjectHelper::instantiateObject() {
	return new PharmaceuticalObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* PharmaceuticalObjectHelper::instantiateServant() {
	return new PharmaceuticalObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PharmaceuticalObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PharmaceuticalObjectAdapter((PharmaceuticalObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

