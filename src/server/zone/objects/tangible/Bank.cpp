/*
 *	server/zone/objects/tangible/Bank.cpp generated by engine3 IDL compiler 0.55
 */

#include "Container.h"

#include "../creature/CreatureObject.h"

#include "Bank.h"

#include "BankImplementation.h"

/*
 *	BankStub
 */

Bank::Bank() : Container(NULL) {
}

Bank::Bank(DistributedObjectServant* obj) : Container(obj) {
}

Bank::Bank(Bank& ref) : Container(ref) {
}

Bank::~Bank() {
}

Bank* Bank::clone() {
	return new Bank(*this);
}


/*
 *	BankAdapter
 */

BankAdapter::BankAdapter(BankImplementation* obj) : ContainerAdapter(obj) {
}

Packet* BankAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	BankHelper
 */

BankHelper* BankHelper::staticInitializer = BankHelper::instance();

BankHelper::BankHelper() {
	className = "Bank";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BankHelper::finalizeHelper() {
	BankHelper::finalize();
}

DistributedObject* BankHelper::instantiateObject() {
	return new Bank();
}

DistributedObjectAdapter* BankHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new BankAdapter((BankImplementation*) obj);

	DistributedObjectStub* stub = new Bank(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	BankServant
 */

BankServant::BankServant(unsigned long long oid) : ContainerImplementation(oid) {
	_classHelper = BankHelper::instance();
}

BankServant::~BankServant() {
}

void BankServant::_setStub(DistributedObjectStub* stub) {
	_this = (Bank*) stub;
	ContainerServant::_setStub(stub);
}

DistributedObjectStub* BankServant::_getStub() {
	return _this;
}

