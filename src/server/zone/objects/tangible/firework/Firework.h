/*
 *	server/zone/objects/tangible/firework/Firework.h generated by engine3 IDL compiler 0.55
 */

#ifndef FIREWORK_H_
#define FIREWORK_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

#include "../TangibleObject.h"

class Firework : public TangibleObject {
protected:
	Firework();
	Firework(DistributedObjectServant* obj);
	Firework(Firework& ref);

	virtual ~Firework();

public:
	Firework* clone();

	int useObject(Player* player);

protected:
	friend class FireworkHelper;
};

class FireworkImplementation;

class FireworkAdapter : public TangibleObjectAdapter {
public:
	FireworkAdapter(FireworkImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

};

class FireworkHelper : public DistributedObjectClassHelper, public Singleton<FireworkHelper> {
	static FireworkHelper* staticInitializer;

public:
	FireworkHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<FireworkHelper>;
};

#include "../TangibleObjectImplementation.h"

class FireworkServant : public TangibleObjectImplementation {
public:
	Firework* _this;

public:
	FireworkServant(unsigned long long oid, int tp);
	virtual ~FireworkServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*FIREWORK_H_*/
