/*
 *	server/zone/objects/tangible/firework/Firework.cpp generated by engine3 IDL compiler 0.55
 */

#include "../TangibleObject.h"

#include "../../player/Player.h"

#include "Firework.h"

#include "FireworkImplementation.h"

/*
 *	FireworkStub
 */

Firework::Firework() : TangibleObject(NULL) {
}

Firework::Firework(DistributedObjectServant* obj) : TangibleObject(obj) {
}

Firework::Firework(Firework& ref) : TangibleObject(ref) {
}

Firework::~Firework() {
}

Firework* Firework::clone() {
	return new Firework(*this);
}


int Firework::useObject(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((FireworkImplementation*) _impl)->useObject(player);
}

/*
 *	FireworkAdapter
 */

FireworkAdapter::FireworkAdapter(FireworkImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* FireworkAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int FireworkAdapter::useObject(Player* player) {
	return ((FireworkImplementation*) impl)->useObject(player);
}

/*
 *	FireworkHelper
 */

FireworkHelper* FireworkHelper::staticInitializer = FireworkHelper::instance();

FireworkHelper::FireworkHelper() {
	className = "Firework";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FireworkHelper::finalizeHelper() {
	FireworkHelper::finalize();
}

DistributedObject* FireworkHelper::instantiateObject() {
	return new Firework();
}

DistributedObjectAdapter* FireworkHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new FireworkAdapter((FireworkImplementation*) obj);

	DistributedObjectStub* stub = new Firework(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	FireworkServant
 */

FireworkServant::FireworkServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = FireworkHelper::instance();
}

FireworkServant::~FireworkServant() {
}

void FireworkServant::_setStub(DistributedObjectStub* stub) {
	_this = (Firework*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* FireworkServant::_getStub() {
	return _this;
}

