/*
 *	server/zone/objects/tangible/tool/smuggler/SlicingTool.cpp generated by engine3 IDL compiler 0.60
 */

#include "SlicingTool.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/DatagramServiceThread.h"

#include "engine/service/Message.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/ChatManager.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Exception.h"

#include "system/lang/Time.h"

#include "system/net/Packet.h"

#include "system/net/Socket.h"

#include "system/net/SocketAddress.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	SlicingToolStub
 */

enum {RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_ = 6,RPC_UPDATECRAFTINGVALUES__MANUFACTURESCHEMATIC_,RPC_CALCULATESUCCESSRATE__,RPC_GETEFFECTIVENESS__};

SlicingTool::SlicingTool() : TangibleObject(DummyConstructorParameter::instance()) {
	SlicingToolImplementation* _implementation = new SlicingToolImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

SlicingTool::SlicingTool(DummyConstructorParameter* param) : TangibleObject(param) {
}

SlicingTool::~SlicingTool() {
}


int SlicingTool::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	SlicingToolImplementation* _implementation = (SlicingToolImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void SlicingTool::loadTemplateData(SharedObjectTemplate* templateData) {
	SlicingToolImplementation* _implementation = (SlicingToolImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void SlicingTool::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	SlicingToolImplementation* _implementation = (SlicingToolImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void SlicingTool::updateCraftingValues(ManufactureSchematic* schematic) {
	SlicingToolImplementation* _implementation = (SlicingToolImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATECRAFTINGVALUES__MANUFACTURESCHEMATIC_);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		_implementation->updateCraftingValues(schematic);
}

bool SlicingTool::calculateSuccessRate() {
	SlicingToolImplementation* _implementation = (SlicingToolImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATESUCCESSRATE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->calculateSuccessRate();
}

float SlicingTool::getEffectiveness() {
	SlicingToolImplementation* _implementation = (SlicingToolImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEFFECTIVENESS__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEffectiveness();
}

DistributedObjectServant* SlicingTool::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void SlicingTool::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<SlicingToolImplementation*>(servant));
}

/*
 *	SlicingToolImplementation
 */

SlicingToolImplementation::SlicingToolImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


SlicingToolImplementation::~SlicingToolImplementation() {
}


void SlicingToolImplementation::finalize() {
}

void SlicingToolImplementation::_initializeImplementation() {
	_setClassHelper(SlicingToolHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SlicingToolImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SlicingTool*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SlicingToolImplementation::_getStub() {
	return _this;
}

SlicingToolImplementation::operator const SlicingTool*() {
	return _this;
}

Object* SlicingToolImplementation::clone() {
	return dynamic_cast<Object*>(new SlicingToolImplementation(*this));
}


void SlicingToolImplementation::lock(bool doLock) {
}

void SlicingToolImplementation::lock(ManagedObject* obj) {
}

void SlicingToolImplementation::rlock(bool doLock) {
}

void SlicingToolImplementation::wlock(bool doLock) {
}

void SlicingToolImplementation::wlock(ManagedObject* obj) {
}

void SlicingToolImplementation::unlock(bool doLock) {
}

void SlicingToolImplementation::runlock(bool doLock) {
}

void SlicingToolImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("SlicingTool");

}

void SlicingToolImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SlicingToolImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SlicingToolImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "effectiveness") {
		TypeInfo<float >::parseFromBinaryStream(&effectiveness, stream);
		return true;
	}


	return false;
}

void SlicingToolImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SlicingToolImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SlicingToolImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "effectiveness";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&effectiveness, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + TangibleObjectImplementation::writeObjectMembers(stream);
}

SlicingToolImplementation::SlicingToolImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/smuggler/SlicingTool.idl():  		setLoggingName("SlicingTool");
	setLoggingName("SlicingTool");
	// server/zone/objects/tangible/tool/smuggler/SlicingTool.idl():  		effectiveness = 0;
	effectiveness = 0;
}

float SlicingToolImplementation::getEffectiveness() {
	// server/zone/objects/tangible/tool/smuggler/SlicingTool.idl():  		return effectiveness;
	return effectiveness;
}

/*
 *	SlicingToolAdapter
 */

SlicingToolAdapter::SlicingToolAdapter(SlicingToolImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* SlicingToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_UPDATECRAFTINGVALUES__MANUFACTURESCHEMATIC_:
		updateCraftingValues((ManufactureSchematic*) inv->getObjectParameter());
		break;
	case RPC_CALCULATESUCCESSRATE__:
		resp->insertBoolean(calculateSuccessRate());
		break;
	case RPC_GETEFFECTIVENESS__:
		resp->insertFloat(getEffectiveness());
		break;
	default:
		return NULL;
	}

	return resp;
}

int SlicingToolAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((SlicingToolImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void SlicingToolAdapter::updateCraftingValues(ManufactureSchematic* schematic) {
	((SlicingToolImplementation*) impl)->updateCraftingValues(schematic);
}

bool SlicingToolAdapter::calculateSuccessRate() {
	return ((SlicingToolImplementation*) impl)->calculateSuccessRate();
}

float SlicingToolAdapter::getEffectiveness() {
	return ((SlicingToolImplementation*) impl)->getEffectiveness();
}

/*
 *	SlicingToolHelper
 */

SlicingToolHelper* SlicingToolHelper::staticInitializer = SlicingToolHelper::instance();

SlicingToolHelper::SlicingToolHelper() {
	className = "SlicingTool";

	Core::getObjectBroker()->registerClass(className, this);
}

void SlicingToolHelper::finalizeHelper() {
	SlicingToolHelper::finalize();
}

DistributedObject* SlicingToolHelper::instantiateObject() {
	return new SlicingTool(DummyConstructorParameter::instance());
}

DistributedObjectServant* SlicingToolHelper::instantiateServant() {
	return new SlicingToolImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SlicingToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SlicingToolAdapter((SlicingToolImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

