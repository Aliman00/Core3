/*
 *	server/zone/objects/tangible/ticket/Ticket.h generated by engine3 IDL compiler 0.55
 */

#ifndef TICKET_H_
#define TICKET_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

#include "engine/service/Message.h"

#include "../TangibleObject.h"

class Ticket : public TangibleObject {
protected:
	Ticket();
	Ticket(DistributedObjectServant* obj);
	Ticket(Ticket& ref);

	virtual ~Ticket();

public:
	Ticket* clone();

	int useObject(Player* player);

	string& getDeparturePlanet();

	string& getDeparturePoint();

	string& getArrivalPlanet();

	string& getArrivalPoint();

protected:
	string _return_getArrivalPlanet;

	string _return_getArrivalPoint;

	string _return_getDeparturePlanet;

	string _return_getDeparturePoint;


	friend class TicketHelper;
};

class TicketImplementation;

class TicketAdapter : public TangibleObjectAdapter {
public:
	TicketAdapter(TicketImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

	string& getDeparturePlanet();

	string& getDeparturePoint();

	string& getArrivalPlanet();

	string& getArrivalPoint();

};

class TicketHelper : public DistributedObjectClassHelper, public Singleton<TicketHelper> {
public:
	TicketHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<TicketHelper>;
};

#include "../TangibleObjectImplementation.h"

class TicketServant : public TangibleObjectImplementation {
public:
	Ticket* _this;

public:
	TicketServant(unsigned long long oid, int tp);
	virtual ~TicketServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*TICKET_H_*/
