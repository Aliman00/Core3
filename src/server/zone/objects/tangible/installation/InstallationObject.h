/*
 *	server/zone/objects/tangible/installation/InstallationObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef INSTALLATIONOBJECT_H_
#define INSTALLATIONOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class CreatureObject;

#include "../TangibleObject.h"

class InstallationObject : public TangibleObject {
public:
	InstallationObject(unsigned long long objectid, int type = 1000);

	void sendPayMaintenanceTo(CreatureObject* player);

	void sendDepositPowerTo(CreatureObject* player);

	void sendStructureStatusTo(CreatureObject* player);

	void sendDestroyQueryTo(CreatureObject* player);

	void sendDestroyConfirmTo(CreatureObject* player);

	void sendPermissionListTo(CreatureObject* player, const String& listname);

	void destroyStructure(CreatureObject* player);

	void pollStructureStatus();

protected:
	InstallationObject(DummyConstructorParameter* param);

	virtual ~InstallationObject();

	friend class InstallationObjectHelper;
};

class InstallationObjectImplementation;

class InstallationObjectAdapter : public TangibleObjectAdapter {
public:
	InstallationObjectAdapter(InstallationObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendPayMaintenanceTo(CreatureObject* player);

	void sendDepositPowerTo(CreatureObject* player);

	void sendStructureStatusTo(CreatureObject* player);

	void sendDestroyQueryTo(CreatureObject* player);

	void sendDestroyConfirmTo(CreatureObject* player);

	void sendPermissionListTo(CreatureObject* player, const String& listname);

	void destroyStructure(CreatureObject* player);

	void pollStructureStatus();

protected:
	String _param1_sendPermissionListTo__CreatureObject_String_;
};

class InstallationObjectHelper : public DistributedObjectClassHelper, public Singleton<InstallationObjectHelper> {
	static InstallationObjectHelper* staticInitializer;

public:
	InstallationObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<InstallationObjectHelper>;
};

#include "../TangibleObjectImplementation.h"

class InstallationObjectServant : public TangibleObjectImplementation {
public:
	InstallationObject* _this;

public:
	InstallationObjectServant(unsigned long long objectid, int type);
	virtual ~InstallationObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*INSTALLATIONOBJECT_H_*/
