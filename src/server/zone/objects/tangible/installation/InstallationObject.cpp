/*
 *	server/zone/objects/tangible/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "InstallationObject.h"

#include "InstallationObjectImplementation.h"

#include "../TangibleObject.h"

#include "../creature/CreatureObject.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject(unsigned long long objectid, int type) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation(objectid, type);
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}

void InstallationObject::sendPayMaintenanceTo(CreatureObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendPayMaintenanceTo(player);
}

void InstallationObject::sendDepositPowerTo(CreatureObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendDepositPowerTo(player);
}

void InstallationObject::sendStructureStatusTo(CreatureObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendStructureStatusTo(player);
}

void InstallationObject::sendDestroyQueryTo(CreatureObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendDestroyQueryTo(player);
}

void InstallationObject::sendDestroyConfirmTo(CreatureObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendDestroyConfirmTo(player);
}

void InstallationObject::sendPermissionListTo(CreatureObject* player, const String& listname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addAsciiParameter(listname);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendPermissionListTo(player, listname);
}

void InstallationObject::destroyStructure(CreatureObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->destroyStructure(player);
}

void InstallationObject::pollStructureStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->pollStructureStatus();
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendPayMaintenanceTo((CreatureObject*) inv->getObjectParameter());
		break;
	case 7:
		sendDepositPowerTo((CreatureObject*) inv->getObjectParameter());
		break;
	case 8:
		sendStructureStatusTo((CreatureObject*) inv->getObjectParameter());
		break;
	case 9:
		sendDestroyQueryTo((CreatureObject*) inv->getObjectParameter());
		break;
	case 10:
		sendDestroyConfirmTo((CreatureObject*) inv->getObjectParameter());
		break;
	case 11:
		sendPermissionListTo((CreatureObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__CreatureObject_String_));
		break;
	case 12:
		destroyStructure((CreatureObject*) inv->getObjectParameter());
		break;
	case 13:
		pollStructureStatus();
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::sendPayMaintenanceTo(CreatureObject* player) {
	return ((InstallationObjectImplementation*) impl)->sendPayMaintenanceTo(player);
}

void InstallationObjectAdapter::sendDepositPowerTo(CreatureObject* player) {
	return ((InstallationObjectImplementation*) impl)->sendDepositPowerTo(player);
}

void InstallationObjectAdapter::sendStructureStatusTo(CreatureObject* player) {
	return ((InstallationObjectImplementation*) impl)->sendStructureStatusTo(player);
}

void InstallationObjectAdapter::sendDestroyQueryTo(CreatureObject* player) {
	return ((InstallationObjectImplementation*) impl)->sendDestroyQueryTo(player);
}

void InstallationObjectAdapter::sendDestroyConfirmTo(CreatureObject* player) {
	return ((InstallationObjectImplementation*) impl)->sendDestroyConfirmTo(player);
}

void InstallationObjectAdapter::sendPermissionListTo(CreatureObject* player, const String& listname) {
	return ((InstallationObjectImplementation*) impl)->sendPermissionListTo(player, listname);
}

void InstallationObjectAdapter::destroyStructure(CreatureObject* player) {
	return ((InstallationObjectImplementation*) impl)->destroyStructure(player);
}

void InstallationObjectAdapter::pollStructureStatus() {
	return ((InstallationObjectImplementation*) impl)->pollStructureStatus();
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	InstallationObjectServant
 */

InstallationObjectServant::InstallationObjectServant(unsigned long long objectid, int type) : TangibleObjectImplementation(objectid, type) {
	_classHelper = InstallationObjectHelper::instance();
}

InstallationObjectServant::~InstallationObjectServant() {
}

void InstallationObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* InstallationObjectServant::_getStub() {
	return _this;
}

