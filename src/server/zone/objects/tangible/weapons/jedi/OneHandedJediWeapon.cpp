/*
 *	server/zone/objects/tangible/weapons/jedi/OneHandedJediWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../../creature/CreatureObject.h"

#include "../JediWeapon.h"

#include "OneHandedJediWeapon.h"

#include "OneHandedJediWeaponImplementation.h"

/*
 *	OneHandedJediWeaponStub
 */

OneHandedJediWeapon::OneHandedJediWeapon() : JediWeapon(NULL) {
}

OneHandedJediWeapon::OneHandedJediWeapon(DistributedObjectServant* obj) : JediWeapon(obj) {
}

OneHandedJediWeapon::OneHandedJediWeapon(OneHandedJediWeapon& ref) : JediWeapon(ref) {
}

OneHandedJediWeapon::~OneHandedJediWeapon() {
}

OneHandedJediWeapon* OneHandedJediWeapon::clone() {
	return new OneHandedJediWeapon(*this);
}


/*
 *	OneHandedJediWeaponAdapter
 */

OneHandedJediWeaponAdapter::OneHandedJediWeaponAdapter(OneHandedJediWeaponImplementation* obj) : JediWeaponAdapter(obj) {
}

Packet* OneHandedJediWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	OneHandedJediWeaponHelper
 */

OneHandedJediWeaponHelper::OneHandedJediWeaponHelper() {
	className = "OneHandedJediWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void OneHandedJediWeaponHelper::finalizeHelper() {
	OneHandedJediWeaponHelper::finalize();
}

DistributedObject* OneHandedJediWeaponHelper::instantiateObject() {
	return new OneHandedJediWeapon();
}

DistributedObjectAdapter* OneHandedJediWeaponHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new OneHandedJediWeaponAdapter((OneHandedJediWeaponImplementation*) obj);

	DistributedObjectStub* stub = new OneHandedJediWeapon(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	OneHandedJediWeaponServant
 */

OneHandedJediWeaponServant::OneHandedJediWeaponServant(unsigned long long objid, unsigned int tempcrc, const unicode& n, const string& tempn, int tp, bool eqp) : JediWeaponImplementation(objid, tempcrc, n, tempn, tp, eqp) {
	_classHelper = OneHandedJediWeaponHelper::instance();
}

OneHandedJediWeaponServant::OneHandedJediWeaponServant(CreatureObject* creature, const string& temp, const unicode& n, const string& tempn, int tp, bool eqp) : JediWeaponImplementation(creature, temp, n, tempn, tp, eqp) {
	_classHelper = OneHandedJediWeaponHelper::instance();
}

OneHandedJediWeaponServant::~OneHandedJediWeaponServant() {
}

void OneHandedJediWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (OneHandedJediWeapon*) stub;
	JediWeaponServant::_setStub(stub);
}

DistributedObjectStub* OneHandedJediWeaponServant::_getStub() {
	return _this;
}

