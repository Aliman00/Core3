/*
 *	server/zone/objects/tangible/weapons/RangedWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../creature/CreatureObject.h"

#include "Weapon.h"

#include "RangedWeapon.h"

#include "RangedWeaponImplementation.h"

/*
 *	RangedWeaponStub
 */

RangedWeapon::RangedWeapon() : Weapon(NULL) {
}

RangedWeapon::RangedWeapon(DistributedObjectServant* obj) : Weapon(obj) {
}

RangedWeapon::RangedWeapon(RangedWeapon& ref) : Weapon(ref) {
}

RangedWeapon::~RangedWeapon() {
}

RangedWeapon* RangedWeapon::clone() {
	return new RangedWeapon(*this);
}


int RangedWeapon::getRange() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((RangedWeaponImplementation*) _impl)->getRange();
}

void RangedWeapon::setRange(int rng) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addSignedIntParameter(rng);

		method.executeWithVoidReturn();
	} else
		((RangedWeaponImplementation*) _impl)->setRange(rng);
}

/*
 *	RangedWeaponAdapter
 */

RangedWeaponAdapter::RangedWeaponAdapter(RangedWeaponImplementation* obj) : WeaponAdapter(obj) {
}

Packet* RangedWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getRange());
		break;
	case 7:
		setRange(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

int RangedWeaponAdapter::getRange() {
	return ((RangedWeaponImplementation*) impl)->getRange();
}

void RangedWeaponAdapter::setRange(int rng) {
	return ((RangedWeaponImplementation*) impl)->setRange(rng);
}

/*
 *	RangedWeaponHelper
 */

RangedWeaponHelper* RangedWeaponHelper::staticInitializer = RangedWeaponHelper::instance();

RangedWeaponHelper::RangedWeaponHelper() {
	className = "RangedWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RangedWeaponHelper::finalizeHelper() {
	RangedWeaponHelper::finalize();
}

DistributedObject* RangedWeaponHelper::instantiateObject() {
	return new RangedWeapon();
}

DistributedObjectAdapter* RangedWeaponHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new RangedWeaponAdapter((RangedWeaponImplementation*) obj);

	DistributedObjectStub* stub = new RangedWeapon(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	RangedWeaponServant
 */

RangedWeaponServant::RangedWeaponServant(unsigned long long objid, unsigned int tempcrc, const unicode& n, const string& tempn, bool eqp, int tp, int cat) : WeaponImplementation(objid, tempcrc, n, tempn, eqp, tp, cat) {
	_classHelper = RangedWeaponHelper::instance();
}

RangedWeaponServant::RangedWeaponServant(CreatureObject* creature, const string& temp, const unicode& n, const string& tempn, bool eqp, int tp, int cat) : WeaponImplementation(creature, temp, n, tempn, eqp, tp, cat) {
	_classHelper = RangedWeaponHelper::instance();
}

RangedWeaponServant::~RangedWeaponServant() {
}

void RangedWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (RangedWeapon*) stub;
	WeaponServant::_setStub(stub);
}

DistributedObjectStub* RangedWeaponServant::_getStub() {
	return _this;
}

