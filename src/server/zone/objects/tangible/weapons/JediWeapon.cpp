/*
 *	server/zone/objects/tangible/weapons/JediWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../creature/CreatureObject.h"

#include "Weapon.h"

#include "JediWeapon.h"

#include "JediWeaponImplementation.h"

/*
 *	JediWeaponStub
 */

JediWeapon::JediWeapon() : Weapon(NULL) {
}

JediWeapon::JediWeapon(DistributedObjectServant* obj) : Weapon(obj) {
}

JediWeapon::JediWeapon(JediWeapon& ref) : Weapon(ref) {
}

JediWeapon::~JediWeapon() {
}

JediWeapon* JediWeapon::clone() {
	return new JediWeapon(*this);
}


int JediWeapon::getForceCost() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((JediWeaponImplementation*) _impl)->getForceCost();
}

void JediWeapon::setForceCost(int fcost) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addSignedIntParameter(fcost);

		method.executeWithVoidReturn();
	} else
		((JediWeaponImplementation*) _impl)->setForceCost(fcost);
}

/*
 *	JediWeaponAdapter
 */

JediWeaponAdapter::JediWeaponAdapter(JediWeaponImplementation* obj) : WeaponAdapter(obj) {
}

Packet* JediWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getForceCost());
		break;
	case 7:
		setForceCost(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

int JediWeaponAdapter::getForceCost() {
	return ((JediWeaponImplementation*) impl)->getForceCost();
}

void JediWeaponAdapter::setForceCost(int fcost) {
	return ((JediWeaponImplementation*) impl)->setForceCost(fcost);
}

/*
 *	JediWeaponHelper
 */

JediWeaponHelper::JediWeaponHelper() {
	className = "JediWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void JediWeaponHelper::finalizeHelper() {
	JediWeaponHelper::finalize();
}

DistributedObject* JediWeaponHelper::instantiateObject() {
	return new JediWeapon();
}

DistributedObjectAdapter* JediWeaponHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new JediWeaponAdapter((JediWeaponImplementation*) obj);

	DistributedObjectStub* stub = new JediWeapon(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	JediWeaponServant
 */

JediWeaponServant::JediWeaponServant(unsigned long long objid, unsigned int tempcrc, const unicode& n, const string& tempn, bool eqp, int tp, int cat) : WeaponImplementation(objid, tempcrc, n, tempn, eqp, tp, cat) {
	_classHelper = JediWeaponHelper::instance();
}

JediWeaponServant::JediWeaponServant(CreatureObject* creature, const string& temp, const unicode& n, const string& tempn, bool eqp, int tp, int cat) : WeaponImplementation(creature, temp, n, tempn, eqp, tp, cat) {
	_classHelper = JediWeaponHelper::instance();
}

JediWeaponServant::~JediWeaponServant() {
}

void JediWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (JediWeapon*) stub;
	WeaponServant::_setStub(stub);
}

DistributedObjectStub* JediWeaponServant::_getStub() {
	return _this;
}

