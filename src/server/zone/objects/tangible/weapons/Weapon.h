/*
 *	server/zone/objects/tangible/weapons/Weapon.h generated by engine3 IDL compiler 0.55
 */

#ifndef WEAPON_H_
#define WEAPON_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class TangibleObject;

class Player;

class Powerup;

#include "../TangibleObject.h"

class Weapon : public TangibleObject {
protected:
	Weapon();
	Weapon(DistributedObjectServant* obj);
	Weapon(Weapon& ref);

	virtual ~Weapon();

public:
	Weapon* clone();

	void sendTo(Player* player, bool doClose = true);

	void decayWeapon(int decayRate);

	void setWeaponStats(int modifier);

	void sliceWeapon(Player* player);

	void repairWeapon(Player* player);

	void removePowerup(Player* player, bool notify);

	bool decreaseDot0Uses();

	bool decreaseDot1Uses();

	bool decreaseDot2Uses();

	bool decreasePowerupUses();

	bool decreaseUsesRemaining();

	bool isSliced();

	bool isJedi();

	bool isMelee();

	bool isRanged();

	bool isCertified();

	void powerupMinDamage(float powerupValue);

	void powerupMaxDamage(float powerupValue);

	void powerupHealthAttackCost(float powerupValue);

	void powerupActionAttackCost(float powerupValue);

	void powerupMindAttackCost(float powerupValue);

	void powerupWoundsRatio(float powerupValue);

	void powerupAttackSpeed(float powerupValue);

	void powerupPointBlankAccuracy(float powerupValue);

	void powerupIdealRange(float powerupValue);

	void powerupIdealAccuracy(float powerupValue);

	void powerupMaxRangeAccuracy(float powerupValue);

	void setDot0Uses(int uses);

	void setDot1Uses(int uses);

	void setDot2Uses(int uses);

	void setPowerupUses(int uses);

	void setUsesRemaining(int charges);

	void setCert(string& certification);

	void setCertified(bool crt);

	int getType();

	int getCategory();

	int getDamageType();

	int getUsesRemaining();

	float getMinDamage();

	float getMaxDamage();

	float getAttackSpeed();

	int getHealthAttackCost();

	int getActionAttackCost();

	int getMindAttackCost();

	int getPointBlankRange();

	int getPointBlankAccuracy();

	int getMaxRange();

	int getMaxRangeAccuracy();

	int getIdealRange();

	int getIdealAccuracy();

	float getWoundsRatio();

	int getArmorPiercing();

	int getDot0Type();

	int getDot0Attribute();

	int getDot0Strength();

	int getDot0Duration();

	int getDot0Potency();

	int getDot0Uses();

	int getDot1Type();

	int getDot1Attribute();

	int getDot1Strength();

	int getDot1Duration();

	int getDot1Potency();

	int getDot1Uses();

	int getDot2Type();

	int getDot2Attribute();

	int getDot2Strength();

	int getDot2Duration();

	int getDot2Potency();

	int getDot2Uses();

	int getSkillMod0Type();

	int getSkillMod1Type();

	int getSkillMod2Type();

	int getSkillMod0Value();

	int getSkillMod1Value();

	int getSkillMod2Value();

	int getPowerupUses();

	bool hasPowerup();

	string& getCert();

protected:
	string _return_getCert;


	friend class WeaponHelper;
};

class WeaponImplementation;

class WeaponAdapter : public TangibleObjectAdapter {
public:
	WeaponAdapter(WeaponImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player, bool doClose);

	void decayWeapon(int decayRate);

	void setWeaponStats(int modifier);

	void sliceWeapon(Player* player);

	void repairWeapon(Player* player);

	void removePowerup(Player* player, bool notify);

	bool decreaseDot0Uses();

	bool decreaseDot1Uses();

	bool decreaseDot2Uses();

	bool decreasePowerupUses();

	bool decreaseUsesRemaining();

	bool isSliced();

	bool isJedi();

	bool isMelee();

	bool isRanged();

	bool isCertified();

	void powerupMinDamage(float powerupValue);

	void powerupMaxDamage(float powerupValue);

	void powerupHealthAttackCost(float powerupValue);

	void powerupActionAttackCost(float powerupValue);

	void powerupMindAttackCost(float powerupValue);

	void powerupWoundsRatio(float powerupValue);

	void powerupAttackSpeed(float powerupValue);

	void powerupPointBlankAccuracy(float powerupValue);

	void powerupIdealRange(float powerupValue);

	void powerupIdealAccuracy(float powerupValue);

	void powerupMaxRangeAccuracy(float powerupValue);

	void setDot0Uses(int uses);

	void setDot1Uses(int uses);

	void setDot2Uses(int uses);

	void setPowerupUses(int uses);

	void setUsesRemaining(int charges);

	void setCert(string& certification);

	void setCertified(bool crt);

	int getType();

	int getCategory();

	int getDamageType();

	int getUsesRemaining();

	float getMinDamage();

	float getMaxDamage();

	float getAttackSpeed();

	int getHealthAttackCost();

	int getActionAttackCost();

	int getMindAttackCost();

	int getPointBlankRange();

	int getPointBlankAccuracy();

	int getMaxRange();

	int getMaxRangeAccuracy();

	int getIdealRange();

	int getIdealAccuracy();

	float getWoundsRatio();

	int getArmorPiercing();

	int getDot0Type();

	int getDot0Attribute();

	int getDot0Strength();

	int getDot0Duration();

	int getDot0Potency();

	int getDot0Uses();

	int getDot1Type();

	int getDot1Attribute();

	int getDot1Strength();

	int getDot1Duration();

	int getDot1Potency();

	int getDot1Uses();

	int getDot2Type();

	int getDot2Attribute();

	int getDot2Strength();

	int getDot2Duration();

	int getDot2Potency();

	int getDot2Uses();

	int getSkillMod0Type();

	int getSkillMod1Type();

	int getSkillMod2Type();

	int getSkillMod0Value();

	int getSkillMod1Value();

	int getSkillMod2Value();

	int getPowerupUses();

	bool hasPowerup();

	string& getCert();

protected:
	string _param0_setCert__string_;
};

class WeaponHelper : public DistributedObjectClassHelper, public Singleton<WeaponHelper> {
	static WeaponHelper* staticInitializer;

public:
	WeaponHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<WeaponHelper>;
};

#include "../TangibleObjectImplementation.h"

class WeaponServant : public TangibleObjectImplementation {
public:
	Weapon* _this;

public:
	WeaponServant(unsigned long long oid, int tp);
	WeaponServant(unsigned long long oid, const unicode& name, const string& tempname, unsigned int tempcrc, int tp);
	virtual ~WeaponServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*WEAPON_H_*/
