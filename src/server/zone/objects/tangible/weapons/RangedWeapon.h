/*
 *	server/zone/objects/tangible/weapons/RangedWeapon.h generated by engine3 IDL compiler 0.55
 */

#ifndef RANGEDWEAPON_H_
#define RANGEDWEAPON_H_

#include "engine/orb/DistributedObjectBroker.h"

class CreatureObject;

class Weapon;

#include "Weapon.h"

class RangedWeapon : public Weapon {
protected:
	RangedWeapon();
	RangedWeapon(DistributedObjectServant* obj);
	RangedWeapon(RangedWeapon& ref);

	virtual ~RangedWeapon();

public:
	RangedWeapon* clone();

	int getRange();

	void setRange(int rng);

protected:
	friend class RangedWeaponHelper;
};

class RangedWeaponImplementation;

class RangedWeaponAdapter : public WeaponAdapter {
public:
	RangedWeaponAdapter(RangedWeaponImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int getRange();

	void setRange(int rng);

};

class RangedWeaponHelper : public DistributedObjectClassHelper, public Singleton<RangedWeaponHelper> {
public:
	RangedWeaponHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<RangedWeaponHelper>;
};

#include "WeaponImplementation.h"

class RangedWeaponServant : public WeaponImplementation {
public:
	RangedWeapon* _this;

public:
	RangedWeaponServant(unsigned long long objid, unsigned int tempcrc, const unicode& n, const string& tempn, bool eqp, int tp, int cat);
	RangedWeaponServant(CreatureObject* creature, const string& temp, const unicode& n, const string& tempn, bool eqp, int tp, int cat);
	virtual ~RangedWeaponServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*RANGEDWEAPON_H_*/
