/*
 *	server/zone/objects/tangible/surveytool/SurveyTool.cpp generated by engine3 IDL compiler 0.55
 */

#include "../TangibleObject.h"

#include "../../../packets.h"

#include "../../player/Player.h"

#include "../../creature/CreatureObject.h"

#include "SurveyTool.h"

#include "SurveyToolImplementation.h"

/*
 *	SurveyToolStub
 */

SurveyTool::SurveyTool() : TangibleObject(NULL) {
}

SurveyTool::SurveyTool(DistributedObjectServant* obj) : TangibleObject(obj) {
}

SurveyTool::SurveyTool(SurveyTool& ref) : TangibleObject(ref) {
}

SurveyTool::~SurveyTool() {
}

SurveyTool* SurveyTool::clone() {
	return new SurveyTool(*this);
}


int SurveyTool::useObject(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->useObject(player);
}

int SurveyTool::getSurveyToolType() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->getSurveyToolType();
}

int SurveyTool::getSurveyToolRange() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->getSurveyToolRange();
}

void SurveyTool::setSurveyToolRange(int range) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);
		method.addSignedIntParameter(range);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->setSurveyToolRange(range);
}

void SurveyTool::sendSurveyEffect(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendSurveyEffect(player);
}

void SurveyTool::sendSampleEffect(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendSampleEffect(player);
}

void SurveyTool::surveyRequest(Player* player, unicode& resourceName) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addUnicodeParameter(resourceName);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->surveyRequest(player, resourceName);
}

void SurveyTool::sampleRequest(Player* player, unicode& resourceName) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addUnicodeParameter(resourceName);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sampleRequest(player, resourceName);
}

/*
 *	SurveyToolAdapter
 */

SurveyToolAdapter::SurveyToolAdapter(SurveyToolImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* SurveyToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertSignedInt(getSurveyToolType());
		break;
	case 8:
		resp->insertSignedInt(getSurveyToolRange());
		break;
	case 9:
		setSurveyToolRange(inv->getSignedIntParameter());
		break;
	case 10:
		sendSurveyEffect((Player*) inv->getObjectParameter());
		break;
	case 11:
		sendSampleEffect((Player*) inv->getObjectParameter());
		break;
	case 12:
		surveyRequest((Player*) inv->getObjectParameter(), inv->getUnicodeParameter(_param1_surveyRequest__Player_unicode_));
		break;
	case 13:
		sampleRequest((Player*) inv->getObjectParameter(), inv->getUnicodeParameter(_param1_sampleRequest__Player_unicode_));
		break;
	default:
		return NULL;
	}

	return resp;
}

int SurveyToolAdapter::useObject(Player* player) {
	return ((SurveyToolImplementation*) impl)->useObject(player);
}

int SurveyToolAdapter::getSurveyToolType() {
	return ((SurveyToolImplementation*) impl)->getSurveyToolType();
}

int SurveyToolAdapter::getSurveyToolRange() {
	return ((SurveyToolImplementation*) impl)->getSurveyToolRange();
}

void SurveyToolAdapter::setSurveyToolRange(int range) {
	return ((SurveyToolImplementation*) impl)->setSurveyToolRange(range);
}

void SurveyToolAdapter::sendSurveyEffect(Player* player) {
	return ((SurveyToolImplementation*) impl)->sendSurveyEffect(player);
}

void SurveyToolAdapter::sendSampleEffect(Player* player) {
	return ((SurveyToolImplementation*) impl)->sendSampleEffect(player);
}

void SurveyToolAdapter::surveyRequest(Player* player, unicode& resourceName) {
	return ((SurveyToolImplementation*) impl)->surveyRequest(player, resourceName);
}

void SurveyToolAdapter::sampleRequest(Player* player, unicode& resourceName) {
	return ((SurveyToolImplementation*) impl)->sampleRequest(player, resourceName);
}

/*
 *	SurveyToolHelper
 */

SurveyToolHelper::SurveyToolHelper() {
	className = "SurveyTool";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SurveyToolHelper::finalizeHelper() {
	SurveyToolHelper::finalize();
}

DistributedObject* SurveyToolHelper::instantiateObject() {
	return new SurveyTool();
}

DistributedObjectAdapter* SurveyToolHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new SurveyToolAdapter((SurveyToolImplementation*) obj);

	DistributedObjectStub* stub = new SurveyTool(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	SurveyToolServant
 */

SurveyToolServant::SurveyToolServant(CreatureObject* creature, const unicode& n, const string& tempn, int tempCRC, int tp) : TangibleObjectImplementation(creature, n, tempn, tempCRC, tp) {
	_classHelper = SurveyToolHelper::instance();
}

SurveyToolServant::SurveyToolServant(unsigned long long oid, const unicode& n, const string& tempn, int tempCRC, int tp) : TangibleObjectImplementation(oid, n, tempn, tempCRC, tp) {
	_classHelper = SurveyToolHelper::instance();
}

SurveyToolServant::~SurveyToolServant() {
}

void SurveyToolServant::_setStub(DistributedObjectStub* stub) {
	_this = (SurveyTool*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* SurveyToolServant::_getStub() {
	return _this;
}

