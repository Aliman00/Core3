/*
 *	server/zone/objects/tangible/crafting/CraftingTool.cpp generated by engine3 IDL compiler 0.55
 */

#include "../TangibleObject.h"

#include "../../../packets.h"

#include "../../player/Player.h"

#include "../../creature/CreatureObject.h"

#include "../../draftschematic/DraftSchematic.h"

#include "CraftingStation.h"

#include "CraftingTool.h"

#include "CraftingToolImplementation.h"

/*
 *	CraftingToolStub
 */

CraftingTool::CraftingTool() : TangibleObject(NULL) {
}

CraftingTool::CraftingTool(DistributedObjectServant* obj) : TangibleObject(obj) {
}

CraftingTool::CraftingTool(CraftingTool& ref) : TangibleObject(ref) {
}

CraftingTool::~CraftingTool() {
}

CraftingTool* CraftingTool::clone() {
	return new CraftingTool(*this);
}


void CraftingTool::sendTo(Player* player, bool doClose) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->sendTo(player, doClose);
}

void CraftingTool::generateAttributes(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->generateAttributes(player);
}

void CraftingTool::cleanUp() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->cleanUp();
}

int CraftingTool::useObject(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->useObject(player);
}

void CraftingTool::sendToolStart(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->sendToolStart(player);
}

void CraftingTool::setToolEffectiveness(float eff) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->setToolEffectiveness(eff);
}

void CraftingTool::setCraftingState(int s) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);
		method.addSignedIntParameter(s);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->setCraftingState(s);
}

void CraftingTool::setTano(TangibleObject* tano) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);
		method.addObjectParameter(tano);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->setTano(tano);
}

void CraftingTool::setDs(DraftSchematic* ds) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 14);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->setDs(ds);
}

void CraftingTool::setInsertCount(int count) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 15);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->setInsertCount(count);
}

void CraftingTool::increaseInsertCount() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _impl)->increaseInsertCount();
}

float CraftingTool::getToolEffectiveness() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 17);

		return method.executeWithFloatReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->getToolEffectiveness();
}

int CraftingTool::getCraftingState() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->getCraftingState();
}

TangibleObject* CraftingTool::getTano() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 19);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->getTano();
}

DraftSchematic* CraftingTool::getDs() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 20);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->getDs();
}

int CraftingTool::getInsertCount() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->getInsertCount();
}

bool CraftingTool::isReady() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((CraftingToolImplementation*) _impl)->isReady();
}

/*
 *	CraftingToolAdapter
 */

CraftingToolAdapter::CraftingToolAdapter(CraftingToolImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CraftingToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		generateAttributes((Player*) inv->getObjectParameter());
		break;
	case 8:
		cleanUp();
		break;
	case 9:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 10:
		sendToolStart((Player*) inv->getObjectParameter());
		break;
	case 11:
		setToolEffectiveness(inv->getFloatParameter());
		break;
	case 12:
		setCraftingState(inv->getSignedIntParameter());
		break;
	case 13:
		setTano((TangibleObject*) inv->getObjectParameter());
		break;
	case 14:
		setDs((DraftSchematic*) inv->getObjectParameter());
		break;
	case 15:
		setInsertCount(inv->getSignedIntParameter());
		break;
	case 16:
		increaseInsertCount();
		break;
	case 17:
		resp->insertFloat(getToolEffectiveness());
		break;
	case 18:
		resp->insertSignedInt(getCraftingState());
		break;
	case 19:
		resp->insertLong(getTano()->_getObjectID());
		break;
	case 20:
		resp->insertLong(getDs()->_getObjectID());
		break;
	case 21:
		resp->insertSignedInt(getInsertCount());
		break;
	case 22:
		resp->insertBoolean(isReady());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CraftingToolAdapter::sendTo(Player* player, bool doClose) {
	return ((CraftingToolImplementation*) impl)->sendTo(player, doClose);
}

void CraftingToolAdapter::generateAttributes(Player* player) {
	return ((CraftingToolImplementation*) impl)->generateAttributes(player);
}

void CraftingToolAdapter::cleanUp() {
	return ((CraftingToolImplementation*) impl)->cleanUp();
}

int CraftingToolAdapter::useObject(Player* player) {
	return ((CraftingToolImplementation*) impl)->useObject(player);
}

void CraftingToolAdapter::sendToolStart(Player* player) {
	return ((CraftingToolImplementation*) impl)->sendToolStart(player);
}

void CraftingToolAdapter::setToolEffectiveness(float eff) {
	return ((CraftingToolImplementation*) impl)->setToolEffectiveness(eff);
}

void CraftingToolAdapter::setCraftingState(int s) {
	return ((CraftingToolImplementation*) impl)->setCraftingState(s);
}

void CraftingToolAdapter::setTano(TangibleObject* tano) {
	return ((CraftingToolImplementation*) impl)->setTano(tano);
}

void CraftingToolAdapter::setDs(DraftSchematic* ds) {
	return ((CraftingToolImplementation*) impl)->setDs(ds);
}

void CraftingToolAdapter::setInsertCount(int count) {
	return ((CraftingToolImplementation*) impl)->setInsertCount(count);
}

void CraftingToolAdapter::increaseInsertCount() {
	return ((CraftingToolImplementation*) impl)->increaseInsertCount();
}

float CraftingToolAdapter::getToolEffectiveness() {
	return ((CraftingToolImplementation*) impl)->getToolEffectiveness();
}

int CraftingToolAdapter::getCraftingState() {
	return ((CraftingToolImplementation*) impl)->getCraftingState();
}

TangibleObject* CraftingToolAdapter::getTano() {
	return ((CraftingToolImplementation*) impl)->getTano();
}

DraftSchematic* CraftingToolAdapter::getDs() {
	return ((CraftingToolImplementation*) impl)->getDs();
}

int CraftingToolAdapter::getInsertCount() {
	return ((CraftingToolImplementation*) impl)->getInsertCount();
}

bool CraftingToolAdapter::isReady() {
	return ((CraftingToolImplementation*) impl)->isReady();
}

/*
 *	CraftingToolHelper
 */

CraftingToolHelper* CraftingToolHelper::staticInitializer = CraftingToolHelper::instance();

CraftingToolHelper::CraftingToolHelper() {
	className = "CraftingTool";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingToolHelper::finalizeHelper() {
	CraftingToolHelper::finalize();
}

DistributedObject* CraftingToolHelper::instantiateObject() {
	return new CraftingTool();
}

DistributedObjectAdapter* CraftingToolHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new CraftingToolAdapter((CraftingToolImplementation*) obj);

	DistributedObjectStub* stub = new CraftingTool(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	CraftingToolServant
 */

CraftingToolServant::CraftingToolServant(unsigned long long oid, const unicode& n, const string& tempn, int tempCRC, int tp) : TangibleObjectImplementation(oid, n, tempn, tempCRC, tp) {
	_classHelper = CraftingToolHelper::instance();
}

CraftingToolServant::CraftingToolServant(CreatureObject* creature, const unicode& n, const string& tempn, int tempCRC, int tp) : TangibleObjectImplementation(creature, n, tempn, tempCRC, tp) {
	_classHelper = CraftingToolHelper::instance();
}

CraftingToolServant::~CraftingToolServant() {
}

void CraftingToolServant::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingTool*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* CraftingToolServant::_getStub() {
	return _this;
}

