/*
 *	server/zone/objects/tangible/crafting/CraftingTool.h generated by engine3 IDL compiler 0.55
 */

#ifndef CRAFTINGTOOL_H_
#define CRAFTINGTOOL_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class packets;

class Player;

class CreatureObject;

class DraftSchematic;

class CraftingStation;

#include "engine/service/Message.h"

#include "../TangibleObject.h"

class CraftingTool : public TangibleObject {
protected:
	CraftingTool();
	CraftingTool(DistributedObjectServant* obj);
	CraftingTool(CraftingTool& ref);

	virtual ~CraftingTool();

public:
	CraftingTool* clone();

	void sendTo(Player* player, bool doClose = true);

	void generateAttributes(Player* player);

	void cleanUp();

	int useObject(Player* player);

	void sendToolStart(Player* player);

	void setToolEffectiveness(float eff);

	void setCraftingState(int s);

	void setTano(TangibleObject* tano);

	void setDs(DraftSchematic* ds);

	void setInsertCount(int count);

	void increaseInsertCount();

	float getToolEffectiveness();

	int getCraftingState();

	TangibleObject* getTano();

	DraftSchematic* getDs();

	int getInsertCount();

	bool isReady();

protected:
	friend class CraftingToolHelper;
};

class CraftingToolImplementation;

class CraftingToolAdapter : public TangibleObjectAdapter {
public:
	CraftingToolAdapter(CraftingToolImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player, bool doClose);

	void generateAttributes(Player* player);

	void cleanUp();

	int useObject(Player* player);

	void sendToolStart(Player* player);

	void setToolEffectiveness(float eff);

	void setCraftingState(int s);

	void setTano(TangibleObject* tano);

	void setDs(DraftSchematic* ds);

	void setInsertCount(int count);

	void increaseInsertCount();

	float getToolEffectiveness();

	int getCraftingState();

	TangibleObject* getTano();

	DraftSchematic* getDs();

	int getInsertCount();

	bool isReady();

};

class CraftingToolHelper : public DistributedObjectClassHelper, public Singleton<CraftingToolHelper> {
public:
	CraftingToolHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<CraftingToolHelper>;
};

#include "../TangibleObjectImplementation.h"

class CraftingToolServant : public TangibleObjectImplementation {
public:
	CraftingTool* _this;

public:
	CraftingToolServant(unsigned long long oid, const unicode& n, const string& tempn, int tempCRC, int tp);
	CraftingToolServant(CreatureObject* creature, const unicode& n, const string& tempn, int tempCRC, int tp);
	virtual ~CraftingToolServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CRAFTINGTOOL_H_*/
