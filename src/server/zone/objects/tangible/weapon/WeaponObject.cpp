/*
 *	server/zone/objects/tangible/weapon/WeaponObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "WeaponObject.h"

#include "WeaponObjectImplementation.h"

#include "../TangibleObject.h"

/*
 *	WeaponObjectStub
 */

WeaponObject::WeaponObject(unsigned long long objectid, int type) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new WeaponObjectImplementation(objectid, type);
	_impl->_setStub(this);
}

WeaponObject::WeaponObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

WeaponObject::~WeaponObject() {
}

/*
 *	WeaponObjectAdapter
 */

WeaponObjectAdapter::WeaponObjectAdapter(WeaponObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* WeaponObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	WeaponObjectHelper
 */

WeaponObjectHelper* WeaponObjectHelper::staticInitializer = WeaponObjectHelper::instance();

WeaponObjectHelper::WeaponObjectHelper() {
	className = "WeaponObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void WeaponObjectHelper::finalizeHelper() {
	WeaponObjectHelper::finalize();
}

DistributedObject* WeaponObjectHelper::instantiateObject() {
	return new WeaponObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* WeaponObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WeaponObjectAdapter((WeaponObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	WeaponObjectServant
 */

WeaponObjectServant::WeaponObjectServant(unsigned long long objectid, int type) : TangibleObjectImplementation(objectid, type) {
	_classHelper = WeaponObjectHelper::instance();
}

WeaponObjectServant::~WeaponObjectServant() {
}

void WeaponObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (WeaponObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* WeaponObjectServant::_getStub() {
	return _this;
}

