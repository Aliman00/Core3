/*
 *	server/zone/objects/tangible/inventory/CreatureInventory.h generated by engine3 IDL compiler 0.55
 */

#ifndef CREATUREINVENTORY_H_
#define CREATUREINVENTORY_H_

#include "engine/orb/DistributedObjectBroker.h"

class Container;

#include "../Container.h"

class CreatureInventory : public Container {
protected:
	CreatureInventory();
	CreatureInventory(DistributedObjectServant* obj);
	CreatureInventory(CreatureInventory& ref);

	virtual ~CreatureInventory();

public:
	CreatureInventory* clone();

	friend class CreatureInventoryHelper;
};

class CreatureInventoryImplementation;

class CreatureInventoryAdapter : public ContainerAdapter {
public:
	CreatureInventoryAdapter(CreatureInventoryImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class CreatureInventoryHelper : public DistributedObjectClassHelper, public Singleton<CreatureInventoryHelper> {
public:
	CreatureInventoryHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<CreatureInventoryHelper>;
};

#include "../ContainerImplementation.h"

class CreatureInventoryServant : public ContainerImplementation {
public:
	CreatureInventory* _this;

public:
	CreatureInventoryServant(unsigned long long oid);
	virtual ~CreatureInventoryServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CREATUREINVENTORY_H_*/
