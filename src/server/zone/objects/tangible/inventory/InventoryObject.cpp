/*
 *	server/zone/objects/tangible/inventory/InventoryObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "InventoryObject.h"

#include "InventoryObjectImplementation.h"

#include "../TangibleObject.h"

/*
 *	InventoryObjectStub
 */

InventoryObject::InventoryObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InventoryObjectImplementation();
	_impl->_setStub(this);
}

InventoryObject::InventoryObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InventoryObject::~InventoryObject() {
}

/*
 *	InventoryObjectAdapter
 */

InventoryObjectAdapter::InventoryObjectAdapter(InventoryObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InventoryObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	InventoryObjectHelper
 */

InventoryObjectHelper* InventoryObjectHelper::staticInitializer = InventoryObjectHelper::instance();

InventoryObjectHelper::InventoryObjectHelper() {
	className = "InventoryObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InventoryObjectHelper::finalizeHelper() {
	InventoryObjectHelper::finalize();
}

DistributedObject* InventoryObjectHelper::instantiateObject() {
	return new InventoryObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InventoryObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InventoryObjectAdapter((InventoryObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	InventoryObjectServant
 */

InventoryObjectServant::InventoryObjectServant() : TangibleObjectImplementation() {
	_classHelper = InventoryObjectHelper::instance();
}

InventoryObjectServant::~InventoryObjectServant() {
}

void InventoryObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (InventoryObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* InventoryObjectServant::_getStub() {
	return _this;
}

