/*
 *	server/zone/objects/tangible/lair/LairObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "../TangibleObject.h"

#include "LairObject.h"

#include "LairObjectImplementation.h"

/*
 *	LairObjectStub
 */

LairObject::LairObject() : TangibleObject(NULL) {
}

LairObject::LairObject(DistributedObjectServant* obj) : TangibleObject(obj) {
}

LairObject::LairObject(LairObject& ref) : TangibleObject(ref) {
}

LairObject::~LairObject() {
}

LairObject* LairObject::clone() {
	return new LairObject(*this);
}


/*
 *	LairObjectAdapter
 */

LairObjectAdapter::LairObjectAdapter(LairObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* LairObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	LairObjectHelper
 */

LairObjectHelper* LairObjectHelper::staticInitializer = LairObjectHelper::instance();

LairObjectHelper::LairObjectHelper() {
	className = "LairObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void LairObjectHelper::finalizeHelper() {
	LairObjectHelper::finalize();
}

DistributedObject* LairObjectHelper::instantiateObject() {
	return new LairObject();
}

DistributedObjectAdapter* LairObjectHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new LairObjectAdapter((LairObjectImplementation*) obj);

	DistributedObjectStub* stub = new LairObject(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	LairObjectServant
 */

LairObjectServant::LairObjectServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = LairObjectHelper::instance();
}

LairObjectServant::~LairObjectServant() {
}

void LairObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (LairObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* LairObjectServant::_getStub() {
	return _this;
}

