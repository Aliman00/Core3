/*
 *	server/zone/objects/tangible/ticketcollector/TicketCollector.cpp generated by engine3 IDL compiler 0.55
 */

#include "../TangibleObject.h"

#include "../../player/Player.h"

#include "../ticket/Ticket.h"

#include "TicketCollector.h"

#include "TicketCollectorImplementation.h"

/*
 *	TicketCollectorStub
 */

TicketCollector::TicketCollector() : TangibleObject(NULL) {
}

TicketCollector::TicketCollector(DistributedObjectServant* obj) : TangibleObject(obj) {
}

TicketCollector::TicketCollector(TicketCollector& ref) : TangibleObject(ref) {
}

TicketCollector::~TicketCollector() {
}

TicketCollector* TicketCollector::clone() {
	return new TicketCollector(*this);
}


int TicketCollector::useObject(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((TicketCollectorImplementation*) _impl)->useObject(player);
}

void TicketCollector::useTicket(Player* player, Ticket* ticket) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addObjectParameter(ticket);

		method.executeWithVoidReturn();
	} else
		((TicketCollectorImplementation*) _impl)->useTicket(player, ticket);
}

/*
 *	TicketCollectorAdapter
 */

TicketCollectorAdapter::TicketCollectorAdapter(TicketCollectorImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* TicketCollectorAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		useTicket((Player*) inv->getObjectParameter(), (Ticket*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

int TicketCollectorAdapter::useObject(Player* player) {
	return ((TicketCollectorImplementation*) impl)->useObject(player);
}

void TicketCollectorAdapter::useTicket(Player* player, Ticket* ticket) {
	return ((TicketCollectorImplementation*) impl)->useTicket(player, ticket);
}

/*
 *	TicketCollectorHelper
 */

TicketCollectorHelper::TicketCollectorHelper() {
	className = "TicketCollector";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TicketCollectorHelper::finalizeHelper() {
	TicketCollectorHelper::finalize();
}

DistributedObject* TicketCollectorHelper::instantiateObject() {
	return new TicketCollector();
}

DistributedObjectAdapter* TicketCollectorHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new TicketCollectorAdapter((TicketCollectorImplementation*) obj);

	DistributedObjectStub* stub = new TicketCollector(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	TicketCollectorServant
 */

TicketCollectorServant::TicketCollectorServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = TicketCollectorHelper::instance();
}

TicketCollectorServant::~TicketCollectorServant() {
}

void TicketCollectorServant::_setStub(DistributedObjectStub* stub) {
	_this = (TicketCollector*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* TicketCollectorServant::_getStub() {
	return _this;
}

