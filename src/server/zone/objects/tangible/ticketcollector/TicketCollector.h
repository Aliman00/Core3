/*
 *	server/zone/objects/tangible/ticketcollector/TicketCollector.h generated by engine3 IDL compiler 0.55
 */

#ifndef TICKETCOLLECTOR_H_
#define TICKETCOLLECTOR_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

class Ticket;

#include "engine/service/Message.h"

#include "../TangibleObject.h"

class TicketCollector : public TangibleObject {
protected:
	TicketCollector();
	TicketCollector(DistributedObjectServant* obj);
	TicketCollector(TicketCollector& ref);

	virtual ~TicketCollector();

public:
	TicketCollector* clone();

	int useObject(Player* player);

	void useTicket(Player* player, Ticket* ticket);

protected:
	friend class TicketCollectorHelper;
};

class TicketCollectorImplementation;

class TicketCollectorAdapter : public TangibleObjectAdapter {
public:
	TicketCollectorAdapter(TicketCollectorImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

	void useTicket(Player* player, Ticket* ticket);

};

class TicketCollectorHelper : public DistributedObjectClassHelper, public Singleton<TicketCollectorHelper> {
	static TicketCollectorHelper* staticInitializer;

public:
	TicketCollectorHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<TicketCollectorHelper>;
};

#include "../TangibleObjectImplementation.h"

class TicketCollectorServant : public TangibleObjectImplementation {
public:
	TicketCollector* _this;

public:
	TicketCollectorServant(unsigned long long oid, int tp);
	virtual ~TicketCollectorServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*TICKETCOLLECTOR_H_*/
