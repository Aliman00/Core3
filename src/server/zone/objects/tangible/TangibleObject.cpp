/*
 *	server/zone/objects/tangible/TangibleObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "TangibleObject.h"

#include "TangibleObjectImplementation.h"

#include "../SceneObject.h"

/*
 *	TangibleObjectStub
 */

TangibleObject::TangibleObject(unsigned long long objectid, int type) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new TangibleObjectImplementation(objectid, type);
	_impl->_setStub(this);
}

TangibleObject::TangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

TangibleObject::~TangibleObject() {
}

void TangibleObject::getCustomizationString(String& appearance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(appearance);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->getCustomizationString(appearance);
}

unsigned int TangibleObject::getNewMovementUpdateCounter(unsigned char count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedCharParameter(count);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getNewMovementUpdateCounter(count);
}

unsigned int TangibleObject::getNewDefenderUpdateCounter(unsigned char count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedCharParameter(count);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getNewDefenderUpdateCounter(count);
}

/*
 *	TangibleObjectAdapter
 */

TangibleObjectAdapter::TangibleObjectAdapter(TangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* TangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		getCustomizationString(inv->getAsciiParameter(_param0_getCustomizationString__String_));
		break;
	case 7:
		resp->insertInt(getNewMovementUpdateCounter(inv->getUnsignedCharParameter()));
		break;
	case 8:
		resp->insertInt(getNewDefenderUpdateCounter(inv->getUnsignedCharParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void TangibleObjectAdapter::getCustomizationString(String& appearance) {
	return ((TangibleObjectImplementation*) impl)->getCustomizationString(appearance);
}

unsigned int TangibleObjectAdapter::getNewMovementUpdateCounter(unsigned char count) {
	return ((TangibleObjectImplementation*) impl)->getNewMovementUpdateCounter(count);
}

unsigned int TangibleObjectAdapter::getNewDefenderUpdateCounter(unsigned char count) {
	return ((TangibleObjectImplementation*) impl)->getNewDefenderUpdateCounter(count);
}

/*
 *	TangibleObjectHelper
 */

TangibleObjectHelper* TangibleObjectHelper::staticInitializer = TangibleObjectHelper::instance();

TangibleObjectHelper::TangibleObjectHelper() {
	className = "TangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TangibleObjectHelper::finalizeHelper() {
	TangibleObjectHelper::finalize();
}

DistributedObject* TangibleObjectHelper::instantiateObject() {
	return new TangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TangibleObjectAdapter((TangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TangibleObjectServant
 */

TangibleObjectServant::TangibleObjectServant(unsigned long long objectid, int type) : SceneObjectImplementation(objectid, type) {
	_classHelper = TangibleObjectHelper::instance();
}

TangibleObjectServant::~TangibleObjectServant() {
}

void TangibleObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (TangibleObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* TangibleObjectServant::_getStub() {
	return _this;
}

