/*
 *	server/zone/objects/tangible/component/ComponentObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "ComponentObject.h"

#include "ComponentObjectImplementation.h"

#include "../TangibleObject.h"

/*
 *	ComponentObjectStub
 */

ComponentObject::ComponentObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new ComponentObjectImplementation();
	_impl->_setStub(this);
}

ComponentObject::ComponentObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

ComponentObject::~ComponentObject() {
}

/*
 *	ComponentObjectAdapter
 */

ComponentObjectAdapter::ComponentObjectAdapter(ComponentObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* ComponentObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	ComponentObjectHelper
 */

ComponentObjectHelper* ComponentObjectHelper::staticInitializer = ComponentObjectHelper::instance();

ComponentObjectHelper::ComponentObjectHelper() {
	className = "ComponentObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ComponentObjectHelper::finalizeHelper() {
	ComponentObjectHelper::finalize();
}

DistributedObject* ComponentObjectHelper::instantiateObject() {
	return new ComponentObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ComponentObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ComponentObjectAdapter((ComponentObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ComponentObjectServant
 */

ComponentObjectServant::ComponentObjectServant() : TangibleObjectImplementation() {
	_classHelper = ComponentObjectHelper::instance();
}

ComponentObjectServant::~ComponentObjectServant() {
}

void ComponentObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (ComponentObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* ComponentObjectServant::_getStub() {
	return _this;
}

