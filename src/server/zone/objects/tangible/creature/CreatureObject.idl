/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

include "FactionRank";
//include "Species";

import "player/PlayerObject";
import "../TangibleObject";
import "../../SceneObject";
import "../../universe/group/GroupObject";
import "../../universe/guild/GuildObject";
import "Species";

interface CreatureObject implements TangibleObject {
	CreatureObject(unsigned long objectid, int type = 0x400) {
		super(objectid, type);
	}
	
	void sendTo(PlayerObject player, boolean close = true);
	
	void updateTargetObject(unsigned long targetid, boolean updateclients = true);
	void updateTargetObject(SceneObject target, boolean updateclients = true);
	
	//Setters
	void setLastMovementStamp(unsigned int timestamp);
	void setMovementCounter(unsigned int counter);
	void setLinkedCreature(CreatureObject creature);
	void setHairObject(TangibleObject hair);
	void setMoodID(unsigned char moodid);
	void setBankCredits(unsigned int credits);
	void setCashCredits(unsigned int credits);
	void setHeight(float value);
	void setFactionRank(FactionRank rank);
	void setSpecies(Species spec);
	void setGroupObject(GroupObject groupobject);
	void setGuildObject(GuildObject guildobject);
	
	//Getters
	GroupObject getGroupObject();
	GuildObject getGuildObject();
	unsigned int getLastMovementStamp();
	CreatureObject getLinkedCreature();
	TangibleObject getHairObject();
	unsigned long getWeaponID();
	unsigned long getGroupID();
	unsigned long getGroupInviterID();
	unsigned long getUpdateCounterGroupInvite();
	unsigned int getGuildID();
	unsigned long getTargetID();
	unsigned int getInstrumentID();
	unsigned char getMoodID();
	float getHeight();
	unsigned int getBankCredits();
	unsigned int getCashCredits();
	FactionRank getFactionRank();
	Species getSpecies();
	String getTemplatePath();
	String getMoodName();
	String getPerformanceAnimation();
	unsigned long getListeningToID();
	float getSpeed();
	float getTerrainNegotiation();
	float getTurnRadius();
	float getAcceleration();
	float getDeceleration();
	unsigned int getLevel();
	unsigned long getStatesBitmask();
	unsigned char getPosture();
	unsigned int getUpdateCounterAction();
	unsigned int getUpdateCounterHAM();
	unsigned int getUpdateCounterHAMMax();
	unsigned int getUpdateCounterHAMBase();
	unsigned int getUpdateCounterWounds();
	unsigned int getUpdateCounterEncumbrance();
	unsigned int getUpdateCounterPerformance();
	unsigned int getUpdateCounterEquipment();
	int getAttribute(unsigned char attribute);
	int getHealth();
	int getStrength();
	int getConstitution();
	int getAction();
	int getQuickness();
	int getStamina();
	int getMind();
	int getFocus();
	int getWillpower();
	int getAttributeBase(unsigned char attribute);
	int getHealthBase();
	int getStrengthBase();
	int getConstitutionBase();
	int getActionBase();
	int getQuicknessBase();
	int getStaminaBase();
	int getMindBase();
	int getFocusBase();
	int getWillpowerBase();
	int getAttributeMax(unsigned char attribute);
	int getHealthMax();
	int getStrengthMax();
	int getConstitutionMax();
	int getActionMax();
	int getQuicknessMax();
	int getStaminaMax();
	int getMindMax();
	int getFocusMax();
	int getWillpowerMax();
	int getAttributeWounds(unsigned char attribute);
	int getHealthWounds();
	int getStrengthWounds();
	int getConstitutionWounds();
	int getActionWounds();
	int getQuicknessWounds();
	int getStaminaWounds();
	int getMindWounds();
	int getFocusWounds();
	int getWillpowerWounds();
	int getHealthEncumbrance();
	int getActionEncumbrance();
	int getMindEncumbrance();
	unsigned int getShockWounds();
	
	boolean isGrouped();
	boolean isGuilded();
	boolean isStationary();
}
