/*
 *	server/zone/objects/tangible/creature/npc/Creature.cpp generated by engine3 IDL compiler 0.55
 */

#include "Creature.h"

#include "CreatureImplementation.h"

#include "../CreatureObject.h"

/*
 *	CreatureStub
 */

Creature::Creature(unsigned long long objectid) : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new CreatureImplementation(objectid);
	_impl->_setStub(this);
}

Creature::Creature(DummyConstructorParameter* param) : CreatureObject(param) {
}

Creature::~Creature() {
}

/*
 *	CreatureAdapter
 */

CreatureAdapter::CreatureAdapter(CreatureImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* CreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	CreatureHelper
 */

CreatureHelper* CreatureHelper::staticInitializer = CreatureHelper::instance();

CreatureHelper::CreatureHelper() {
	className = "Creature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureHelper::finalizeHelper() {
	CreatureHelper::finalize();
}

DistributedObject* CreatureHelper::instantiateObject() {
	return new Creature(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureAdapter((CreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CreatureServant
 */

CreatureServant::CreatureServant(unsigned long long objectid, int type) : CreatureObjectImplementation(objectid, type) {
	_classHelper = CreatureHelper::instance();
}

CreatureServant::~CreatureServant() {
}

void CreatureServant::_setStub(DistributedObjectStub* stub) {
	_this = (Creature*) stub;
	CreatureObjectServant::_setStub(stub);
}

DistributedObjectStub* CreatureServant::_getStub() {
	return _this;
}

