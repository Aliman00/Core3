/*
 *	server/zone/objects/tangible/creature/player/PlayerObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlayerObject.h"

#include "PlayerObjectImplementation.h"

#include "../CreatureObject.h"

#include "../../../../Zone.h"

#include "../../../../ZoneClientSession.h"

#include "../../../intangible/player/PlayerDataObject.h"

/*
 *	PlayerObjectStub
 */

PlayerObject::PlayerObject(unsigned long long objid, PlayerDataObject* playerdata) : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerObjectImplementation(objid, playerdata);
	_impl->_setStub(this);
}

PlayerObject::PlayerObject(DummyConstructorParameter* param) : CreatureObject(param) {
}

PlayerObject::~PlayerObject() {
}

void PlayerObject::insertToZone(Zone* zne) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(zne);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->insertToZone(zne);
}

void PlayerObject::notifySceneReady() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->notifySceneReady();
}

void PlayerObject::sendTo(PlayerObject* player, bool close) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addBooleanParameter(close);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendTo(player, close);
}

void PlayerObject::sendToOwner(bool close) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(close);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendToOwner(close);
}

void PlayerObject::sendMessage(BaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendMessage(msg);
}

void PlayerObject::sendMessage(StandaloneBaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendMessage(msg);
}

void PlayerObject::setClient(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setClient(client);
}

void PlayerObject::setPlayerDataObject(PlayerDataObject* plyo) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(plyo);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setPlayerDataObject(plyo);
}

void PlayerObject::setCharacterID(unsigned long long characterid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedLongParameter(characterid);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setCharacterID(characterid);
}

void PlayerObject::setFirstName(const String& fname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(fname);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setFirstName(fname);
}

void PlayerObject::setSpouseName(const String& sname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addAsciiParameter(sname);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setSpouseName(sname);
}

void PlayerObject::setBiography(const String& bio) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(bio);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setBiography(bio);
}

void PlayerObject::setOnlineStatus(unsigned char status) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedCharParameter(status);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setOnlineStatus(status);
}

void PlayerObject::setAccessLevel(unsigned char level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedCharParameter(level);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setAccessLevel(level);
}

void PlayerObject::setLotsRemaining(unsigned int lots) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedIntParameter(lots);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setLotsRemaining(lots);
}

void PlayerObject::setFactionStatus(unsigned int status) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addUnsignedIntParameter(status);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setFactionStatus(status);
}

ZoneClientSession* PlayerObject::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getClient();
}

PlayerDataObject* PlayerObject::getPlayerDataObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return (PlayerDataObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getPlayerDataObject();
}

unsigned long long PlayerObject::getCharacterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getCharacterID();
}

String& PlayerObject::getFirstName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithAsciiReturn(_return_getFirstName);
		return _return_getFirstName;
	} else
		return ((PlayerObjectImplementation*) _impl)->getFirstName();
}

String& PlayerObject::getSpouseName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithAsciiReturn(_return_getSpouseName);
		return _return_getSpouseName;
	} else
		return ((PlayerObjectImplementation*) _impl)->getSpouseName();
}

String& PlayerObject::getBiography() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithAsciiReturn(_return_getBiography);
		return _return_getBiography;
	} else
		return ((PlayerObjectImplementation*) _impl)->getBiography();
}

unsigned char PlayerObject::getOnlineStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getOnlineStatus();
}

unsigned char PlayerObject::getAccessLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getAccessLevel();
}

unsigned int PlayerObject::getLotsRemaining() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getLotsRemaining();
}

unsigned int PlayerObject::getFactionStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getFactionStatus();
}

bool PlayerObject::isOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOnline();
}

bool PlayerObject::isOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOffline();
}

bool PlayerObject::isLoading() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLoading();
}

bool PlayerObject::isLinkDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLinkDead();
}

bool PlayerObject::isLoggingIn() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLoggingIn();
}

bool PlayerObject::isLoggingOut() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLoggingOut();
}

bool PlayerObject::isPrivileged() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isPrivileged();
}

bool PlayerObject::isOnLeave() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOnLeave();
}

bool PlayerObject::isCovert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isCovert();
}

bool PlayerObject::isOvert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOvert();
}

/*
 *	PlayerObjectAdapter
 */

PlayerObjectAdapter::PlayerObjectAdapter(PlayerObjectImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* PlayerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 7:
		notifySceneReady();
		break;
	case 8:
		sendTo((PlayerObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 9:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 10:
		sendMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 11:
		sendMessage((StandaloneBaseMessage*) inv->getObjectParameter());
		break;
	case 12:
		setClient((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 13:
		setPlayerDataObject((PlayerDataObject*) inv->getObjectParameter());
		break;
	case 14:
		setCharacterID(inv->getUnsignedLongParameter());
		break;
	case 15:
		setFirstName(inv->getAsciiParameter(_param0_setFirstName__String_));
		break;
	case 16:
		setSpouseName(inv->getAsciiParameter(_param0_setSpouseName__String_));
		break;
	case 17:
		setBiography(inv->getAsciiParameter(_param0_setBiography__String_));
		break;
	case 18:
		setOnlineStatus(inv->getUnsignedCharParameter());
		break;
	case 19:
		setAccessLevel(inv->getUnsignedCharParameter());
		break;
	case 20:
		setLotsRemaining(inv->getUnsignedIntParameter());
		break;
	case 21:
		setFactionStatus(inv->getUnsignedIntParameter());
		break;
	case 22:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 23:
		resp->insertLong(getPlayerDataObject()->_getObjectID());
		break;
	case 24:
		resp->insertLong(getCharacterID());
		break;
	case 25:
		resp->insertAscii(getFirstName());
		break;
	case 26:
		resp->insertAscii(getSpouseName());
		break;
	case 27:
		resp->insertAscii(getBiography());
		break;
	case 28:
		resp->insertByte(getOnlineStatus());
		break;
	case 29:
		resp->insertByte(getAccessLevel());
		break;
	case 30:
		resp->insertInt(getLotsRemaining());
		break;
	case 31:
		resp->insertInt(getFactionStatus());
		break;
	case 32:
		resp->insertBoolean(isOnline());
		break;
	case 33:
		resp->insertBoolean(isOffline());
		break;
	case 34:
		resp->insertBoolean(isLoading());
		break;
	case 35:
		resp->insertBoolean(isLinkDead());
		break;
	case 36:
		resp->insertBoolean(isLoggingIn());
		break;
	case 37:
		resp->insertBoolean(isLoggingOut());
		break;
	case 38:
		resp->insertBoolean(isPrivileged());
		break;
	case 39:
		resp->insertBoolean(isOnLeave());
		break;
	case 40:
		resp->insertBoolean(isCovert());
		break;
	case 41:
		resp->insertBoolean(isOvert());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerObjectAdapter::insertToZone(Zone* zne) {
	return ((PlayerObjectImplementation*) impl)->insertToZone(zne);
}

void PlayerObjectAdapter::notifySceneReady() {
	return ((PlayerObjectImplementation*) impl)->notifySceneReady();
}

void PlayerObjectAdapter::sendTo(PlayerObject* player, bool close) {
	return ((PlayerObjectImplementation*) impl)->sendTo(player, close);
}

void PlayerObjectAdapter::sendToOwner(bool close) {
	return ((PlayerObjectImplementation*) impl)->sendToOwner(close);
}

void PlayerObjectAdapter::sendMessage(BaseMessage* msg) {
	return ((PlayerObjectImplementation*) impl)->sendMessage(msg);
}

void PlayerObjectAdapter::sendMessage(StandaloneBaseMessage* msg) {
	return ((PlayerObjectImplementation*) impl)->sendMessage(msg);
}

void PlayerObjectAdapter::setClient(ZoneClientSession* client) {
	return ((PlayerObjectImplementation*) impl)->setClient(client);
}

void PlayerObjectAdapter::setPlayerDataObject(PlayerDataObject* plyo) {
	return ((PlayerObjectImplementation*) impl)->setPlayerDataObject(plyo);
}

void PlayerObjectAdapter::setCharacterID(unsigned long long characterid) {
	return ((PlayerObjectImplementation*) impl)->setCharacterID(characterid);
}

void PlayerObjectAdapter::setFirstName(const String& fname) {
	return ((PlayerObjectImplementation*) impl)->setFirstName(fname);
}

void PlayerObjectAdapter::setSpouseName(const String& sname) {
	return ((PlayerObjectImplementation*) impl)->setSpouseName(sname);
}

void PlayerObjectAdapter::setBiography(const String& bio) {
	return ((PlayerObjectImplementation*) impl)->setBiography(bio);
}

void PlayerObjectAdapter::setOnlineStatus(unsigned char status) {
	return ((PlayerObjectImplementation*) impl)->setOnlineStatus(status);
}

void PlayerObjectAdapter::setAccessLevel(unsigned char level) {
	return ((PlayerObjectImplementation*) impl)->setAccessLevel(level);
}

void PlayerObjectAdapter::setLotsRemaining(unsigned int lots) {
	return ((PlayerObjectImplementation*) impl)->setLotsRemaining(lots);
}

void PlayerObjectAdapter::setFactionStatus(unsigned int status) {
	return ((PlayerObjectImplementation*) impl)->setFactionStatus(status);
}

ZoneClientSession* PlayerObjectAdapter::getClient() {
	return ((PlayerObjectImplementation*) impl)->getClient();
}

PlayerDataObject* PlayerObjectAdapter::getPlayerDataObject() {
	return ((PlayerObjectImplementation*) impl)->getPlayerDataObject();
}

unsigned long long PlayerObjectAdapter::getCharacterID() {
	return ((PlayerObjectImplementation*) impl)->getCharacterID();
}

String& PlayerObjectAdapter::getFirstName() {
	return ((PlayerObjectImplementation*) impl)->getFirstName();
}

String& PlayerObjectAdapter::getSpouseName() {
	return ((PlayerObjectImplementation*) impl)->getSpouseName();
}

String& PlayerObjectAdapter::getBiography() {
	return ((PlayerObjectImplementation*) impl)->getBiography();
}

unsigned char PlayerObjectAdapter::getOnlineStatus() {
	return ((PlayerObjectImplementation*) impl)->getOnlineStatus();
}

unsigned char PlayerObjectAdapter::getAccessLevel() {
	return ((PlayerObjectImplementation*) impl)->getAccessLevel();
}

unsigned int PlayerObjectAdapter::getLotsRemaining() {
	return ((PlayerObjectImplementation*) impl)->getLotsRemaining();
}

unsigned int PlayerObjectAdapter::getFactionStatus() {
	return ((PlayerObjectImplementation*) impl)->getFactionStatus();
}

bool PlayerObjectAdapter::isOnline() {
	return ((PlayerObjectImplementation*) impl)->isOnline();
}

bool PlayerObjectAdapter::isOffline() {
	return ((PlayerObjectImplementation*) impl)->isOffline();
}

bool PlayerObjectAdapter::isLoading() {
	return ((PlayerObjectImplementation*) impl)->isLoading();
}

bool PlayerObjectAdapter::isLinkDead() {
	return ((PlayerObjectImplementation*) impl)->isLinkDead();
}

bool PlayerObjectAdapter::isLoggingIn() {
	return ((PlayerObjectImplementation*) impl)->isLoggingIn();
}

bool PlayerObjectAdapter::isLoggingOut() {
	return ((PlayerObjectImplementation*) impl)->isLoggingOut();
}

bool PlayerObjectAdapter::isPrivileged() {
	return ((PlayerObjectImplementation*) impl)->isPrivileged();
}

bool PlayerObjectAdapter::isOnLeave() {
	return ((PlayerObjectImplementation*) impl)->isOnLeave();
}

bool PlayerObjectAdapter::isCovert() {
	return ((PlayerObjectImplementation*) impl)->isCovert();
}

bool PlayerObjectAdapter::isOvert() {
	return ((PlayerObjectImplementation*) impl)->isOvert();
}

/*
 *	PlayerObjectHelper
 */

PlayerObjectHelper* PlayerObjectHelper::staticInitializer = PlayerObjectHelper::instance();

PlayerObjectHelper::PlayerObjectHelper() {
	className = "PlayerObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerObjectHelper::finalizeHelper() {
	PlayerObjectHelper::finalize();
}

DistributedObject* PlayerObjectHelper::instantiateObject() {
	return new PlayerObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerObjectAdapter((PlayerObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerObjectServant
 */

PlayerObjectServant::PlayerObjectServant(unsigned long long objid) : CreatureObjectImplementation(objid) {
	_classHelper = PlayerObjectHelper::instance();
}

PlayerObjectServant::~PlayerObjectServant() {
}

void PlayerObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerObject*) stub;
	CreatureObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerObjectServant::_getStub() {
	return _this;
}

