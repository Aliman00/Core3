/*
 *	server/zone/objects/tangible/creature/player/PlayerObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef PLAYEROBJECT_H_
#define PLAYEROBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/StandaloneBaseMessage.h"

class CreatureObject;

class Zone;

class ZoneClientSession;

class PlayerDataObject;

#include "../CreatureObject.h"

class PlayerObject : public CreatureObject {
public:
	PlayerObject(unsigned long long objid, PlayerDataObject* playerdata);

	void insertToZone(Zone* zne);

	void notifySceneReady();

	void sendTo(PlayerObject* player, bool close = true);

	void sendToOwner(bool close = true);

	void sendMessage(BaseMessage* msg);

	void sendMessage(StandaloneBaseMessage* msg);

	void setClient(ZoneClientSession* client);

	void setPlayerDataObject(PlayerDataObject* plyo);

	void setCharacterID(unsigned long long characterid);

	void setFirstName(const String& fname);

	void setSpouseName(const String& sname);

	void setBiography(const String& bio);

	void setOnlineStatus(unsigned char status);

	void setAccessLevel(unsigned char level);

	void setLotsRemaining(unsigned int lots);

	void setFactionStatus(unsigned int status);

	ZoneClientSession* getClient();

	PlayerDataObject* getPlayerDataObject();

	unsigned long long getCharacterID();

	String& getFirstName();

	String& getSpouseName();

	String& getBiography();

	unsigned char getOnlineStatus();

	unsigned char getAccessLevel();

	unsigned int getLotsRemaining();

	unsigned int getFactionStatus();

	bool isOnline();

	bool isOffline();

	bool isLoading();

	bool isLinkDead();

	bool isLoggingIn();

	bool isLoggingOut();

	bool isPrivileged();

	bool isOnLeave();

	bool isCovert();

	bool isOvert();

protected:
	PlayerObject(DummyConstructorParameter* param);

	virtual ~PlayerObject();

	String _return_getBiography;
	String _return_getFirstName;
	String _return_getSpouseName;

	friend class PlayerObjectHelper;
};

class PlayerObjectImplementation;

class PlayerObjectAdapter : public CreatureObjectAdapter {
public:
	PlayerObjectAdapter(PlayerObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void insertToZone(Zone* zne);

	void notifySceneReady();

	void sendTo(PlayerObject* player, bool close);

	void sendToOwner(bool close);

	void sendMessage(BaseMessage* msg);

	void sendMessage(StandaloneBaseMessage* msg);

	void setClient(ZoneClientSession* client);

	void setPlayerDataObject(PlayerDataObject* plyo);

	void setCharacterID(unsigned long long characterid);

	void setFirstName(const String& fname);

	void setSpouseName(const String& sname);

	void setBiography(const String& bio);

	void setOnlineStatus(unsigned char status);

	void setAccessLevel(unsigned char level);

	void setLotsRemaining(unsigned int lots);

	void setFactionStatus(unsigned int status);

	ZoneClientSession* getClient();

	PlayerDataObject* getPlayerDataObject();

	unsigned long long getCharacterID();

	String& getFirstName();

	String& getSpouseName();

	String& getBiography();

	unsigned char getOnlineStatus();

	unsigned char getAccessLevel();

	unsigned int getLotsRemaining();

	unsigned int getFactionStatus();

	bool isOnline();

	bool isOffline();

	bool isLoading();

	bool isLinkDead();

	bool isLoggingIn();

	bool isLoggingOut();

	bool isPrivileged();

	bool isOnLeave();

	bool isCovert();

	bool isOvert();

protected:
	String _param0_setFirstName__String_;
	String _param0_setSpouseName__String_;
	String _param0_setBiography__String_;
};

class PlayerObjectHelper : public DistributedObjectClassHelper, public Singleton<PlayerObjectHelper> {
	static PlayerObjectHelper* staticInitializer;

public:
	PlayerObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<PlayerObjectHelper>;
};

#include "../CreatureObjectImplementation.h"

class PlayerObjectServant : public CreatureObjectImplementation {
public:
	PlayerObject* _this;

public:
	PlayerObjectServant(unsigned long long objid);
	virtual ~PlayerObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*PLAYEROBJECT_H_*/
