/*
 *	server/zone/objects/static/StaticObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "../../Zone.h"

#include "StaticObject.h"

#include "StaticObjectImplementation.h"

/*
 *	StaticObjectStub
 */

StaticObject::StaticObject() : SceneObject(NULL) {
}

StaticObject::StaticObject(DistributedObjectServant* obj) : SceneObject(obj) {
}

StaticObject::StaticObject(StaticObject& ref) : SceneObject(ref) {
}

StaticObject::~StaticObject() {
}

StaticObject* StaticObject::clone() {
	return new StaticObject(*this);
}


void StaticObject::insertToZone(Zone* zone) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((StaticObjectImplementation*) _impl)->insertToZone(zone);
}

void StaticObject::removeFromZone() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((StaticObjectImplementation*) _impl)->removeFromZone();
}

void StaticObject::close(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((StaticObjectImplementation*) _impl)->close(player);
}

void StaticObject::sendTo(Player* player, bool doClose) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((StaticObjectImplementation*) _impl)->sendTo(player, doClose);
}

/*
 *	StaticObjectAdapter
 */

StaticObjectAdapter::StaticObjectAdapter(StaticObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* StaticObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 7:
		removeFromZone();
		break;
	case 8:
		close((Player*) inv->getObjectParameter());
		break;
	case 9:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StaticObjectAdapter::insertToZone(Zone* zone) {
	return ((StaticObjectImplementation*) impl)->insertToZone(zone);
}

void StaticObjectAdapter::removeFromZone() {
	return ((StaticObjectImplementation*) impl)->removeFromZone();
}

void StaticObjectAdapter::close(Player* player) {
	return ((StaticObjectImplementation*) impl)->close(player);
}

void StaticObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((StaticObjectImplementation*) impl)->sendTo(player, doClose);
}

/*
 *	StaticObjectHelper
 */

StaticObjectHelper::StaticObjectHelper() {
	className = "StaticObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StaticObjectHelper::finalizeHelper() {
	StaticObjectHelper::finalize();
}

DistributedObject* StaticObjectHelper::instantiateObject() {
	return new StaticObject();
}

DistributedObjectAdapter* StaticObjectHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new StaticObjectAdapter((StaticObjectImplementation*) obj);

	DistributedObjectStub* stub = new StaticObject(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	StaticObjectServant
 */

StaticObjectServant::StaticObjectServant(unsigned long long oid) : SceneObjectImplementation(oid) {
	_classHelper = StaticObjectHelper::instance();
}

StaticObjectServant::~StaticObjectServant() {
}

void StaticObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (StaticObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* StaticObjectServant::_getStub() {
	return _this;
}

