/*
 *	server/zone/objects/staticobject/StaticObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "StaticObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/util/u3d/Quaternion.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "engine/util/Observer.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "engine/stm/TransactionalReference.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	StaticObjectStub
 */

enum {RPC_SENDBASELINESTO__SCENEOBJECT_};

StaticObject::StaticObject() : SceneObject(DummyConstructorParameter::instance()) {
	StaticObjectImplementation* _implementation = new StaticObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

StaticObject::StaticObject(DummyConstructorParameter* param) : SceneObject(param) {
}

StaticObject::~StaticObject() {
}


void StaticObject::loadTemplateData(SharedObjectTemplate* templateData) {
	StaticObjectImplementation* _implementation = (StaticObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void StaticObject::sendBaselinesTo(SceneObject* player) {
	StaticObjectImplementation* _implementation = (StaticObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

DistributedObjectServant* StaticObject::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void StaticObject::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<StaticObjectImplementation*>(servant));
}

/*
 *	StaticObjectImplementation
 */

StaticObjectImplementation::StaticObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


StaticObjectImplementation::~StaticObjectImplementation() {
}


void StaticObjectImplementation::finalize() {
}

void StaticObjectImplementation::_initializeImplementation() {
	_setClassHelper(StaticObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void StaticObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StaticObject*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StaticObjectImplementation::_getStub() {
	return _this;
}

StaticObjectImplementation::operator const StaticObject*() {
	return _this;
}

Object* StaticObjectImplementation::clone() {
	return dynamic_cast<Object*>(new StaticObjectImplementation(*this));
}


void StaticObjectImplementation::lock(bool doLock) {
}

void StaticObjectImplementation::lock(ManagedObject* obj) {
}

void StaticObjectImplementation::rlock(bool doLock) {
}

void StaticObjectImplementation::wlock(bool doLock) {
}

void StaticObjectImplementation::wlock(ManagedObject* obj) {
}

void StaticObjectImplementation::unlock(bool doLock) {
}

void StaticObjectImplementation::runlock(bool doLock) {
}

void StaticObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("StaticObject");

}

void StaticObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(StaticObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StaticObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SceneObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void StaticObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StaticObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StaticObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + SceneObjectImplementation::writeObjectMembers(stream);
}

StaticObjectImplementation::StaticObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/staticobject/StaticObject.idl():  		Logger.setLoggingName("StaticObject");
	Logger::setLoggingName("StaticObject");
	// server/zone/objects/staticobject/StaticObject.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/staticobject/StaticObject.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void StaticObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/staticobject/StaticObject.idl():  		super.loadTemplateData(templateData);
	SceneObjectImplementation::loadTemplateData(templateData);
}

/*
 *	StaticObjectAdapter
 */

StaticObjectAdapter::StaticObjectAdapter(StaticObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* StaticObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StaticObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((StaticObjectImplementation*) impl)->sendBaselinesTo(player);
}

/*
 *	StaticObjectHelper
 */

StaticObjectHelper* StaticObjectHelper::staticInitializer = StaticObjectHelper::instance();

StaticObjectHelper::StaticObjectHelper() {
	className = "StaticObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void StaticObjectHelper::finalizeHelper() {
	StaticObjectHelper::finalize();
}

DistributedObject* StaticObjectHelper::instantiateObject() {
	return new StaticObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* StaticObjectHelper::instantiateServant() {
	return new StaticObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StaticObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StaticObjectAdapter((StaticObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

