/*
 *	server/zone/objects/creature/CreatureObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "CreatureObject.h"

#include "CreatureObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../tangible/Inventory.h"

#include "../tangible/Container.h"

#include "../tangible/TangibleObject.h"

#include "../tangible/weapons/Weapon.h"

#include "../tangible/wearables/Armor.h"

#include "../group/GroupObject.h"

#include "../player/Player.h"

#include "../building/BuildingObject.h"

#include "../creature/mount/MountCreature.h"

#include "../guild/Guild.h"

#include "skills/Skill.h"

/*
 *	CreatureObjectStub
 */

CreatureObject::CreatureObject(unsigned long long oid) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new CreatureObjectImplementation(oid);
	_impl->_setStub(this);
}

CreatureObject::CreatureObject(DummyConstructorParameter* param) : SceneObject(param) {
}

CreatureObject::~CreatureObject() {
}

void CreatureObject::info(const string& message, bool forcedLog) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(message);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->info(message, forcedLog);
}

void CreatureObject::sendItemsTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendItemsTo(player);
}

void CreatureObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendTo(player, doClose);
}

void CreatureObject::sendDestroyTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendDestroyTo(player);
}

void CreatureObject::doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(defender);
		method.addUnsignedIntParameter(animcrc);
		method.addBooleanParameter(hit);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doCombatAnimation(defender, animcrc, hit);
}

void CreatureObject::doAnimation(const string& anim) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(anim);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doAnimation(anim);
}

void CreatureObject::playEffect(const string& file, const string& aux) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->playEffect(file, aux);
}

void CreatureObject::showFlyText(const string& file, const string& aux, unsigned char red, unsigned char green, unsigned char blue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);
		method.addUnsignedCharParameter(red);
		method.addUnsignedCharParameter(green);
		method.addUnsignedCharParameter(blue);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->showFlyText(file, aux, red, green, blue);
}

void CreatureObject::sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const string& skill, bool areaSpam) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(defender);
		method.addObjectParameter(item);
		method.addUnsignedIntParameter(damage);
		method.addAsciiParameter(skill);
		method.addBooleanParameter(areaSpam);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendCombatSpam(defender, item, damage, skill, areaSpam);
}

void CreatureObject::addDamage(CreatureObject* creature, unsigned int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(creature);
		method.addUnsignedIntParameter(damage);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addDamage(creature, damage);
}

unsigned int CreatureObject::getDamage(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(creature);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDamage(creature);
}

bool CreatureObject::isLootOwner(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isLootOwner(creature);
}

unsigned int CreatureObject::getMitigation(const string& mit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(mit);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMitigation(mit);
}

bool CreatureObject::isIncapacitated() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isIncapacitated();
}

bool CreatureObject::isDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDead();
}

bool CreatureObject::isKnockedDown() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKnockedDown();
}

bool CreatureObject::isKneeled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKneeled();
}

bool CreatureObject::isProne() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isProne();
}

bool CreatureObject::isInCombat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInCombat();
}

bool CreatureObject::isDizzied() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDizzied();
}

bool CreatureObject::isStunned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isStunned();
}

bool CreatureObject::isBlinded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBlinded();
}

bool CreatureObject::isIntimidated() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isIntimidated();
}

bool CreatureObject::isDiseased() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDiseased();
}

bool CreatureObject::isPoisoned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPoisoned();
}

bool CreatureObject::isBleeding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBleeding();
}

bool CreatureObject::isOnFire() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOnFire();
}

bool CreatureObject::isMounted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMounted();
}

bool CreatureObject::isRidingCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRidingCreature();
}

bool CreatureObject::isMeditating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMeditating();
}

bool CreatureObject::isPeaced() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPeaced();
}

void CreatureObject::updateKnockdownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateKnockdownRecovery();
}

void CreatureObject::updateMood(const string& md) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addAsciiParameter(md);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateMood(md);
}

bool CreatureObject::checkKnockdownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkKnockdownRecovery();
}

void CreatureObject::updatePostureDownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updatePostureDownRecovery();
}

void CreatureObject::updatePostureUpRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updatePostureUpRecovery();
}

bool CreatureObject::checkPostureDownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkPostureDownRecovery();
}

bool CreatureObject::checkPostureUpRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkPostureUpRecovery();
}

void CreatureObject::setCombatState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCombatState();
}

void CreatureObject::clearCombatState(bool removedefenders) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addBooleanParameter(removedefenders);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearCombatState(removedefenders);
}

void CreatureObject::setDefender(CreatureObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefender(defender);
}

void CreatureObject::addDefender(CreatureObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addDefender(defender);
}

void CreatureObject::removeDefenders() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeDefenders();
}

void CreatureObject::removeDefender(CreatureObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeDefender(defender);
}

bool CreatureObject::hasDefender(CreatureObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addObjectParameter(defender);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasDefender(defender);
}

bool CreatureObject::setState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->setState(state);
}

bool CreatureObject::clearState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->clearState(state);
}

void CreatureObject::updateStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateStates();
}

void CreatureObject::clearStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearStates();
}

float CreatureObject::calculateBFRatio() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->calculateBFRatio();
}

void CreatureObject::resetHAMBars() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->resetHAMBars();
}

bool CreatureObject::changeHAMBars(int hp, int ap, int mp, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addSignedIntParameter(hp);
		method.addSignedIntParameter(ap);
		method.addSignedIntParameter(mp);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHAMBars(hp, ap, mp, forcedChange);
}

bool CreatureObject::changeHAMWounds(int hpwnd, int apwnd, int mpwnd, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);
		method.addSignedIntParameter(hpwnd);
		method.addSignedIntParameter(apwnd);
		method.addSignedIntParameter(mpwnd);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHAMWounds(hpwnd, apwnd, mpwnd, forcedChange);
}

void CreatureObject::changeMaxHAMBars(int hp, int ap, int mp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);
		method.addSignedIntParameter(hp);
		method.addSignedIntParameter(ap);
		method.addSignedIntParameter(mp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxHAMBars(hp, ap, mp);
}

bool CreatureObject::takeHealthDamage(int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);
		method.addSignedIntParameter(damage);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->takeHealthDamage(damage);
}

bool CreatureObject::takeActionDamage(int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);
		method.addSignedIntParameter(damage);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->takeActionDamage(damage);
}

bool CreatureObject::takeMindDamage(int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);
		method.addSignedIntParameter(damage);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->takeMindDamage(damage);
}

bool CreatureObject::changeHealthWoundsBar(int wounds, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);
		method.addSignedIntParameter(wounds);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHealthWoundsBar(wounds, forcedChange);
}

bool CreatureObject::changeActionWoundsBar(int wounds, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addSignedIntParameter(wounds);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeActionWoundsBar(wounds, forcedChange);
}

bool CreatureObject::changeMindWoundsBar(int wounds, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);
		method.addSignedIntParameter(wounds);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeMindWoundsBar(wounds, forcedChange);
}

bool CreatureObject::changeHealthBar(int hp, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);
		method.addSignedIntParameter(hp);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHealthBar(hp, forcedChange);
}

bool CreatureObject::changeStrengthBar(int st, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);
		method.addSignedIntParameter(st);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStrengthBar(st, forcedChange);
}

bool CreatureObject::changeConstitutionBar(int cs, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);
		method.addSignedIntParameter(cs);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeConstitutionBar(cs, forcedChange);
}

void CreatureObject::changeMaxHealthBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxHealthBar(hp);
}

void CreatureObject::changeMaxStrengthBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxStrengthBar(hp);
}

void CreatureObject::changeMaxConstitutionBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxConstitutionBar(hp);
}

void CreatureObject::changeShockWounds(int bf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);
		method.addSignedIntParameter(bf);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeShockWounds(bf);
}

bool CreatureObject::changeActionBar(int ap, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);
		method.addSignedIntParameter(ap);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeActionBar(ap, forcedChange);
}

bool CreatureObject::changeQuicknessBar(int qc, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);
		method.addSignedIntParameter(qc);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeQuicknessBar(qc, forcedChange);
}

bool CreatureObject::changeStaminaBar(int st, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);
		method.addSignedIntParameter(st);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStaminaBar(st, forcedChange);
}

void CreatureObject::changeMaxActionBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxActionBar(hp);
}

void CreatureObject::changeMaxQuicknessBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxQuicknessBar(hp);
}

void CreatureObject::changeMaxStaminaBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxStaminaBar(hp);
}

bool CreatureObject::changeMindBar(int mp, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);
		method.addSignedIntParameter(mp);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeMindBar(mp, forcedChange);
}

bool CreatureObject::changeFocusBar(int fc, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);
		method.addSignedIntParameter(fc);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeFocusBar(fc, forcedChange);
}

bool CreatureObject::changeWillpowerBar(int wl, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);
		method.addSignedIntParameter(wl);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeWillpowerBar(wl, forcedChange);
}

void CreatureObject::changeMaxMindBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxMindBar(hp);
}

void CreatureObject::changeMaxFocusBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxFocusBar(hp);
}

void CreatureObject::changeMaxWillpowerBar(int hp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxWillpowerBar(hp);
}

bool CreatureObject::hasAttackDelay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasAttackDelay();
}

void CreatureObject::clearAttackDelay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearAttackDelay();
}

void CreatureObject::activateBurstRun() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateBurstRun();
}

bool CreatureObject::hasQueuedState(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasQueuedState(skillCRC);
}

bool CreatureObject::removeQueuedState(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->removeQueuedState(skillCRC);
}

bool CreatureObject::addQueuedState(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->addQueuedState(skillCRC);
}

void CreatureObject::setMeditateState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMeditateState();
}

bool CreatureObject::isGuilded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isGuilded();
}

void CreatureObject::removeGroup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeGroup();
}

bool CreatureObject::isInAGroup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInAGroup();
}

void CreatureObject::setGroupID(unsigned long long gid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);
		method.addUnsignedLongParameter(gid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGroupID(gid);
}

void CreatureObject::updateGroupId(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 96);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupId(id);
}

void CreatureObject::updateGroupInviterId(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 97);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupInviterId(id);
}

void CreatureObject::setDefenderID(long long did) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 98);
		method.addSignedLongParameter(did);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefenderID(did);
}

void CreatureObject::updateTarget(unsigned long long targ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 99);
		method.addUnsignedLongParameter(targ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateTarget(targ);
}

void CreatureObject::updateTarget(SceneObject* targ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 100);
		method.addObjectParameter(targ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateTarget(targ);
}

void CreatureObject::setActionCounter(unsigned int actioncntr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 101);
		method.addUnsignedIntParameter(actioncntr);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionCounter(actioncntr);
}

void CreatureObject::setWeapon(Weapon* wep) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 102);
		method.addObjectParameter(wep);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWeapon(wep);
}

void CreatureObject::setCreatureLinkID(unsigned long long creatureID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 103);
		method.addUnsignedLongParameter(creatureID);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureLinkID(creatureID);
}

void CreatureObject::setAccuracy(int acc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 104);
		method.addSignedIntParameter(acc);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAccuracy(acc);
}

void CreatureObject::setDamageBonus(int bonus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 105);
		method.addSignedIntParameter(bonus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDamageBonus(bonus);
}

void CreatureObject::setDefenseBonus(int bonus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 106);
		method.addSignedIntParameter(bonus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefenseBonus(bonus);
}

void CreatureObject::setLastMovementUpdateStamp(unsigned int tme) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 107);
		method.addUnsignedIntParameter(tme);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLastMovementUpdateStamp(tme);
}

void CreatureObject::setIgnoreMovementTests(int times) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 108);
		method.addSignedIntParameter(times);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setIgnoreMovementTests(times);
}

void CreatureObject::setLevel(unsigned int lvl) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 109);
		method.addUnsignedIntParameter(lvl);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLevel(lvl);
}

void CreatureObject::updateServerMovementStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 110);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateServerMovementStamp();
}

SceneObject* CreatureObject::getInventoryItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 111);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInventoryItem(oid);
}

void CreatureObject::removeInventoryItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 112);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeInventoryItem(oid);
}

SceneObject* CreatureObject::getLootItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 113);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootItem(oid);
}

void CreatureObject::removeLootItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 114);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeLootItem(oid);
}

void CreatureObject::broadcastMessage(BaseMessage* msg, int range, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 115);
		method.addObjectParameter(msg);
		method.addSignedIntParameter(range);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->broadcastMessage(msg, range, doLock);
}

void CreatureObject::broadcastMessage(StandaloneBaseMessage* msg, int range, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 116);
		method.addObjectParameter(msg);
		method.addSignedIntParameter(range);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->broadcastMessage(msg, range, doLock);
}

Inventory* CreatureObject::getInventory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 117);

		return (Inventory*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInventory();
}

Container* CreatureObject::getLootContainer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 118);

		return (Container*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootContainer();
}

unsigned long long CreatureObject::getNewItemID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 119);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewItemID();
}

Weapon* CreatureObject::getWeapon() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 120);

		return (Weapon*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeapon();
}

Armor* CreatureObject::getArmor(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 121);
		method.addSignedIntParameter(type);

		return (Armor*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmor(type);
}

void CreatureObject::addSkill(Skill* skill) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->addSkill(skill);
}

int CreatureObject::getSkillMod(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 122);
		method.addAsciiParameter(name);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillMod(name);
}

bool CreatureObject::hasSkillMod(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 123);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkillMod(name);
}

int CreatureObject::getSkillModBonus(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 124);
		method.addAsciiParameter(name);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModBonus(name);
}

bool CreatureObject::hasSkillModBonus(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 125);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkillModBonus(name);
}

int CreatureObject::getAccuracy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 126);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAccuracy();
}

int CreatureObject::getDefenseBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 127);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenseBonus();
}

int CreatureObject::getDamageBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 128);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDamageBonus();
}

int CreatureObject::getConditionDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 129);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConditionDamage();
}

int CreatureObject::getMaxCondition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 130);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxCondition();
}

int CreatureObject::getCondition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 131);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCondition();
}

MountCreature* CreatureObject::getMount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 132);

		return (MountCreature*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMount();
}

unsigned long long CreatureObject::getLastServerMovementStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 133);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLastServerMovementStamp();
}

unsigned long long CreatureObject::getCreatureLinkID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 134);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureLinkID();
}

float CreatureObject::getDistanceTo(CreatureObject* targetCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 135);
		method.addObjectParameter(targetCreature);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDistanceTo(targetCreature);
}

float CreatureObject::getHeight() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 136);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHeight();
}

unsigned int CreatureObject::getCreatureSkillsCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 137);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureSkillsCount();
}

unsigned int CreatureObject::getNewCreatureSkillsCount(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 138);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewCreatureSkillsCount(cnt);
}

unsigned int CreatureObject::getLastMovementUpdateStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 139);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLastMovementUpdateStamp();
}

int CreatureObject::getIgnoreMovementTests() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 140);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getIgnoreMovementTests();
}

unsigned int CreatureObject::getDefenderListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 141);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenderListSize();
}

CreatureObject* CreatureObject::getDefender(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 142);
		method.addSignedIntParameter(idx);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefender(idx);
}

unsigned int CreatureObject::getLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 143);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLevel();
}

int CreatureObject::getCenteredBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 144);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCenteredBonus();
}

void CreatureObject::sendSystemMessage(const string& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 145);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 146);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addUnsignedLongParameter(targetid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObject::addInventoryItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 147);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addInventoryItem(item);
}

void CreatureObject::addLootItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 148);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addLootItem(item);
}

void CreatureObject::startDancing(const string& anim, bool changeDance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 149);
		method.addAsciiParameter(anim);
		method.addBooleanParameter(changeDance);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startDancing(anim, changeDance);
}

void CreatureObject::startPlayingMusic(const string& anim, bool changeDance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 150);
		method.addAsciiParameter(anim);
		method.addBooleanParameter(changeDance);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startPlayingMusic(anim, changeDance);
}

void CreatureObject::startWatch(unsigned long long entid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 151);
		method.addUnsignedLongParameter(entid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startWatch(entid);
}

void CreatureObject::startListen(unsigned long long entid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 152);
		method.addUnsignedLongParameter(entid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startListen(entid);
}

void CreatureObject::stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 153);
		method.addUnsignedLongParameter(entid);
		method.addBooleanParameter(doSendPackets);
		method.addBooleanParameter(forced);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopWatch(entid, doSendPackets, forced, doLock);
}

void CreatureObject::stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 154);
		method.addUnsignedLongParameter(entid);
		method.addBooleanParameter(doSendPackets);
		method.addBooleanParameter(forced);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopListen(entid, doSendPackets, forced, doLock);
}

bool CreatureObject::isPlayingMusic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 155);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPlayingMusic();
}

bool CreatureObject::isDancing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 156);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDancing();
}

void CreatureObject::stopDancing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 157);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopDancing();
}

void CreatureObject::stopPlayingMusic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 158);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopPlayingMusic();
}

void CreatureObject::addListener(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 159);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addListener(creature);
}

void CreatureObject::addWatcher(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 160);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addWatcher(creature);
}

void CreatureObject::removeListener(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 161);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeListener(creature);
}

void CreatureObject::removeWatcher(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 162);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeWatcher(creature);
}

void CreatureObject::doFlourish(const string& modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 163);
		method.addAsciiParameter(modifier);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doFlourish(modifier);
}

void CreatureObject::doPerformanceAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 164);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doPerformanceAction();
}

void CreatureObject::doEntertainerPatronEffects(bool healShock, bool healWounds, bool addBuff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 165);
		method.addBooleanParameter(healShock);
		method.addBooleanParameter(healWounds);
		method.addBooleanParameter(addBuff);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doEntertainerPatronEffects(healShock, healWounds, addBuff);
}

void CreatureObject::activateRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 166);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateRecovery();
}

int CreatureObject::getCreatureSkillsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 167);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureSkillsSize();
}

string& CreatureObject::getSkill(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 168);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSkill);
		return _return_getSkill;
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkill(idx);
}

bool CreatureObject::hasSkill(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 169);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkill(skillCRC);
}

void CreatureObject::mountCreature(MountCreature* mnt, bool lockMount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 170);
		method.addObjectParameter(mnt);
		method.addBooleanParameter(lockMount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->mountCreature(mnt, lockMount);
}

void CreatureObject::dismount(bool lockMount, bool ignoreCooldown) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 171);
		method.addBooleanParameter(lockMount);
		method.addBooleanParameter(ignoreCooldown);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->dismount(lockMount, ignoreCooldown);
}

void CreatureObject::addCashCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 172);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addCashCredits(credits);
}

void CreatureObject::addBankCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 173);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addBankCredits(credits);
}

void CreatureObject::updateCashCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 174);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateCashCredits(credits);
}

void CreatureObject::updateBankCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 175);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateBankCredits(credits);
}

void CreatureObject::subtractCashCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 176);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->subtractCashCredits(credits);
}

void CreatureObject::subtractBankCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 177);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->subtractBankCredits(credits);
}

void CreatureObject::setCashCredits(int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 178);
		method.addSignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCashCredits(credits);
}

void CreatureObject::setBankCredits(int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 179);
		method.addSignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBankCredits(credits);
}

void CreatureObject::applyBuff(const string& type, int value, float duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 180);
		method.addAsciiParameter(type);
		method.addSignedIntParameter(value);
		method.addFloatParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->applyBuff(type, value, duration);
}

bool CreatureObject::verifyCashCredits(unsigned int creditsToRemove) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 181);
		method.addUnsignedIntParameter(creditsToRemove);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->verifyCashCredits(creditsToRemove);
}

bool CreatureObject::verifyBankCredits(unsigned int creditsToRemove) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 182);
		method.addUnsignedIntParameter(creditsToRemove);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->verifyBankCredits(creditsToRemove);
}

bool CreatureObject::isOnFullHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 183);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOnFullHealth();
}

bool CreatureObject::hasStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 184);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasStates();
}

bool CreatureObject::hasState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 185);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasState(state);
}

bool CreatureObject::hasWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 186);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasWounds();
}

bool CreatureObject::hasShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 187);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasShockWounds();
}

bool CreatureObject::isAttackable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 188);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackable();
}

bool CreatureObject::isAttackableBy(CreatureObject* attacker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 189);
		method.addObjectParameter(attacker);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackableBy(attacker);
}

bool CreatureObject::isListening() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 190);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isListening();
}

bool CreatureObject::isWatching() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 191);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isWatching();
}

unicode& CreatureObject::getCharacterName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 192);

		method.executeWithUnicodeReturn(_return_getCharacterName);
		return _return_getCharacterName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCharacterName();
}

string& CreatureObject::getStfName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 193);

		method.executeWithAsciiReturn(_return_getStfName);
		return _return_getStfName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getStfName();
}

string& CreatureObject::getSpeciesName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 194);

		method.executeWithAsciiReturn(_return_getSpeciesName);
		return _return_getSpeciesName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpeciesName();
}

string& CreatureObject::getRaceName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 195);

		method.executeWithAsciiReturn(_return_getRaceName);
		return _return_getRaceName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getRaceName();
}

string& CreatureObject::getTerrainName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 196);

		method.executeWithAsciiReturn(_return_getTerrainName);
		return _return_getTerrainName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getTerrainName();
}

void CreatureObject::getCharacterApperance(string& appearance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 197);
		method.addAsciiParameter(appearance);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->getCharacterApperance(appearance);
}

bool CreatureObject::isOvert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 198);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOvert();
}

unsigned long long CreatureObject::getStateBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 199);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStateBitmask();
}

unsigned int CreatureObject::getCreatureBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 200);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureBitmask();
}

unsigned char CreatureObject::getPosture() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 201);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPosture();
}

unsigned int CreatureObject::getFaction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 202);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFaction();
}

bool CreatureObject::isRebel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 203);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRebel();
}

bool CreatureObject::isNeutral() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 204);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isNeutral();
}

bool CreatureObject::isImperial() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 205);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isImperial();
}

unsigned int CreatureObject::getPvpStatusBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 206);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPvpStatusBitmask();
}

unsigned int CreatureObject::getBankCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 207);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankCredits();
}

unsigned int CreatureObject::getCashCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 208);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCashCredits();
}

unsigned int CreatureObject::getWoundsUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 209);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObject::getNewWoundsUpdateCounter(int upd) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 210);
		method.addSignedIntParameter(upd);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewWoundsUpdateCounter(upd);
}

unsigned int CreatureObject::getBaseHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 211);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealth();
}

unsigned int CreatureObject::getBaseStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 212);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseStrength();
}

unsigned int CreatureObject::getBaseConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 213);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseConstitution();
}

unsigned int CreatureObject::getBaseAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 214);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseAction();
}

unsigned int CreatureObject::getBaseQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 215);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseQuickness();
}

unsigned int CreatureObject::getBaseStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 216);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseStamina();
}

unsigned int CreatureObject::getBaseMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 217);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseMind();
}

unsigned int CreatureObject::getBaseFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 218);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseFocus();
}

unsigned int CreatureObject::getBaseWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 219);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseWillpower();
}

unsigned int CreatureObject::getHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 220);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealth();
}

unsigned int CreatureObject::getStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 221);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrength();
}

unsigned int CreatureObject::getConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 222);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitution();
}

unsigned int CreatureObject::getAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 223);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAction();
}

unsigned int CreatureObject::getQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 224);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuickness();
}

unsigned int CreatureObject::getStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 225);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStamina();
}

unsigned int CreatureObject::getMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 226);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMind();
}

unsigned int CreatureObject::getFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 227);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocus();
}

unsigned int CreatureObject::getWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 228);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpower();
}

unsigned int CreatureObject::getHealthMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 229);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthMax();
}

unsigned int CreatureObject::getStrengthMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 230);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrengthMax();
}

unsigned int CreatureObject::getConstitutionMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 231);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitutionMax();
}

unsigned int CreatureObject::getActionMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 232);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionMax();
}

unsigned int CreatureObject::getQuicknessMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 233);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuicknessMax();
}

unsigned int CreatureObject::getStaminaMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 234);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStaminaMax();
}

unsigned int CreatureObject::getMindMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 235);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindMax();
}

unsigned int CreatureObject::getFocusMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 236);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocusMax();
}

unsigned int CreatureObject::getWillpowerMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 237);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpowerMax();
}

unsigned int CreatureObject::getArmor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 238);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmor();
}

float CreatureObject::getArmorResist(int resistType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 239);
		method.addSignedIntParameter(resistType);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmorResist(resistType);
}

unsigned int CreatureObject::getHealthWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 240);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthWounds();
}

unsigned int CreatureObject::getActionWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 241);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionWounds();
}

unsigned int CreatureObject::getMindWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 242);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindWounds();
}

unsigned int CreatureObject::getShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 243);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getShockWounds();
}

unsigned int CreatureObject::getHAMUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 244);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMUpdateCounter();
}

unsigned int CreatureObject::getNewHAMUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 245);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMUpdateCounter(cnt);
}

unsigned int CreatureObject::getHAMMaxUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 246);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMMaxUpdateCounter();
}

unsigned int CreatureObject::getNewHAMMaxUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 247);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMMaxUpdateCounter(cnt);
}

unsigned int CreatureObject::getHealthEncumbrance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 248);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthEncumbrance();
}

unsigned int CreatureObject::getActionEncumbrance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 249);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionEncumbrance();
}

unsigned int CreatureObject::getMindEncumbrance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 250);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindEncumbrance();
}

unsigned long long CreatureObject::getTargetID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 251);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTargetID();
}

SceneObject* CreatureObject::getTarget() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 252);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTarget();
}

unsigned long long CreatureObject::getWeaponID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 253);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponID();
}

unsigned long long CreatureObject::getGroupID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 254);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupID();
}

unsigned long long CreatureObject::getGuildID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 255);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildID();
}

Guild* CreatureObject::getGuild() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 256);

		return (Guild*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuild();
}

float CreatureObject::getSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 257);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpeed();
}

float CreatureObject::getAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 258);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAcceleration();
}

unsigned long long CreatureObject::getDefenderID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 259);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenderID();
}

unsigned int CreatureObject::getDefenderUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 260);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenderUpdateCounter();
}

unsigned int CreatureObject::getNewDefenderUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 261);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewDefenderUpdateCounter(cnt);
}

string& CreatureObject::getPerformanceAnimation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 262);

		method.executeWithAsciiReturn(_return_getPerformanceAnimation);
		return _return_getPerformanceAnimation;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceAnimation();
}

unsigned int CreatureObject::getPerformanceCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 263);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceCounter();
}

unsigned int CreatureObject::getInstrumentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 264);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentID();
}

string& CreatureObject::getPerformanceName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 265);

		method.executeWithAsciiReturn(_return_getPerformanceName);
		return _return_getPerformanceName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceName();
}

string& CreatureObject::getMood() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 266);

		method.executeWithAsciiReturn(_return_getMood);
		return _return_getMood;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMood();
}

unsigned char CreatureObject::getMoodID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 267);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodID();
}

unsigned long long CreatureObject::getGroupInviterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 268);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviterID();
}

unsigned long long CreatureObject::getGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 269);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviteCounter();
}

unsigned long long CreatureObject::getNewGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 270);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewGroupInviteCounter();
}

unsigned long long CreatureObject::getWatchID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 271);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWatchID();
}

unsigned long long CreatureObject::getListenID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 272);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getListenID();
}

bool CreatureObject::isInBuilding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 273);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInBuilding();
}

int CreatureObject::getBuildingType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 274);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBuildingType();
}

string& CreatureObject::getGuildName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 275);

		method.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildName();
}

int CreatureObject::getWeaponSpeedModifier() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 276);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponSpeedModifier();
}

unsigned int CreatureObject::getSkillBoxesUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 277);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillBoxesUpdateCounter();
}

unsigned int CreatureObject::getSkillModsCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 278);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModsCounter();
}

unsigned int CreatureObject::getNewSkillModsCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 279);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewSkillModsCounter(cnt);
}

void CreatureObject::setBaseHealth(unsigned int health) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 280);
		method.addUnsignedIntParameter(health);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseHealth(health);
}

void CreatureObject::setBaseStrength(unsigned int strength) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 281);
		method.addUnsignedIntParameter(strength);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStrength(strength);
}

void CreatureObject::setBaseConstitution(unsigned int constituition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 282);
		method.addUnsignedIntParameter(constituition);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseConstitution(constituition);
}

void CreatureObject::setBaseAction(unsigned int action) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 283);
		method.addUnsignedIntParameter(action);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseAction(action);
}

void CreatureObject::setBaseQuickness(unsigned int quickness) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 284);
		method.addUnsignedIntParameter(quickness);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseQuickness(quickness);
}

void CreatureObject::setBaseStamina(unsigned int stamina) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 285);
		method.addUnsignedIntParameter(stamina);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStamina(stamina);
}

void CreatureObject::setBaseMind(unsigned int mind) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 286);
		method.addUnsignedIntParameter(mind);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseMind(mind);
}

void CreatureObject::setBaseFocus(unsigned int focus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 287);
		method.addUnsignedIntParameter(focus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseFocus(focus);
}

void CreatureObject::setBaseWillpower(unsigned int willpower) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 288);
		method.addUnsignedIntParameter(willpower);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseWillpower(willpower);
}

void CreatureObject::setHealth(unsigned int health) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 289);
		method.addUnsignedIntParameter(health);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealth(health);
}

void CreatureObject::setStrength(unsigned int strength) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 290);
		method.addUnsignedIntParameter(strength);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrength(strength);
}

void CreatureObject::setConstitution(unsigned int constituition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 291);
		method.addUnsignedIntParameter(constituition);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitution(constituition);
}

void CreatureObject::setAction(unsigned int action) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 292);
		method.addUnsignedIntParameter(action);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAction(action);
}

void CreatureObject::setQuickness(unsigned int quickness) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 293);
		method.addUnsignedIntParameter(quickness);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuickness(quickness);
}

void CreatureObject::setStamina(unsigned int stamina) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 294);
		method.addUnsignedIntParameter(stamina);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStamina(stamina);
}

void CreatureObject::setMind(unsigned int mind) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 295);
		method.addUnsignedIntParameter(mind);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMind(mind);
}

void CreatureObject::setFocus(unsigned int focus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 296);
		method.addUnsignedIntParameter(focus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocus(focus);
}

void CreatureObject::setWillpower(unsigned int willpower) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 297);
		method.addUnsignedIntParameter(willpower);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpower(willpower);
}

void CreatureObject::setHealthMax(unsigned int health) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 298);
		method.addUnsignedIntParameter(health);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthMax(health);
}

void CreatureObject::setStrengthMax(unsigned int strength) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 299);
		method.addUnsignedIntParameter(strength);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrengthMax(strength);
}

void CreatureObject::setConstitutionMax(unsigned int constituition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 300);
		method.addUnsignedIntParameter(constituition);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitutionMax(constituition);
}

void CreatureObject::setActionMax(unsigned int action) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 301);
		method.addUnsignedIntParameter(action);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionMax(action);
}

void CreatureObject::setQuicknessMax(unsigned int quickness) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 302);
		method.addUnsignedIntParameter(quickness);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuicknessMax(quickness);
}

void CreatureObject::setStaminaMax(unsigned int stamina) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 303);
		method.addUnsignedIntParameter(stamina);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStaminaMax(stamina);
}

void CreatureObject::setMindMax(unsigned int mind) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 304);
		method.addUnsignedIntParameter(mind);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindMax(mind);
}

void CreatureObject::setFocusMax(unsigned int focus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 305);
		method.addUnsignedIntParameter(focus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocusMax(focus);
}

void CreatureObject::setWillpowerMax(unsigned int willpower) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 306);
		method.addUnsignedIntParameter(willpower);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpowerMax(willpower);
}

void CreatureObject::setArmor(unsigned int ar) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 307);
		method.addUnsignedIntParameter(ar);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setArmor(ar);
}

void CreatureObject::setHealthWounds(unsigned int wounds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 308);
		method.addUnsignedIntParameter(wounds);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthWounds(wounds);
}

void CreatureObject::setActionWounds(unsigned int wounds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 309);
		method.addUnsignedIntParameter(wounds);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionWounds(wounds);
}

void CreatureObject::setMindWounds(unsigned int wounds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 310);
		method.addUnsignedIntParameter(wounds);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindWounds(wounds);
}

void CreatureObject::setShockWounds(unsigned int wounds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 311);
		method.addUnsignedIntParameter(wounds);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setShockWounds(wounds);
}

void CreatureObject::setWoundsUpdateCounter(unsigned int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 312);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWoundsUpdateCounter(count);
}

void CreatureObject::setSpeed(float spd) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 313);
		method.addFloatParameter(spd);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setSpeed(spd);
}

void CreatureObject::setAcceleration(float acc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 314);
		method.addFloatParameter(acc);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAcceleration(acc);
}

void CreatureObject::setKinetic(float kin) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 315);
		method.addFloatParameter(kin);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setKinetic(kin);
}

void CreatureObject::setEnergy(float ene) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 316);
		method.addFloatParameter(ene);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setEnergy(ene);
}

void CreatureObject::setElectricity(float ele) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 317);
		method.addFloatParameter(ele);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setElectricity(ele);
}

void CreatureObject::setStun(float stu) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 318);
		method.addFloatParameter(stu);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStun(stu);
}

void CreatureObject::setBlast(float bla) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 319);
		method.addFloatParameter(bla);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBlast(bla);
}

void CreatureObject::setHeat(float hea) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 320);
		method.addFloatParameter(hea);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeat(hea);
}

void CreatureObject::setCold(float col) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 321);
		method.addFloatParameter(col);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCold(col);
}

void CreatureObject::setAcid(float aci) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 322);
		method.addFloatParameter(aci);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAcid(aci);
}

void CreatureObject::setLightSaber(float lig) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 323);
		method.addFloatParameter(lig);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLightSaber(lig);
}

void CreatureObject::changeConditionDamage(int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 324);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeConditionDamage(amount);
}

void CreatureObject::setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 325);
		method.addUnsignedCharParameter(state);
		method.addBooleanParameter(overrideDizzy);
		method.addBooleanParameter(objectInteraction);
		method.addFloatParameter(objX);
		method.addFloatParameter(objY);
		method.addFloatParameter(objZ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPosture(state, overrideDizzy, objectInteraction, objX, objY, objZ);
}

void CreatureObject::setPvpStatusBitmask(unsigned int mask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 326);
		method.addUnsignedIntParameter(mask);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPvpStatusBitmask(mask);
}

void CreatureObject::setDizziedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 327);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDizziedState();
}

void CreatureObject::setStunnedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 328);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStunnedState();
}

void CreatureObject::setBlindedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 329);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBlindedState();
}

void CreatureObject::setIntimidatedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 330);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setIntimidatedState();
}

void CreatureObject::setPoisonedState(int str, int type, int duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 331);
		method.addSignedIntParameter(str);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPoisonedState(str, type, duration);
}

void CreatureObject::setBleedingState(int str, int type, int duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 332);
		method.addSignedIntParameter(str);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBleedingState(str, type, duration);
}

void CreatureObject::setDiseasedState(int str, int type, int duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 333);
		method.addSignedIntParameter(str);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDiseasedState(str, type, duration);
}

void CreatureObject::setOnFireState(int str, int type, int duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 334);
		method.addSignedIntParameter(str);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setOnFireState(str, type, duration);
}

bool CreatureObject::setNextAttackDelay(int del) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 335);
		method.addSignedIntParameter(del);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->setNextAttackDelay(del);
}

void CreatureObject::setCharacterName(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 336);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterName(name);
}

void CreatureObject::setCharacterName(const unicode& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 337);
		method.addUnicodeParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterName(name);
}

void CreatureObject::setTerrainName(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 338);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTerrainName(name);
}

void CreatureObject::setCharacterApperance(string& cust) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 339);
		method.addAsciiParameter(cust);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterApperance(cust);
}

void CreatureObject::setRaceName(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 340);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setRaceName(name);
}

void CreatureObject::setSpeciesName(const string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 341);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setSpeciesName(name);
}

void CreatureObject::setFaction(unsigned int fac) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 342);
		method.addUnsignedIntParameter(fac);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFaction(fac);
}

void CreatureObject::setHeight(float h) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 343);
		method.addFloatParameter(h);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeight(h);
}

void CreatureObject::setMood(unsigned char mdid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 344);
		method.addUnsignedCharParameter(mdid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(mdid);
}

void CreatureObject::setMood(const string& m) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 345);
		method.addAsciiParameter(m);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(m);
}

void CreatureObject::setGroup(GroupObject* Group) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 346);
		method.addObjectParameter(Group);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGroup(Group);
}

void CreatureObject::setMount(MountCreature* mount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 347);
		method.addObjectParameter(mount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMount(mount);
}

/*
 *	CreatureObjectAdapter
 */

CreatureObjectAdapter::CreatureObjectAdapter(CreatureObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* CreatureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		info(inv->getAsciiParameter(_param0_info__string_bool_), inv->getBooleanParameter());
		break;
	case 7:
		sendItemsTo((Player*) inv->getObjectParameter());
		break;
	case 8:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 9:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 10:
		doCombatAnimation((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 11:
		doAnimation(inv->getAsciiParameter(_param0_doAnimation__string_));
		break;
	case 12:
		playEffect(inv->getAsciiParameter(_param0_playEffect__string_string_), inv->getAsciiParameter(_param1_playEffect__string_string_));
		break;
	case 13:
		showFlyText(inv->getAsciiParameter(_param0_showFlyText__string_string_char_char_char_), inv->getAsciiParameter(_param1_showFlyText__string_string_char_char_char_), inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter());
		break;
	case 14:
		sendCombatSpam((CreatureObject*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_sendCombatSpam__CreatureObject_TangibleObject_int_string_bool_), inv->getBooleanParameter());
		break;
	case 15:
		addDamage((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 16:
		resp->insertInt(getDamage((CreatureObject*) inv->getObjectParameter()));
		break;
	case 17:
		resp->insertBoolean(isLootOwner((CreatureObject*) inv->getObjectParameter()));
		break;
	case 18:
		resp->insertInt(getMitigation(inv->getAsciiParameter(_param0_getMitigation__string_)));
		break;
	case 19:
		resp->insertBoolean(isIncapacitated());
		break;
	case 20:
		resp->insertBoolean(isDead());
		break;
	case 21:
		resp->insertBoolean(isKnockedDown());
		break;
	case 22:
		resp->insertBoolean(isKneeled());
		break;
	case 23:
		resp->insertBoolean(isProne());
		break;
	case 24:
		resp->insertBoolean(isInCombat());
		break;
	case 25:
		resp->insertBoolean(isDizzied());
		break;
	case 26:
		resp->insertBoolean(isStunned());
		break;
	case 27:
		resp->insertBoolean(isBlinded());
		break;
	case 28:
		resp->insertBoolean(isIntimidated());
		break;
	case 29:
		resp->insertBoolean(isDiseased());
		break;
	case 30:
		resp->insertBoolean(isPoisoned());
		break;
	case 31:
		resp->insertBoolean(isBleeding());
		break;
	case 32:
		resp->insertBoolean(isOnFire());
		break;
	case 33:
		resp->insertBoolean(isMounted());
		break;
	case 34:
		resp->insertBoolean(isRidingCreature());
		break;
	case 35:
		resp->insertBoolean(isMeditating());
		break;
	case 36:
		resp->insertBoolean(isPeaced());
		break;
	case 37:
		updateKnockdownRecovery();
		break;
	case 38:
		updateMood(inv->getAsciiParameter(_param0_updateMood__string_));
		break;
	case 39:
		resp->insertBoolean(checkKnockdownRecovery());
		break;
	case 40:
		updatePostureDownRecovery();
		break;
	case 41:
		updatePostureUpRecovery();
		break;
	case 42:
		resp->insertBoolean(checkPostureDownRecovery());
		break;
	case 43:
		resp->insertBoolean(checkPostureUpRecovery());
		break;
	case 44:
		setCombatState();
		break;
	case 45:
		clearCombatState(inv->getBooleanParameter());
		break;
	case 46:
		setDefender((CreatureObject*) inv->getObjectParameter());
		break;
	case 47:
		addDefender((CreatureObject*) inv->getObjectParameter());
		break;
	case 48:
		removeDefenders();
		break;
	case 49:
		removeDefender((CreatureObject*) inv->getObjectParameter());
		break;
	case 50:
		resp->insertBoolean(hasDefender((CreatureObject*) inv->getObjectParameter()));
		break;
	case 51:
		resp->insertBoolean(setState(inv->getUnsignedLongParameter()));
		break;
	case 52:
		resp->insertBoolean(clearState(inv->getUnsignedLongParameter()));
		break;
	case 53:
		updateStates();
		break;
	case 54:
		clearStates();
		break;
	case 55:
		resp->insertFloat(calculateBFRatio());
		break;
	case 56:
		resetHAMBars();
		break;
	case 57:
		resp->insertBoolean(changeHAMBars(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 58:
		resp->insertBoolean(changeHAMWounds(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 59:
		changeMaxHAMBars(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 60:
		resp->insertBoolean(takeHealthDamage(inv->getSignedIntParameter()));
		break;
	case 61:
		resp->insertBoolean(takeActionDamage(inv->getSignedIntParameter()));
		break;
	case 62:
		resp->insertBoolean(takeMindDamage(inv->getSignedIntParameter()));
		break;
	case 63:
		resp->insertBoolean(changeHealthWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 64:
		resp->insertBoolean(changeActionWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 65:
		resp->insertBoolean(changeMindWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 66:
		resp->insertBoolean(changeHealthBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 67:
		resp->insertBoolean(changeStrengthBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 68:
		resp->insertBoolean(changeConstitutionBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 69:
		changeMaxHealthBar(inv->getSignedIntParameter());
		break;
	case 70:
		changeMaxStrengthBar(inv->getSignedIntParameter());
		break;
	case 71:
		changeMaxConstitutionBar(inv->getSignedIntParameter());
		break;
	case 72:
		changeShockWounds(inv->getSignedIntParameter());
		break;
	case 73:
		resp->insertBoolean(changeActionBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 74:
		resp->insertBoolean(changeQuicknessBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 75:
		resp->insertBoolean(changeStaminaBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 76:
		changeMaxActionBar(inv->getSignedIntParameter());
		break;
	case 77:
		changeMaxQuicknessBar(inv->getSignedIntParameter());
		break;
	case 78:
		changeMaxStaminaBar(inv->getSignedIntParameter());
		break;
	case 79:
		resp->insertBoolean(changeMindBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 80:
		resp->insertBoolean(changeFocusBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 81:
		resp->insertBoolean(changeWillpowerBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 82:
		changeMaxMindBar(inv->getSignedIntParameter());
		break;
	case 83:
		changeMaxFocusBar(inv->getSignedIntParameter());
		break;
	case 84:
		changeMaxWillpowerBar(inv->getSignedIntParameter());
		break;
	case 85:
		resp->insertBoolean(hasAttackDelay());
		break;
	case 86:
		clearAttackDelay();
		break;
	case 87:
		activateBurstRun();
		break;
	case 88:
		resp->insertBoolean(hasQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 89:
		resp->insertBoolean(removeQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 90:
		resp->insertBoolean(addQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 91:
		setMeditateState();
		break;
	case 92:
		resp->insertBoolean(isGuilded());
		break;
	case 93:
		removeGroup();
		break;
	case 94:
		resp->insertBoolean(isInAGroup());
		break;
	case 95:
		setGroupID(inv->getUnsignedLongParameter());
		break;
	case 96:
		updateGroupId(inv->getUnsignedLongParameter());
		break;
	case 97:
		updateGroupInviterId(inv->getUnsignedLongParameter());
		break;
	case 98:
		setDefenderID(inv->getSignedLongParameter());
		break;
	case 99:
		updateTarget(inv->getUnsignedLongParameter());
		break;
	case 100:
		updateTarget((SceneObject*) inv->getObjectParameter());
		break;
	case 101:
		setActionCounter(inv->getUnsignedIntParameter());
		break;
	case 102:
		setWeapon((Weapon*) inv->getObjectParameter());
		break;
	case 103:
		setCreatureLinkID(inv->getUnsignedLongParameter());
		break;
	case 104:
		setAccuracy(inv->getSignedIntParameter());
		break;
	case 105:
		setDamageBonus(inv->getSignedIntParameter());
		break;
	case 106:
		setDefenseBonus(inv->getSignedIntParameter());
		break;
	case 107:
		setLastMovementUpdateStamp(inv->getUnsignedIntParameter());
		break;
	case 108:
		setIgnoreMovementTests(inv->getSignedIntParameter());
		break;
	case 109:
		setLevel(inv->getUnsignedIntParameter());
		break;
	case 110:
		updateServerMovementStamp();
		break;
	case 111:
		resp->insertLong(getInventoryItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 112:
		removeInventoryItem(inv->getUnsignedLongParameter());
		break;
	case 113:
		resp->insertLong(getLootItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 114:
		removeLootItem(inv->getUnsignedLongParameter());
		break;
	case 115:
		broadcastMessage((BaseMessage*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 116:
		broadcastMessage((StandaloneBaseMessage*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 117:
		resp->insertLong(getInventory()->_getObjectID());
		break;
	case 118:
		resp->insertLong(getLootContainer()->_getObjectID());
		break;
	case 119:
		resp->insertLong(getNewItemID());
		break;
	case 120:
		resp->insertLong(getWeapon()->_getObjectID());
		break;
	case 121:
		resp->insertLong(getArmor(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 122:
		resp->insertSignedInt(getSkillMod(inv->getAsciiParameter(_param0_getSkillMod__string_)));
		break;
	case 123:
		resp->insertBoolean(hasSkillMod(inv->getAsciiParameter(_param0_hasSkillMod__string_)));
		break;
	case 124:
		resp->insertSignedInt(getSkillModBonus(inv->getAsciiParameter(_param0_getSkillModBonus__string_)));
		break;
	case 125:
		resp->insertBoolean(hasSkillModBonus(inv->getAsciiParameter(_param0_hasSkillModBonus__string_)));
		break;
	case 126:
		resp->insertSignedInt(getAccuracy());
		break;
	case 127:
		resp->insertSignedInt(getDefenseBonus());
		break;
	case 128:
		resp->insertSignedInt(getDamageBonus());
		break;
	case 129:
		resp->insertSignedInt(getConditionDamage());
		break;
	case 130:
		resp->insertSignedInt(getMaxCondition());
		break;
	case 131:
		resp->insertSignedInt(getCondition());
		break;
	case 132:
		resp->insertLong(getMount()->_getObjectID());
		break;
	case 133:
		resp->insertLong(getLastServerMovementStamp());
		break;
	case 134:
		resp->insertLong(getCreatureLinkID());
		break;
	case 135:
		resp->insertFloat(getDistanceTo((CreatureObject*) inv->getObjectParameter()));
		break;
	case 136:
		resp->insertFloat(getHeight());
		break;
	case 137:
		resp->insertInt(getCreatureSkillsCount());
		break;
	case 138:
		resp->insertInt(getNewCreatureSkillsCount(inv->getSignedIntParameter()));
		break;
	case 139:
		resp->insertInt(getLastMovementUpdateStamp());
		break;
	case 140:
		resp->insertSignedInt(getIgnoreMovementTests());
		break;
	case 141:
		resp->insertInt(getDefenderListSize());
		break;
	case 142:
		resp->insertLong(getDefender(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 143:
		resp->insertInt(getLevel());
		break;
	case 144:
		resp->insertSignedInt(getCenteredBonus());
		break;
	case 145:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_));
		break;
	case 146:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_string_long_), inv->getAsciiParameter(_param1_sendSystemMessage__string_string_long_), inv->getUnsignedLongParameter());
		break;
	case 147:
		addInventoryItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 148:
		addLootItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 149:
		startDancing(inv->getAsciiParameter(_param0_startDancing__string_bool_), inv->getBooleanParameter());
		break;
	case 150:
		startPlayingMusic(inv->getAsciiParameter(_param0_startPlayingMusic__string_bool_), inv->getBooleanParameter());
		break;
	case 151:
		startWatch(inv->getUnsignedLongParameter());
		break;
	case 152:
		startListen(inv->getUnsignedLongParameter());
		break;
	case 153:
		stopWatch(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 154:
		stopListen(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 155:
		resp->insertBoolean(isPlayingMusic());
		break;
	case 156:
		resp->insertBoolean(isDancing());
		break;
	case 157:
		stopDancing();
		break;
	case 158:
		stopPlayingMusic();
		break;
	case 159:
		addListener((CreatureObject*) inv->getObjectParameter());
		break;
	case 160:
		addWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case 161:
		removeListener((CreatureObject*) inv->getObjectParameter());
		break;
	case 162:
		removeWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case 163:
		doFlourish(inv->getAsciiParameter(_param0_doFlourish__string_));
		break;
	case 164:
		doPerformanceAction();
		break;
	case 165:
		doEntertainerPatronEffects(inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 166:
		activateRecovery();
		break;
	case 167:
		resp->insertSignedInt(getCreatureSkillsSize());
		break;
	case 168:
		resp->insertAscii(getSkill(inv->getSignedIntParameter()));
		break;
	case 169:
		resp->insertBoolean(hasSkill(inv->getUnsignedIntParameter()));
		break;
	case 170:
		mountCreature((MountCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 171:
		dismount(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 172:
		addCashCredits(inv->getUnsignedIntParameter());
		break;
	case 173:
		addBankCredits(inv->getUnsignedIntParameter());
		break;
	case 174:
		updateCashCredits(inv->getUnsignedIntParameter());
		break;
	case 175:
		updateBankCredits(inv->getUnsignedIntParameter());
		break;
	case 176:
		subtractCashCredits(inv->getUnsignedIntParameter());
		break;
	case 177:
		subtractBankCredits(inv->getUnsignedIntParameter());
		break;
	case 178:
		setCashCredits(inv->getSignedIntParameter());
		break;
	case 179:
		setBankCredits(inv->getSignedIntParameter());
		break;
	case 180:
		applyBuff(inv->getAsciiParameter(_param0_applyBuff__string_int_float_), inv->getSignedIntParameter(), inv->getFloatParameter());
		break;
	case 181:
		resp->insertBoolean(verifyCashCredits(inv->getUnsignedIntParameter()));
		break;
	case 182:
		resp->insertBoolean(verifyBankCredits(inv->getUnsignedIntParameter()));
		break;
	case 183:
		resp->insertBoolean(isOnFullHealth());
		break;
	case 184:
		resp->insertBoolean(hasStates());
		break;
	case 185:
		resp->insertBoolean(hasState(inv->getUnsignedLongParameter()));
		break;
	case 186:
		resp->insertBoolean(hasWounds());
		break;
	case 187:
		resp->insertBoolean(hasShockWounds());
		break;
	case 188:
		resp->insertBoolean(isAttackable());
		break;
	case 189:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 190:
		resp->insertBoolean(isListening());
		break;
	case 191:
		resp->insertBoolean(isWatching());
		break;
	case 192:
		resp->insertUnicode(getCharacterName());
		break;
	case 193:
		resp->insertAscii(getStfName());
		break;
	case 194:
		resp->insertAscii(getSpeciesName());
		break;
	case 195:
		resp->insertAscii(getRaceName());
		break;
	case 196:
		resp->insertAscii(getTerrainName());
		break;
	case 197:
		getCharacterApperance(inv->getAsciiParameter(_param0_getCharacterApperance__string_));
		break;
	case 198:
		resp->insertBoolean(isOvert());
		break;
	case 199:
		resp->insertLong(getStateBitmask());
		break;
	case 200:
		resp->insertInt(getCreatureBitmask());
		break;
	case 201:
		resp->insertByte(getPosture());
		break;
	case 202:
		resp->insertInt(getFaction());
		break;
	case 203:
		resp->insertBoolean(isRebel());
		break;
	case 204:
		resp->insertBoolean(isNeutral());
		break;
	case 205:
		resp->insertBoolean(isImperial());
		break;
	case 206:
		resp->insertInt(getPvpStatusBitmask());
		break;
	case 207:
		resp->insertInt(getBankCredits());
		break;
	case 208:
		resp->insertInt(getCashCredits());
		break;
	case 209:
		resp->insertInt(getWoundsUpdateCounter());
		break;
	case 210:
		resp->insertInt(getNewWoundsUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 211:
		resp->insertInt(getBaseHealth());
		break;
	case 212:
		resp->insertInt(getBaseStrength());
		break;
	case 213:
		resp->insertInt(getBaseConstitution());
		break;
	case 214:
		resp->insertInt(getBaseAction());
		break;
	case 215:
		resp->insertInt(getBaseQuickness());
		break;
	case 216:
		resp->insertInt(getBaseStamina());
		break;
	case 217:
		resp->insertInt(getBaseMind());
		break;
	case 218:
		resp->insertInt(getBaseFocus());
		break;
	case 219:
		resp->insertInt(getBaseWillpower());
		break;
	case 220:
		resp->insertInt(getHealth());
		break;
	case 221:
		resp->insertInt(getStrength());
		break;
	case 222:
		resp->insertInt(getConstitution());
		break;
	case 223:
		resp->insertInt(getAction());
		break;
	case 224:
		resp->insertInt(getQuickness());
		break;
	case 225:
		resp->insertInt(getStamina());
		break;
	case 226:
		resp->insertInt(getMind());
		break;
	case 227:
		resp->insertInt(getFocus());
		break;
	case 228:
		resp->insertInt(getWillpower());
		break;
	case 229:
		resp->insertInt(getHealthMax());
		break;
	case 230:
		resp->insertInt(getStrengthMax());
		break;
	case 231:
		resp->insertInt(getConstitutionMax());
		break;
	case 232:
		resp->insertInt(getActionMax());
		break;
	case 233:
		resp->insertInt(getQuicknessMax());
		break;
	case 234:
		resp->insertInt(getStaminaMax());
		break;
	case 235:
		resp->insertInt(getMindMax());
		break;
	case 236:
		resp->insertInt(getFocusMax());
		break;
	case 237:
		resp->insertInt(getWillpowerMax());
		break;
	case 238:
		resp->insertInt(getArmor());
		break;
	case 239:
		resp->insertFloat(getArmorResist(inv->getSignedIntParameter()));
		break;
	case 240:
		resp->insertInt(getHealthWounds());
		break;
	case 241:
		resp->insertInt(getActionWounds());
		break;
	case 242:
		resp->insertInt(getMindWounds());
		break;
	case 243:
		resp->insertInt(getShockWounds());
		break;
	case 244:
		resp->insertInt(getHAMUpdateCounter());
		break;
	case 245:
		resp->insertInt(getNewHAMUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 246:
		resp->insertInt(getHAMMaxUpdateCounter());
		break;
	case 247:
		resp->insertInt(getNewHAMMaxUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 248:
		resp->insertInt(getHealthEncumbrance());
		break;
	case 249:
		resp->insertInt(getActionEncumbrance());
		break;
	case 250:
		resp->insertInt(getMindEncumbrance());
		break;
	case 251:
		resp->insertLong(getTargetID());
		break;
	case 252:
		resp->insertLong(getTarget()->_getObjectID());
		break;
	case 253:
		resp->insertLong(getWeaponID());
		break;
	case 254:
		resp->insertLong(getGroupID());
		break;
	case 255:
		resp->insertLong(getGuildID());
		break;
	case 256:
		resp->insertLong(getGuild()->_getObjectID());
		break;
	case 257:
		resp->insertFloat(getSpeed());
		break;
	case 258:
		resp->insertFloat(getAcceleration());
		break;
	case 259:
		resp->insertLong(getDefenderID());
		break;
	case 260:
		resp->insertInt(getDefenderUpdateCounter());
		break;
	case 261:
		resp->insertInt(getNewDefenderUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 262:
		resp->insertAscii(getPerformanceAnimation());
		break;
	case 263:
		resp->insertInt(getPerformanceCounter());
		break;
	case 264:
		resp->insertInt(getInstrumentID());
		break;
	case 265:
		resp->insertAscii(getPerformanceName());
		break;
	case 266:
		resp->insertAscii(getMood());
		break;
	case 267:
		resp->insertByte(getMoodID());
		break;
	case 268:
		resp->insertLong(getGroupInviterID());
		break;
	case 269:
		resp->insertLong(getGroupInviteCounter());
		break;
	case 270:
		resp->insertLong(getNewGroupInviteCounter());
		break;
	case 271:
		resp->insertLong(getWatchID());
		break;
	case 272:
		resp->insertLong(getListenID());
		break;
	case 273:
		resp->insertBoolean(isInBuilding());
		break;
	case 274:
		resp->insertSignedInt(getBuildingType());
		break;
	case 275:
		resp->insertAscii(getGuildName());
		break;
	case 276:
		resp->insertSignedInt(getWeaponSpeedModifier());
		break;
	case 277:
		resp->insertInt(getSkillBoxesUpdateCounter());
		break;
	case 278:
		resp->insertInt(getSkillModsCounter());
		break;
	case 279:
		resp->insertInt(getNewSkillModsCounter(inv->getSignedIntParameter()));
		break;
	case 280:
		setBaseHealth(inv->getUnsignedIntParameter());
		break;
	case 281:
		setBaseStrength(inv->getUnsignedIntParameter());
		break;
	case 282:
		setBaseConstitution(inv->getUnsignedIntParameter());
		break;
	case 283:
		setBaseAction(inv->getUnsignedIntParameter());
		break;
	case 284:
		setBaseQuickness(inv->getUnsignedIntParameter());
		break;
	case 285:
		setBaseStamina(inv->getUnsignedIntParameter());
		break;
	case 286:
		setBaseMind(inv->getUnsignedIntParameter());
		break;
	case 287:
		setBaseFocus(inv->getUnsignedIntParameter());
		break;
	case 288:
		setBaseWillpower(inv->getUnsignedIntParameter());
		break;
	case 289:
		setHealth(inv->getUnsignedIntParameter());
		break;
	case 290:
		setStrength(inv->getUnsignedIntParameter());
		break;
	case 291:
		setConstitution(inv->getUnsignedIntParameter());
		break;
	case 292:
		setAction(inv->getUnsignedIntParameter());
		break;
	case 293:
		setQuickness(inv->getUnsignedIntParameter());
		break;
	case 294:
		setStamina(inv->getUnsignedIntParameter());
		break;
	case 295:
		setMind(inv->getUnsignedIntParameter());
		break;
	case 296:
		setFocus(inv->getUnsignedIntParameter());
		break;
	case 297:
		setWillpower(inv->getUnsignedIntParameter());
		break;
	case 298:
		setHealthMax(inv->getUnsignedIntParameter());
		break;
	case 299:
		setStrengthMax(inv->getUnsignedIntParameter());
		break;
	case 300:
		setConstitutionMax(inv->getUnsignedIntParameter());
		break;
	case 301:
		setActionMax(inv->getUnsignedIntParameter());
		break;
	case 302:
		setQuicknessMax(inv->getUnsignedIntParameter());
		break;
	case 303:
		setStaminaMax(inv->getUnsignedIntParameter());
		break;
	case 304:
		setMindMax(inv->getUnsignedIntParameter());
		break;
	case 305:
		setFocusMax(inv->getUnsignedIntParameter());
		break;
	case 306:
		setWillpowerMax(inv->getUnsignedIntParameter());
		break;
	case 307:
		setArmor(inv->getUnsignedIntParameter());
		break;
	case 308:
		setHealthWounds(inv->getUnsignedIntParameter());
		break;
	case 309:
		setActionWounds(inv->getUnsignedIntParameter());
		break;
	case 310:
		setMindWounds(inv->getUnsignedIntParameter());
		break;
	case 311:
		setShockWounds(inv->getUnsignedIntParameter());
		break;
	case 312:
		setWoundsUpdateCounter(inv->getUnsignedIntParameter());
		break;
	case 313:
		setSpeed(inv->getFloatParameter());
		break;
	case 314:
		setAcceleration(inv->getFloatParameter());
		break;
	case 315:
		setKinetic(inv->getFloatParameter());
		break;
	case 316:
		setEnergy(inv->getFloatParameter());
		break;
	case 317:
		setElectricity(inv->getFloatParameter());
		break;
	case 318:
		setStun(inv->getFloatParameter());
		break;
	case 319:
		setBlast(inv->getFloatParameter());
		break;
	case 320:
		setHeat(inv->getFloatParameter());
		break;
	case 321:
		setCold(inv->getFloatParameter());
		break;
	case 322:
		setAcid(inv->getFloatParameter());
		break;
	case 323:
		setLightSaber(inv->getFloatParameter());
		break;
	case 324:
		changeConditionDamage(inv->getSignedIntParameter());
		break;
	case 325:
		setPosture(inv->getUnsignedCharParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 326:
		setPvpStatusBitmask(inv->getUnsignedIntParameter());
		break;
	case 327:
		setDizziedState();
		break;
	case 328:
		setStunnedState();
		break;
	case 329:
		setBlindedState();
		break;
	case 330:
		setIntimidatedState();
		break;
	case 331:
		setPoisonedState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 332:
		setBleedingState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 333:
		setDiseasedState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 334:
		setOnFireState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 335:
		resp->insertBoolean(setNextAttackDelay(inv->getSignedIntParameter()));
		break;
	case 336:
		setCharacterName(inv->getAsciiParameter(_param0_setCharacterName__string_));
		break;
	case 337:
		setCharacterName(inv->getUnicodeParameter(_param0_setCharacterName__unicode_));
		break;
	case 338:
		setTerrainName(inv->getAsciiParameter(_param0_setTerrainName__string_));
		break;
	case 339:
		setCharacterApperance(inv->getAsciiParameter(_param0_setCharacterApperance__string_));
		break;
	case 340:
		setRaceName(inv->getAsciiParameter(_param0_setRaceName__string_));
		break;
	case 341:
		setSpeciesName(inv->getAsciiParameter(_param0_setSpeciesName__string_));
		break;
	case 342:
		setFaction(inv->getUnsignedIntParameter());
		break;
	case 343:
		setHeight(inv->getFloatParameter());
		break;
	case 344:
		setMood(inv->getUnsignedCharParameter());
		break;
	case 345:
		setMood(inv->getAsciiParameter(_param0_setMood__string_));
		break;
	case 346:
		setGroup((GroupObject*) inv->getObjectParameter());
		break;
	case 347:
		setMount((MountCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureObjectAdapter::info(const string& message, bool forcedLog) {
	return ((CreatureObjectImplementation*) impl)->info(message, forcedLog);
}

void CreatureObjectAdapter::sendItemsTo(Player* player) {
	return ((CreatureObjectImplementation*) impl)->sendItemsTo(player);
}

void CreatureObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((CreatureObjectImplementation*) impl)->sendTo(player, doClose);
}

void CreatureObjectAdapter::sendDestroyTo(Player* player) {
	return ((CreatureObjectImplementation*) impl)->sendDestroyTo(player);
}

void CreatureObjectAdapter::doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit) {
	return ((CreatureObjectImplementation*) impl)->doCombatAnimation(defender, animcrc, hit);
}

void CreatureObjectAdapter::doAnimation(const string& anim) {
	return ((CreatureObjectImplementation*) impl)->doAnimation(anim);
}

void CreatureObjectAdapter::playEffect(const string& file, const string& aux) {
	return ((CreatureObjectImplementation*) impl)->playEffect(file, aux);
}

void CreatureObjectAdapter::showFlyText(const string& file, const string& aux, unsigned char red, unsigned char green, unsigned char blue) {
	return ((CreatureObjectImplementation*) impl)->showFlyText(file, aux, red, green, blue);
}

void CreatureObjectAdapter::sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const string& skill, bool areaSpam) {
	return ((CreatureObjectImplementation*) impl)->sendCombatSpam(defender, item, damage, skill, areaSpam);
}

void CreatureObjectAdapter::addDamage(CreatureObject* creature, unsigned int damage) {
	return ((CreatureObjectImplementation*) impl)->addDamage(creature, damage);
}

unsigned int CreatureObjectAdapter::getDamage(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->getDamage(creature);
}

bool CreatureObjectAdapter::isLootOwner(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->isLootOwner(creature);
}

unsigned int CreatureObjectAdapter::getMitigation(const string& mit) {
	return ((CreatureObjectImplementation*) impl)->getMitigation(mit);
}

bool CreatureObjectAdapter::isIncapacitated() {
	return ((CreatureObjectImplementation*) impl)->isIncapacitated();
}

bool CreatureObjectAdapter::isDead() {
	return ((CreatureObjectImplementation*) impl)->isDead();
}

bool CreatureObjectAdapter::isKnockedDown() {
	return ((CreatureObjectImplementation*) impl)->isKnockedDown();
}

bool CreatureObjectAdapter::isKneeled() {
	return ((CreatureObjectImplementation*) impl)->isKneeled();
}

bool CreatureObjectAdapter::isProne() {
	return ((CreatureObjectImplementation*) impl)->isProne();
}

bool CreatureObjectAdapter::isInCombat() {
	return ((CreatureObjectImplementation*) impl)->isInCombat();
}

bool CreatureObjectAdapter::isDizzied() {
	return ((CreatureObjectImplementation*) impl)->isDizzied();
}

bool CreatureObjectAdapter::isStunned() {
	return ((CreatureObjectImplementation*) impl)->isStunned();
}

bool CreatureObjectAdapter::isBlinded() {
	return ((CreatureObjectImplementation*) impl)->isBlinded();
}

bool CreatureObjectAdapter::isIntimidated() {
	return ((CreatureObjectImplementation*) impl)->isIntimidated();
}

bool CreatureObjectAdapter::isDiseased() {
	return ((CreatureObjectImplementation*) impl)->isDiseased();
}

bool CreatureObjectAdapter::isPoisoned() {
	return ((CreatureObjectImplementation*) impl)->isPoisoned();
}

bool CreatureObjectAdapter::isBleeding() {
	return ((CreatureObjectImplementation*) impl)->isBleeding();
}

bool CreatureObjectAdapter::isOnFire() {
	return ((CreatureObjectImplementation*) impl)->isOnFire();
}

bool CreatureObjectAdapter::isMounted() {
	return ((CreatureObjectImplementation*) impl)->isMounted();
}

bool CreatureObjectAdapter::isRidingCreature() {
	return ((CreatureObjectImplementation*) impl)->isRidingCreature();
}

bool CreatureObjectAdapter::isMeditating() {
	return ((CreatureObjectImplementation*) impl)->isMeditating();
}

bool CreatureObjectAdapter::isPeaced() {
	return ((CreatureObjectImplementation*) impl)->isPeaced();
}

void CreatureObjectAdapter::updateKnockdownRecovery() {
	return ((CreatureObjectImplementation*) impl)->updateKnockdownRecovery();
}

void CreatureObjectAdapter::updateMood(const string& md) {
	return ((CreatureObjectImplementation*) impl)->updateMood(md);
}

bool CreatureObjectAdapter::checkKnockdownRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkKnockdownRecovery();
}

void CreatureObjectAdapter::updatePostureDownRecovery() {
	return ((CreatureObjectImplementation*) impl)->updatePostureDownRecovery();
}

void CreatureObjectAdapter::updatePostureUpRecovery() {
	return ((CreatureObjectImplementation*) impl)->updatePostureUpRecovery();
}

bool CreatureObjectAdapter::checkPostureDownRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkPostureDownRecovery();
}

bool CreatureObjectAdapter::checkPostureUpRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkPostureUpRecovery();
}

void CreatureObjectAdapter::setCombatState() {
	return ((CreatureObjectImplementation*) impl)->setCombatState();
}

void CreatureObjectAdapter::clearCombatState(bool removedefenders) {
	return ((CreatureObjectImplementation*) impl)->clearCombatState(removedefenders);
}

void CreatureObjectAdapter::setDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->setDefender(defender);
}

void CreatureObjectAdapter::addDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->addDefender(defender);
}

void CreatureObjectAdapter::removeDefenders() {
	return ((CreatureObjectImplementation*) impl)->removeDefenders();
}

void CreatureObjectAdapter::removeDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->removeDefender(defender);
}

bool CreatureObjectAdapter::hasDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->hasDefender(defender);
}

bool CreatureObjectAdapter::setState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->setState(state);
}

bool CreatureObjectAdapter::clearState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->clearState(state);
}

void CreatureObjectAdapter::updateStates() {
	return ((CreatureObjectImplementation*) impl)->updateStates();
}

void CreatureObjectAdapter::clearStates() {
	return ((CreatureObjectImplementation*) impl)->clearStates();
}

float CreatureObjectAdapter::calculateBFRatio() {
	return ((CreatureObjectImplementation*) impl)->calculateBFRatio();
}

void CreatureObjectAdapter::resetHAMBars() {
	return ((CreatureObjectImplementation*) impl)->resetHAMBars();
}

bool CreatureObjectAdapter::changeHAMBars(int hp, int ap, int mp, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHAMBars(hp, ap, mp, forcedChange);
}

bool CreatureObjectAdapter::changeHAMWounds(int hpwnd, int apwnd, int mpwnd, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHAMWounds(hpwnd, apwnd, mpwnd, forcedChange);
}

void CreatureObjectAdapter::changeMaxHAMBars(int hp, int ap, int mp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxHAMBars(hp, ap, mp);
}

bool CreatureObjectAdapter::takeHealthDamage(int damage) {
	return ((CreatureObjectImplementation*) impl)->takeHealthDamage(damage);
}

bool CreatureObjectAdapter::takeActionDamage(int damage) {
	return ((CreatureObjectImplementation*) impl)->takeActionDamage(damage);
}

bool CreatureObjectAdapter::takeMindDamage(int damage) {
	return ((CreatureObjectImplementation*) impl)->takeMindDamage(damage);
}

bool CreatureObjectAdapter::changeHealthWoundsBar(int wounds, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHealthWoundsBar(wounds, forcedChange);
}

bool CreatureObjectAdapter::changeActionWoundsBar(int wounds, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeActionWoundsBar(wounds, forcedChange);
}

bool CreatureObjectAdapter::changeMindWoundsBar(int wounds, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeMindWoundsBar(wounds, forcedChange);
}

bool CreatureObjectAdapter::changeHealthBar(int hp, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHealthBar(hp, forcedChange);
}

bool CreatureObjectAdapter::changeStrengthBar(int st, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStrengthBar(st, forcedChange);
}

bool CreatureObjectAdapter::changeConstitutionBar(int cs, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeConstitutionBar(cs, forcedChange);
}

void CreatureObjectAdapter::changeMaxHealthBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxHealthBar(hp);
}

void CreatureObjectAdapter::changeMaxStrengthBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxStrengthBar(hp);
}

void CreatureObjectAdapter::changeMaxConstitutionBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxConstitutionBar(hp);
}

void CreatureObjectAdapter::changeShockWounds(int bf) {
	return ((CreatureObjectImplementation*) impl)->changeShockWounds(bf);
}

bool CreatureObjectAdapter::changeActionBar(int ap, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeActionBar(ap, forcedChange);
}

bool CreatureObjectAdapter::changeQuicknessBar(int qc, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeQuicknessBar(qc, forcedChange);
}

bool CreatureObjectAdapter::changeStaminaBar(int st, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStaminaBar(st, forcedChange);
}

void CreatureObjectAdapter::changeMaxActionBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxActionBar(hp);
}

void CreatureObjectAdapter::changeMaxQuicknessBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxQuicknessBar(hp);
}

void CreatureObjectAdapter::changeMaxStaminaBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxStaminaBar(hp);
}

bool CreatureObjectAdapter::changeMindBar(int mp, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeMindBar(mp, forcedChange);
}

bool CreatureObjectAdapter::changeFocusBar(int fc, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeFocusBar(fc, forcedChange);
}

bool CreatureObjectAdapter::changeWillpowerBar(int wl, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeWillpowerBar(wl, forcedChange);
}

void CreatureObjectAdapter::changeMaxMindBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxMindBar(hp);
}

void CreatureObjectAdapter::changeMaxFocusBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxFocusBar(hp);
}

void CreatureObjectAdapter::changeMaxWillpowerBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxWillpowerBar(hp);
}

bool CreatureObjectAdapter::hasAttackDelay() {
	return ((CreatureObjectImplementation*) impl)->hasAttackDelay();
}

void CreatureObjectAdapter::clearAttackDelay() {
	return ((CreatureObjectImplementation*) impl)->clearAttackDelay();
}

void CreatureObjectAdapter::activateBurstRun() {
	return ((CreatureObjectImplementation*) impl)->activateBurstRun();
}

bool CreatureObjectAdapter::hasQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->hasQueuedState(skillCRC);
}

bool CreatureObjectAdapter::removeQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->removeQueuedState(skillCRC);
}

bool CreatureObjectAdapter::addQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->addQueuedState(skillCRC);
}

void CreatureObjectAdapter::setMeditateState() {
	return ((CreatureObjectImplementation*) impl)->setMeditateState();
}

bool CreatureObjectAdapter::isGuilded() {
	return ((CreatureObjectImplementation*) impl)->isGuilded();
}

void CreatureObjectAdapter::removeGroup() {
	return ((CreatureObjectImplementation*) impl)->removeGroup();
}

bool CreatureObjectAdapter::isInAGroup() {
	return ((CreatureObjectImplementation*) impl)->isInAGroup();
}

void CreatureObjectAdapter::setGroupID(unsigned long long gid) {
	return ((CreatureObjectImplementation*) impl)->setGroupID(gid);
}

void CreatureObjectAdapter::updateGroupId(unsigned long long id) {
	return ((CreatureObjectImplementation*) impl)->updateGroupId(id);
}

void CreatureObjectAdapter::updateGroupInviterId(unsigned long long id) {
	return ((CreatureObjectImplementation*) impl)->updateGroupInviterId(id);
}

void CreatureObjectAdapter::setDefenderID(long long did) {
	return ((CreatureObjectImplementation*) impl)->setDefenderID(did);
}

void CreatureObjectAdapter::updateTarget(unsigned long long targ) {
	return ((CreatureObjectImplementation*) impl)->updateTarget(targ);
}

void CreatureObjectAdapter::updateTarget(SceneObject* targ) {
	return ((CreatureObjectImplementation*) impl)->updateTarget(targ);
}

void CreatureObjectAdapter::setActionCounter(unsigned int actioncntr) {
	return ((CreatureObjectImplementation*) impl)->setActionCounter(actioncntr);
}

void CreatureObjectAdapter::setWeapon(Weapon* wep) {
	return ((CreatureObjectImplementation*) impl)->setWeapon(wep);
}

void CreatureObjectAdapter::setCreatureLinkID(unsigned long long creatureID) {
	return ((CreatureObjectImplementation*) impl)->setCreatureLinkID(creatureID);
}

void CreatureObjectAdapter::setAccuracy(int acc) {
	return ((CreatureObjectImplementation*) impl)->setAccuracy(acc);
}

void CreatureObjectAdapter::setDamageBonus(int bonus) {
	return ((CreatureObjectImplementation*) impl)->setDamageBonus(bonus);
}

void CreatureObjectAdapter::setDefenseBonus(int bonus) {
	return ((CreatureObjectImplementation*) impl)->setDefenseBonus(bonus);
}

void CreatureObjectAdapter::setLastMovementUpdateStamp(unsigned int tme) {
	return ((CreatureObjectImplementation*) impl)->setLastMovementUpdateStamp(tme);
}

void CreatureObjectAdapter::setIgnoreMovementTests(int times) {
	return ((CreatureObjectImplementation*) impl)->setIgnoreMovementTests(times);
}

void CreatureObjectAdapter::setLevel(unsigned int lvl) {
	return ((CreatureObjectImplementation*) impl)->setLevel(lvl);
}

void CreatureObjectAdapter::updateServerMovementStamp() {
	return ((CreatureObjectImplementation*) impl)->updateServerMovementStamp();
}

SceneObject* CreatureObjectAdapter::getInventoryItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getInventoryItem(oid);
}

void CreatureObjectAdapter::removeInventoryItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeInventoryItem(oid);
}

SceneObject* CreatureObjectAdapter::getLootItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getLootItem(oid);
}

void CreatureObjectAdapter::removeLootItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeLootItem(oid);
}

void CreatureObjectAdapter::broadcastMessage(BaseMessage* msg, int range, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->broadcastMessage(msg, range, doLock);
}

void CreatureObjectAdapter::broadcastMessage(StandaloneBaseMessage* msg, int range, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->broadcastMessage(msg, range, doLock);
}

Inventory* CreatureObjectAdapter::getInventory() {
	return ((CreatureObjectImplementation*) impl)->getInventory();
}

Container* CreatureObjectAdapter::getLootContainer() {
	return ((CreatureObjectImplementation*) impl)->getLootContainer();
}

unsigned long long CreatureObjectAdapter::getNewItemID() {
	return ((CreatureObjectImplementation*) impl)->getNewItemID();
}

Weapon* CreatureObjectAdapter::getWeapon() {
	return ((CreatureObjectImplementation*) impl)->getWeapon();
}

Armor* CreatureObjectAdapter::getArmor(int type) {
	return ((CreatureObjectImplementation*) impl)->getArmor(type);
}

int CreatureObjectAdapter::getSkillMod(const string& name) {
	return ((CreatureObjectImplementation*) impl)->getSkillMod(name);
}

bool CreatureObjectAdapter::hasSkillMod(const string& name) {
	return ((CreatureObjectImplementation*) impl)->hasSkillMod(name);
}

int CreatureObjectAdapter::getSkillModBonus(const string& name) {
	return ((CreatureObjectImplementation*) impl)->getSkillModBonus(name);
}

bool CreatureObjectAdapter::hasSkillModBonus(const string& name) {
	return ((CreatureObjectImplementation*) impl)->hasSkillModBonus(name);
}

int CreatureObjectAdapter::getAccuracy() {
	return ((CreatureObjectImplementation*) impl)->getAccuracy();
}

int CreatureObjectAdapter::getDefenseBonus() {
	return ((CreatureObjectImplementation*) impl)->getDefenseBonus();
}

int CreatureObjectAdapter::getDamageBonus() {
	return ((CreatureObjectImplementation*) impl)->getDamageBonus();
}

int CreatureObjectAdapter::getConditionDamage() {
	return ((CreatureObjectImplementation*) impl)->getConditionDamage();
}

int CreatureObjectAdapter::getMaxCondition() {
	return ((CreatureObjectImplementation*) impl)->getMaxCondition();
}

int CreatureObjectAdapter::getCondition() {
	return ((CreatureObjectImplementation*) impl)->getCondition();
}

MountCreature* CreatureObjectAdapter::getMount() {
	return ((CreatureObjectImplementation*) impl)->getMount();
}

unsigned long long CreatureObjectAdapter::getLastServerMovementStamp() {
	return ((CreatureObjectImplementation*) impl)->getLastServerMovementStamp();
}

unsigned long long CreatureObjectAdapter::getCreatureLinkID() {
	return ((CreatureObjectImplementation*) impl)->getCreatureLinkID();
}

float CreatureObjectAdapter::getDistanceTo(CreatureObject* targetCreature) {
	return ((CreatureObjectImplementation*) impl)->getDistanceTo(targetCreature);
}

float CreatureObjectAdapter::getHeight() {
	return ((CreatureObjectImplementation*) impl)->getHeight();
}

unsigned int CreatureObjectAdapter::getCreatureSkillsCount() {
	return ((CreatureObjectImplementation*) impl)->getCreatureSkillsCount();
}

unsigned int CreatureObjectAdapter::getNewCreatureSkillsCount(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewCreatureSkillsCount(cnt);
}

unsigned int CreatureObjectAdapter::getLastMovementUpdateStamp() {
	return ((CreatureObjectImplementation*) impl)->getLastMovementUpdateStamp();
}

int CreatureObjectAdapter::getIgnoreMovementTests() {
	return ((CreatureObjectImplementation*) impl)->getIgnoreMovementTests();
}

unsigned int CreatureObjectAdapter::getDefenderListSize() {
	return ((CreatureObjectImplementation*) impl)->getDefenderListSize();
}

CreatureObject* CreatureObjectAdapter::getDefender(int idx) {
	return ((CreatureObjectImplementation*) impl)->getDefender(idx);
}

unsigned int CreatureObjectAdapter::getLevel() {
	return ((CreatureObjectImplementation*) impl)->getLevel();
}

int CreatureObjectAdapter::getCenteredBonus() {
	return ((CreatureObjectImplementation*) impl)->getCenteredBonus();
}

void CreatureObjectAdapter::sendSystemMessage(const string& message) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObjectAdapter::addInventoryItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->addInventoryItem(item);
}

void CreatureObjectAdapter::addLootItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->addLootItem(item);
}

void CreatureObjectAdapter::startDancing(const string& anim, bool changeDance) {
	return ((CreatureObjectImplementation*) impl)->startDancing(anim, changeDance);
}

void CreatureObjectAdapter::startPlayingMusic(const string& anim, bool changeDance) {
	return ((CreatureObjectImplementation*) impl)->startPlayingMusic(anim, changeDance);
}

void CreatureObjectAdapter::startWatch(unsigned long long entid) {
	return ((CreatureObjectImplementation*) impl)->startWatch(entid);
}

void CreatureObjectAdapter::startListen(unsigned long long entid) {
	return ((CreatureObjectImplementation*) impl)->startListen(entid);
}

void CreatureObjectAdapter::stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->stopWatch(entid, doSendPackets, forced, doLock);
}

void CreatureObjectAdapter::stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->stopListen(entid, doSendPackets, forced, doLock);
}

bool CreatureObjectAdapter::isPlayingMusic() {
	return ((CreatureObjectImplementation*) impl)->isPlayingMusic();
}

bool CreatureObjectAdapter::isDancing() {
	return ((CreatureObjectImplementation*) impl)->isDancing();
}

void CreatureObjectAdapter::stopDancing() {
	return ((CreatureObjectImplementation*) impl)->stopDancing();
}

void CreatureObjectAdapter::stopPlayingMusic() {
	return ((CreatureObjectImplementation*) impl)->stopPlayingMusic();
}

void CreatureObjectAdapter::addListener(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->addListener(creature);
}

void CreatureObjectAdapter::addWatcher(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->addWatcher(creature);
}

void CreatureObjectAdapter::removeListener(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->removeListener(creature);
}

void CreatureObjectAdapter::removeWatcher(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->removeWatcher(creature);
}

void CreatureObjectAdapter::doFlourish(const string& modifier) {
	return ((CreatureObjectImplementation*) impl)->doFlourish(modifier);
}

void CreatureObjectAdapter::doPerformanceAction() {
	return ((CreatureObjectImplementation*) impl)->doPerformanceAction();
}

void CreatureObjectAdapter::doEntertainerPatronEffects(bool healShock, bool healWounds, bool addBuff) {
	return ((CreatureObjectImplementation*) impl)->doEntertainerPatronEffects(healShock, healWounds, addBuff);
}

void CreatureObjectAdapter::activateRecovery() {
	return ((CreatureObjectImplementation*) impl)->activateRecovery();
}

int CreatureObjectAdapter::getCreatureSkillsSize() {
	return ((CreatureObjectImplementation*) impl)->getCreatureSkillsSize();
}

string& CreatureObjectAdapter::getSkill(int idx) {
	return ((CreatureObjectImplementation*) impl)->getSkill(idx);
}

bool CreatureObjectAdapter::hasSkill(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->hasSkill(skillCRC);
}

void CreatureObjectAdapter::mountCreature(MountCreature* mnt, bool lockMount) {
	return ((CreatureObjectImplementation*) impl)->mountCreature(mnt, lockMount);
}

void CreatureObjectAdapter::dismount(bool lockMount, bool ignoreCooldown) {
	return ((CreatureObjectImplementation*) impl)->dismount(lockMount, ignoreCooldown);
}

void CreatureObjectAdapter::addCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->addCashCredits(credits);
}

void CreatureObjectAdapter::addBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->addBankCredits(credits);
}

void CreatureObjectAdapter::updateCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->updateCashCredits(credits);
}

void CreatureObjectAdapter::updateBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->updateBankCredits(credits);
}

void CreatureObjectAdapter::subtractCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->subtractCashCredits(credits);
}

void CreatureObjectAdapter::subtractBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->subtractBankCredits(credits);
}

void CreatureObjectAdapter::setCashCredits(int credits) {
	return ((CreatureObjectImplementation*) impl)->setCashCredits(credits);
}

void CreatureObjectAdapter::setBankCredits(int credits) {
	return ((CreatureObjectImplementation*) impl)->setBankCredits(credits);
}

void CreatureObjectAdapter::applyBuff(const string& type, int value, float duration) {
	return ((CreatureObjectImplementation*) impl)->applyBuff(type, value, duration);
}

bool CreatureObjectAdapter::verifyCashCredits(unsigned int creditsToRemove) {
	return ((CreatureObjectImplementation*) impl)->verifyCashCredits(creditsToRemove);
}

bool CreatureObjectAdapter::verifyBankCredits(unsigned int creditsToRemove) {
	return ((CreatureObjectImplementation*) impl)->verifyBankCredits(creditsToRemove);
}

bool CreatureObjectAdapter::isOnFullHealth() {
	return ((CreatureObjectImplementation*) impl)->isOnFullHealth();
}

bool CreatureObjectAdapter::hasStates() {
	return ((CreatureObjectImplementation*) impl)->hasStates();
}

bool CreatureObjectAdapter::hasState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->hasState(state);
}

bool CreatureObjectAdapter::hasWounds() {
	return ((CreatureObjectImplementation*) impl)->hasWounds();
}

bool CreatureObjectAdapter::hasShockWounds() {
	return ((CreatureObjectImplementation*) impl)->hasShockWounds();
}

bool CreatureObjectAdapter::isAttackable() {
	return ((CreatureObjectImplementation*) impl)->isAttackable();
}

bool CreatureObjectAdapter::isAttackableBy(CreatureObject* attacker) {
	return ((CreatureObjectImplementation*) impl)->isAttackableBy(attacker);
}

bool CreatureObjectAdapter::isListening() {
	return ((CreatureObjectImplementation*) impl)->isListening();
}

bool CreatureObjectAdapter::isWatching() {
	return ((CreatureObjectImplementation*) impl)->isWatching();
}

unicode& CreatureObjectAdapter::getCharacterName() {
	return ((CreatureObjectImplementation*) impl)->getCharacterName();
}

string& CreatureObjectAdapter::getStfName() {
	return ((CreatureObjectImplementation*) impl)->getStfName();
}

string& CreatureObjectAdapter::getSpeciesName() {
	return ((CreatureObjectImplementation*) impl)->getSpeciesName();
}

string& CreatureObjectAdapter::getRaceName() {
	return ((CreatureObjectImplementation*) impl)->getRaceName();
}

string& CreatureObjectAdapter::getTerrainName() {
	return ((CreatureObjectImplementation*) impl)->getTerrainName();
}

void CreatureObjectAdapter::getCharacterApperance(string& appearance) {
	return ((CreatureObjectImplementation*) impl)->getCharacterApperance(appearance);
}

bool CreatureObjectAdapter::isOvert() {
	return ((CreatureObjectImplementation*) impl)->isOvert();
}

unsigned long long CreatureObjectAdapter::getStateBitmask() {
	return ((CreatureObjectImplementation*) impl)->getStateBitmask();
}

unsigned int CreatureObjectAdapter::getCreatureBitmask() {
	return ((CreatureObjectImplementation*) impl)->getCreatureBitmask();
}

unsigned char CreatureObjectAdapter::getPosture() {
	return ((CreatureObjectImplementation*) impl)->getPosture();
}

unsigned int CreatureObjectAdapter::getFaction() {
	return ((CreatureObjectImplementation*) impl)->getFaction();
}

bool CreatureObjectAdapter::isRebel() {
	return ((CreatureObjectImplementation*) impl)->isRebel();
}

bool CreatureObjectAdapter::isNeutral() {
	return ((CreatureObjectImplementation*) impl)->isNeutral();
}

bool CreatureObjectAdapter::isImperial() {
	return ((CreatureObjectImplementation*) impl)->isImperial();
}

unsigned int CreatureObjectAdapter::getPvpStatusBitmask() {
	return ((CreatureObjectImplementation*) impl)->getPvpStatusBitmask();
}

unsigned int CreatureObjectAdapter::getBankCredits() {
	return ((CreatureObjectImplementation*) impl)->getBankCredits();
}

unsigned int CreatureObjectAdapter::getCashCredits() {
	return ((CreatureObjectImplementation*) impl)->getCashCredits();
}

unsigned int CreatureObjectAdapter::getWoundsUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewWoundsUpdateCounter(int upd) {
	return ((CreatureObjectImplementation*) impl)->getNewWoundsUpdateCounter(upd);
}

unsigned int CreatureObjectAdapter::getBaseHealth() {
	return ((CreatureObjectImplementation*) impl)->getBaseHealth();
}

unsigned int CreatureObjectAdapter::getBaseStrength() {
	return ((CreatureObjectImplementation*) impl)->getBaseStrength();
}

unsigned int CreatureObjectAdapter::getBaseConstitution() {
	return ((CreatureObjectImplementation*) impl)->getBaseConstitution();
}

unsigned int CreatureObjectAdapter::getBaseAction() {
	return ((CreatureObjectImplementation*) impl)->getBaseAction();
}

unsigned int CreatureObjectAdapter::getBaseQuickness() {
	return ((CreatureObjectImplementation*) impl)->getBaseQuickness();
}

unsigned int CreatureObjectAdapter::getBaseStamina() {
	return ((CreatureObjectImplementation*) impl)->getBaseStamina();
}

unsigned int CreatureObjectAdapter::getBaseMind() {
	return ((CreatureObjectImplementation*) impl)->getBaseMind();
}

unsigned int CreatureObjectAdapter::getBaseFocus() {
	return ((CreatureObjectImplementation*) impl)->getBaseFocus();
}

unsigned int CreatureObjectAdapter::getBaseWillpower() {
	return ((CreatureObjectImplementation*) impl)->getBaseWillpower();
}

unsigned int CreatureObjectAdapter::getHealth() {
	return ((CreatureObjectImplementation*) impl)->getHealth();
}

unsigned int CreatureObjectAdapter::getStrength() {
	return ((CreatureObjectImplementation*) impl)->getStrength();
}

unsigned int CreatureObjectAdapter::getConstitution() {
	return ((CreatureObjectImplementation*) impl)->getConstitution();
}

unsigned int CreatureObjectAdapter::getAction() {
	return ((CreatureObjectImplementation*) impl)->getAction();
}

unsigned int CreatureObjectAdapter::getQuickness() {
	return ((CreatureObjectImplementation*) impl)->getQuickness();
}

unsigned int CreatureObjectAdapter::getStamina() {
	return ((CreatureObjectImplementation*) impl)->getStamina();
}

unsigned int CreatureObjectAdapter::getMind() {
	return ((CreatureObjectImplementation*) impl)->getMind();
}

unsigned int CreatureObjectAdapter::getFocus() {
	return ((CreatureObjectImplementation*) impl)->getFocus();
}

unsigned int CreatureObjectAdapter::getWillpower() {
	return ((CreatureObjectImplementation*) impl)->getWillpower();
}

unsigned int CreatureObjectAdapter::getHealthMax() {
	return ((CreatureObjectImplementation*) impl)->getHealthMax();
}

unsigned int CreatureObjectAdapter::getStrengthMax() {
	return ((CreatureObjectImplementation*) impl)->getStrengthMax();
}

unsigned int CreatureObjectAdapter::getConstitutionMax() {
	return ((CreatureObjectImplementation*) impl)->getConstitutionMax();
}

unsigned int CreatureObjectAdapter::getActionMax() {
	return ((CreatureObjectImplementation*) impl)->getActionMax();
}

unsigned int CreatureObjectAdapter::getQuicknessMax() {
	return ((CreatureObjectImplementation*) impl)->getQuicknessMax();
}

unsigned int CreatureObjectAdapter::getStaminaMax() {
	return ((CreatureObjectImplementation*) impl)->getStaminaMax();
}

unsigned int CreatureObjectAdapter::getMindMax() {
	return ((CreatureObjectImplementation*) impl)->getMindMax();
}

unsigned int CreatureObjectAdapter::getFocusMax() {
	return ((CreatureObjectImplementation*) impl)->getFocusMax();
}

unsigned int CreatureObjectAdapter::getWillpowerMax() {
	return ((CreatureObjectImplementation*) impl)->getWillpowerMax();
}

unsigned int CreatureObjectAdapter::getArmor() {
	return ((CreatureObjectImplementation*) impl)->getArmor();
}

float CreatureObjectAdapter::getArmorResist(int resistType) {
	return ((CreatureObjectImplementation*) impl)->getArmorResist(resistType);
}

unsigned int CreatureObjectAdapter::getHealthWounds() {
	return ((CreatureObjectImplementation*) impl)->getHealthWounds();
}

unsigned int CreatureObjectAdapter::getActionWounds() {
	return ((CreatureObjectImplementation*) impl)->getActionWounds();
}

unsigned int CreatureObjectAdapter::getMindWounds() {
	return ((CreatureObjectImplementation*) impl)->getMindWounds();
}

unsigned int CreatureObjectAdapter::getShockWounds() {
	return ((CreatureObjectImplementation*) impl)->getShockWounds();
}

unsigned int CreatureObjectAdapter::getHAMUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHAMMaxUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMMaxUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMMaxUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMMaxUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHealthEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getHealthEncumbrance();
}

unsigned int CreatureObjectAdapter::getActionEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getActionEncumbrance();
}

unsigned int CreatureObjectAdapter::getMindEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getMindEncumbrance();
}

unsigned long long CreatureObjectAdapter::getTargetID() {
	return ((CreatureObjectImplementation*) impl)->getTargetID();
}

SceneObject* CreatureObjectAdapter::getTarget() {
	return ((CreatureObjectImplementation*) impl)->getTarget();
}

unsigned long long CreatureObjectAdapter::getWeaponID() {
	return ((CreatureObjectImplementation*) impl)->getWeaponID();
}

unsigned long long CreatureObjectAdapter::getGroupID() {
	return ((CreatureObjectImplementation*) impl)->getGroupID();
}

unsigned long long CreatureObjectAdapter::getGuildID() {
	return ((CreatureObjectImplementation*) impl)->getGuildID();
}

Guild* CreatureObjectAdapter::getGuild() {
	return ((CreatureObjectImplementation*) impl)->getGuild();
}

float CreatureObjectAdapter::getSpeed() {
	return ((CreatureObjectImplementation*) impl)->getSpeed();
}

float CreatureObjectAdapter::getAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getAcceleration();
}

unsigned long long CreatureObjectAdapter::getDefenderID() {
	return ((CreatureObjectImplementation*) impl)->getDefenderID();
}

unsigned int CreatureObjectAdapter::getDefenderUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getDefenderUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewDefenderUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewDefenderUpdateCounter(cnt);
}

string& CreatureObjectAdapter::getPerformanceAnimation() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceAnimation();
}

unsigned int CreatureObjectAdapter::getPerformanceCounter() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceCounter();
}

unsigned int CreatureObjectAdapter::getInstrumentID() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentID();
}

string& CreatureObjectAdapter::getPerformanceName() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceName();
}

string& CreatureObjectAdapter::getMood() {
	return ((CreatureObjectImplementation*) impl)->getMood();
}

unsigned char CreatureObjectAdapter::getMoodID() {
	return ((CreatureObjectImplementation*) impl)->getMoodID();
}

unsigned long long CreatureObjectAdapter::getGroupInviterID() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviterID();
}

unsigned long long CreatureObjectAdapter::getGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviteCounter();
}

unsigned long long CreatureObjectAdapter::getNewGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getNewGroupInviteCounter();
}

unsigned long long CreatureObjectAdapter::getWatchID() {
	return ((CreatureObjectImplementation*) impl)->getWatchID();
}

unsigned long long CreatureObjectAdapter::getListenID() {
	return ((CreatureObjectImplementation*) impl)->getListenID();
}

bool CreatureObjectAdapter::isInBuilding() {
	return ((CreatureObjectImplementation*) impl)->isInBuilding();
}

int CreatureObjectAdapter::getBuildingType() {
	return ((CreatureObjectImplementation*) impl)->getBuildingType();
}

string& CreatureObjectAdapter::getGuildName() {
	return ((CreatureObjectImplementation*) impl)->getGuildName();
}

int CreatureObjectAdapter::getWeaponSpeedModifier() {
	return ((CreatureObjectImplementation*) impl)->getWeaponSpeedModifier();
}

unsigned int CreatureObjectAdapter::getSkillBoxesUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getSkillBoxesUpdateCounter();
}

unsigned int CreatureObjectAdapter::getSkillModsCounter() {
	return ((CreatureObjectImplementation*) impl)->getSkillModsCounter();
}

unsigned int CreatureObjectAdapter::getNewSkillModsCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewSkillModsCounter(cnt);
}

void CreatureObjectAdapter::setBaseHealth(unsigned int health) {
	return ((CreatureObjectImplementation*) impl)->setBaseHealth(health);
}

void CreatureObjectAdapter::setBaseStrength(unsigned int strength) {
	return ((CreatureObjectImplementation*) impl)->setBaseStrength(strength);
}

void CreatureObjectAdapter::setBaseConstitution(unsigned int constituition) {
	return ((CreatureObjectImplementation*) impl)->setBaseConstitution(constituition);
}

void CreatureObjectAdapter::setBaseAction(unsigned int action) {
	return ((CreatureObjectImplementation*) impl)->setBaseAction(action);
}

void CreatureObjectAdapter::setBaseQuickness(unsigned int quickness) {
	return ((CreatureObjectImplementation*) impl)->setBaseQuickness(quickness);
}

void CreatureObjectAdapter::setBaseStamina(unsigned int stamina) {
	return ((CreatureObjectImplementation*) impl)->setBaseStamina(stamina);
}

void CreatureObjectAdapter::setBaseMind(unsigned int mind) {
	return ((CreatureObjectImplementation*) impl)->setBaseMind(mind);
}

void CreatureObjectAdapter::setBaseFocus(unsigned int focus) {
	return ((CreatureObjectImplementation*) impl)->setBaseFocus(focus);
}

void CreatureObjectAdapter::setBaseWillpower(unsigned int willpower) {
	return ((CreatureObjectImplementation*) impl)->setBaseWillpower(willpower);
}

void CreatureObjectAdapter::setHealth(unsigned int health) {
	return ((CreatureObjectImplementation*) impl)->setHealth(health);
}

void CreatureObjectAdapter::setStrength(unsigned int strength) {
	return ((CreatureObjectImplementation*) impl)->setStrength(strength);
}

void CreatureObjectAdapter::setConstitution(unsigned int constituition) {
	return ((CreatureObjectImplementation*) impl)->setConstitution(constituition);
}

void CreatureObjectAdapter::setAction(unsigned int action) {
	return ((CreatureObjectImplementation*) impl)->setAction(action);
}

void CreatureObjectAdapter::setQuickness(unsigned int quickness) {
	return ((CreatureObjectImplementation*) impl)->setQuickness(quickness);
}

void CreatureObjectAdapter::setStamina(unsigned int stamina) {
	return ((CreatureObjectImplementation*) impl)->setStamina(stamina);
}

void CreatureObjectAdapter::setMind(unsigned int mind) {
	return ((CreatureObjectImplementation*) impl)->setMind(mind);
}

void CreatureObjectAdapter::setFocus(unsigned int focus) {
	return ((CreatureObjectImplementation*) impl)->setFocus(focus);
}

void CreatureObjectAdapter::setWillpower(unsigned int willpower) {
	return ((CreatureObjectImplementation*) impl)->setWillpower(willpower);
}

void CreatureObjectAdapter::setHealthMax(unsigned int health) {
	return ((CreatureObjectImplementation*) impl)->setHealthMax(health);
}

void CreatureObjectAdapter::setStrengthMax(unsigned int strength) {
	return ((CreatureObjectImplementation*) impl)->setStrengthMax(strength);
}

void CreatureObjectAdapter::setConstitutionMax(unsigned int constituition) {
	return ((CreatureObjectImplementation*) impl)->setConstitutionMax(constituition);
}

void CreatureObjectAdapter::setActionMax(unsigned int action) {
	return ((CreatureObjectImplementation*) impl)->setActionMax(action);
}

void CreatureObjectAdapter::setQuicknessMax(unsigned int quickness) {
	return ((CreatureObjectImplementation*) impl)->setQuicknessMax(quickness);
}

void CreatureObjectAdapter::setStaminaMax(unsigned int stamina) {
	return ((CreatureObjectImplementation*) impl)->setStaminaMax(stamina);
}

void CreatureObjectAdapter::setMindMax(unsigned int mind) {
	return ((CreatureObjectImplementation*) impl)->setMindMax(mind);
}

void CreatureObjectAdapter::setFocusMax(unsigned int focus) {
	return ((CreatureObjectImplementation*) impl)->setFocusMax(focus);
}

void CreatureObjectAdapter::setWillpowerMax(unsigned int willpower) {
	return ((CreatureObjectImplementation*) impl)->setWillpowerMax(willpower);
}

void CreatureObjectAdapter::setArmor(unsigned int ar) {
	return ((CreatureObjectImplementation*) impl)->setArmor(ar);
}

void CreatureObjectAdapter::setHealthWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setHealthWounds(wounds);
}

void CreatureObjectAdapter::setActionWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setActionWounds(wounds);
}

void CreatureObjectAdapter::setMindWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setMindWounds(wounds);
}

void CreatureObjectAdapter::setShockWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setShockWounds(wounds);
}

void CreatureObjectAdapter::setWoundsUpdateCounter(unsigned int count) {
	return ((CreatureObjectImplementation*) impl)->setWoundsUpdateCounter(count);
}

void CreatureObjectAdapter::setSpeed(float spd) {
	return ((CreatureObjectImplementation*) impl)->setSpeed(spd);
}

void CreatureObjectAdapter::setAcceleration(float acc) {
	return ((CreatureObjectImplementation*) impl)->setAcceleration(acc);
}

void CreatureObjectAdapter::setKinetic(float kin) {
	return ((CreatureObjectImplementation*) impl)->setKinetic(kin);
}

void CreatureObjectAdapter::setEnergy(float ene) {
	return ((CreatureObjectImplementation*) impl)->setEnergy(ene);
}

void CreatureObjectAdapter::setElectricity(float ele) {
	return ((CreatureObjectImplementation*) impl)->setElectricity(ele);
}

void CreatureObjectAdapter::setStun(float stu) {
	return ((CreatureObjectImplementation*) impl)->setStun(stu);
}

void CreatureObjectAdapter::setBlast(float bla) {
	return ((CreatureObjectImplementation*) impl)->setBlast(bla);
}

void CreatureObjectAdapter::setHeat(float hea) {
	return ((CreatureObjectImplementation*) impl)->setHeat(hea);
}

void CreatureObjectAdapter::setCold(float col) {
	return ((CreatureObjectImplementation*) impl)->setCold(col);
}

void CreatureObjectAdapter::setAcid(float aci) {
	return ((CreatureObjectImplementation*) impl)->setAcid(aci);
}

void CreatureObjectAdapter::setLightSaber(float lig) {
	return ((CreatureObjectImplementation*) impl)->setLightSaber(lig);
}

void CreatureObjectAdapter::changeConditionDamage(int amount) {
	return ((CreatureObjectImplementation*) impl)->changeConditionDamage(amount);
}

void CreatureObjectAdapter::setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ) {
	return ((CreatureObjectImplementation*) impl)->setPosture(state, overrideDizzy, objectInteraction, objX, objY, objZ);
}

void CreatureObjectAdapter::setPvpStatusBitmask(unsigned int mask) {
	return ((CreatureObjectImplementation*) impl)->setPvpStatusBitmask(mask);
}

void CreatureObjectAdapter::setDizziedState() {
	return ((CreatureObjectImplementation*) impl)->setDizziedState();
}

void CreatureObjectAdapter::setStunnedState() {
	return ((CreatureObjectImplementation*) impl)->setStunnedState();
}

void CreatureObjectAdapter::setBlindedState() {
	return ((CreatureObjectImplementation*) impl)->setBlindedState();
}

void CreatureObjectAdapter::setIntimidatedState() {
	return ((CreatureObjectImplementation*) impl)->setIntimidatedState();
}

void CreatureObjectAdapter::setPoisonedState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setPoisonedState(str, type, duration);
}

void CreatureObjectAdapter::setBleedingState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setBleedingState(str, type, duration);
}

void CreatureObjectAdapter::setDiseasedState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setDiseasedState(str, type, duration);
}

void CreatureObjectAdapter::setOnFireState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setOnFireState(str, type, duration);
}

bool CreatureObjectAdapter::setNextAttackDelay(int del) {
	return ((CreatureObjectImplementation*) impl)->setNextAttackDelay(del);
}

void CreatureObjectAdapter::setCharacterName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setCharacterName(name);
}

void CreatureObjectAdapter::setCharacterName(const unicode& name) {
	return ((CreatureObjectImplementation*) impl)->setCharacterName(name);
}

void CreatureObjectAdapter::setTerrainName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setTerrainName(name);
}

void CreatureObjectAdapter::setCharacterApperance(string& cust) {
	return ((CreatureObjectImplementation*) impl)->setCharacterApperance(cust);
}

void CreatureObjectAdapter::setRaceName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setRaceName(name);
}

void CreatureObjectAdapter::setSpeciesName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setSpeciesName(name);
}

void CreatureObjectAdapter::setFaction(unsigned int fac) {
	return ((CreatureObjectImplementation*) impl)->setFaction(fac);
}

void CreatureObjectAdapter::setHeight(float h) {
	return ((CreatureObjectImplementation*) impl)->setHeight(h);
}

void CreatureObjectAdapter::setMood(unsigned char mdid) {
	return ((CreatureObjectImplementation*) impl)->setMood(mdid);
}

void CreatureObjectAdapter::setMood(const string& m) {
	return ((CreatureObjectImplementation*) impl)->setMood(m);
}

void CreatureObjectAdapter::setGroup(GroupObject* Group) {
	return ((CreatureObjectImplementation*) impl)->setGroup(Group);
}

void CreatureObjectAdapter::setMount(MountCreature* mount) {
	return ((CreatureObjectImplementation*) impl)->setMount(mount);
}

/*
 *	CreatureObjectHelper
 */

CreatureObjectHelper* CreatureObjectHelper::staticInitializer = CreatureObjectHelper::instance();

CreatureObjectHelper::CreatureObjectHelper() {
	className = "CreatureObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureObjectHelper::finalizeHelper() {
	CreatureObjectHelper::finalize();
}

DistributedObject* CreatureObjectHelper::instantiateObject() {
	return new CreatureObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureObjectAdapter((CreatureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CreatureObjectServant
 */

CreatureObjectServant::CreatureObjectServant(unsigned long long oid) : SceneObjectImplementation(oid) {
	_classHelper = CreatureObjectHelper::instance();
}

CreatureObjectServant::~CreatureObjectServant() {
}

void CreatureObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* CreatureObjectServant::_getStub() {
	return _this;
}

