/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

/*
 *	server/zone/objects/creature/CreatureObject.cpp generated by Engine3 IDL compiler 0.51
 */

#include "../scene/SceneObject.h"

#include "../tangible/Inventory.h"

#include "../tangible/Container.h"

#include "../tangible/TangibleObject.h"

#include "../tangible/weapons/Weapon.h"

#include "../tangible/wearables/Armor.h"

#include "../group/GroupObject.h"

#include "../player/Player.h"

#include "../building/BuildingObject.h"

#include "../creature/mount/MountCreature.h"

#include "../guild/Guild.h"

#include "CreatureObject.h"

#include "CreatureObjectImplementation.h"

/*
 *	CreatureObjectStub
 */

CreatureObject::CreatureObject() : SceneObject(NULL) {
}

CreatureObject::CreatureObject(ORBObjectServant* obj) : SceneObject(obj) {
}

CreatureObject::CreatureObject(CreatureObject& ref) : SceneObject(ref) {
}

CreatureObject::~CreatureObject() {
}

CreatureObject* CreatureObject::clone() {
	return new CreatureObject(*this);
}


void CreatureObject::sendItemsTo(Player* player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 6);
		invocation.addObjectParameter(player);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendItemsTo(player);
}

void CreatureObject::sendTo(Player* player, bool doClose) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 7);
		invocation.addObjectParameter(player);
		invocation.addBooleanParameter(doClose);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendTo(player, doClose);
}

void CreatureObject::sendDestroyTo(Player* player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 8);
		invocation.addObjectParameter(player);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendDestroyTo(player);
}

void CreatureObject::doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 9);
		invocation.addObjectParameter(defender);
		invocation.addUnsignedIntParameter(animcrc);
		invocation.addBooleanParameter(hit);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doCombatAnimation(defender, animcrc, hit);
}

void CreatureObject::doAnimation(const string& anim) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 10);
		invocation.addAsciiParameter(anim);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doAnimation(anim);
}

void CreatureObject::playEffect(const string& file, const string& aux) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 11);
		invocation.addAsciiParameter(file);
		invocation.addAsciiParameter(aux);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->playEffect(file, aux);
}

void CreatureObject::showFlyText(const string& file, const string& aux, unsigned char red, unsigned char green, unsigned char blue) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 12);
		invocation.addAsciiParameter(file);
		invocation.addAsciiParameter(aux);
		invocation.addUnsignedCharParameter(red);
		invocation.addUnsignedCharParameter(green);
		invocation.addUnsignedCharParameter(blue);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->showFlyText(file, aux, red, green, blue);
}

void CreatureObject::sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const string& skill, bool areaSpam) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 13);
		invocation.addObjectParameter(defender);
		invocation.addObjectParameter(item);
		invocation.addUnsignedIntParameter(damage);
		invocation.addAsciiParameter(skill);
		invocation.addBooleanParameter(areaSpam);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendCombatSpam(defender, item, damage, skill, areaSpam);
}

void CreatureObject::addDamage(CreatureObject* creature, unsigned int damage) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 14);
		invocation.addObjectParameter(creature);
		invocation.addUnsignedIntParameter(damage);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addDamage(creature, damage);
}

unsigned int CreatureObject::getDamage(CreatureObject* creature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 15);
		invocation.addObjectParameter(creature);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDamage(creature);
}

bool CreatureObject::isLootOwner(CreatureObject* creature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 16);
		invocation.addObjectParameter(creature);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isLootOwner(creature);
}

unsigned int CreatureObject::getMitigation(const string& mit) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 17);
		invocation.addAsciiParameter(mit);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMitigation(mit);
}

bool CreatureObject::isIncapacitated() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 18);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isIncapacitated();
}

bool CreatureObject::isDead() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 19);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDead();
}

bool CreatureObject::isKnockedDown() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 20);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKnockedDown();
}

bool CreatureObject::isKneeled() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 21);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKneeled();
}

bool CreatureObject::isProne() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 22);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isProne();
}

bool CreatureObject::isInCombat() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 23);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInCombat();
}

bool CreatureObject::isDizzied() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 24);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDizzied();
}

bool CreatureObject::isStunned() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 25);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isStunned();
}

bool CreatureObject::isBlinded() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 26);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBlinded();
}

bool CreatureObject::isIntimidated() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 27);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isIntimidated();
}

bool CreatureObject::isDiseased() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 28);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDiseased();
}

bool CreatureObject::isPoisoned() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 29);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPoisoned();
}

bool CreatureObject::isBleeding() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 30);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBleeding();
}

bool CreatureObject::isOnFire() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 31);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOnFire();
}

bool CreatureObject::isMounted() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 32);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMounted();
}

bool CreatureObject::isRidingCreature() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 33);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRidingCreature();
}

bool CreatureObject::isMeditating() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 34);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMeditating();
}

bool CreatureObject::isPeaced() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 35);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPeaced();
}

void CreatureObject::updateKnockdownRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 36);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateKnockdownRecovery();
}

void CreatureObject::updateMood(const string& md) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 37);
		invocation.addAsciiParameter(md);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateMood(md);
}

bool CreatureObject::checkKnockdownRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 38);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkKnockdownRecovery();
}

void CreatureObject::updatePostureDownRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 39);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updatePostureDownRecovery();
}

void CreatureObject::updatePostureUpRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 40);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updatePostureUpRecovery();
}

bool CreatureObject::checkPostureDownRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 41);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkPostureDownRecovery();
}

bool CreatureObject::checkPostureUpRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 42);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkPostureUpRecovery();
}

void CreatureObject::setCombatState() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 43);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCombatState();
}

void CreatureObject::clearCombatState(bool removedefenders) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 44);
		invocation.addBooleanParameter(removedefenders);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearCombatState(removedefenders);
}

void CreatureObject::setDefender(CreatureObject* defender) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 45);
		invocation.addObjectParameter(defender);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefender(defender);
}

void CreatureObject::addDefender(CreatureObject* defender) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 46);
		invocation.addObjectParameter(defender);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addDefender(defender);
}

void CreatureObject::removeDefenders() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 47);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeDefenders();
}

void CreatureObject::removeDefender(CreatureObject* defender) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 48);
		invocation.addObjectParameter(defender);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeDefender(defender);
}

bool CreatureObject::hasDefender(CreatureObject* defender) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 49);
		invocation.addObjectParameter(defender);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasDefender(defender);
}

bool CreatureObject::setState(unsigned long long state) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 50);
		invocation.addUnsignedLongParameter(state);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->setState(state);
}

bool CreatureObject::clearState(unsigned long long state) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 51);
		invocation.addUnsignedLongParameter(state);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->clearState(state);
}

void CreatureObject::updateStates() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 52);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateStates();
}

void CreatureObject::clearStates() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 53);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearStates();
}

float CreatureObject::calculateBFRatio() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 54);

		return invocation.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->calculateBFRatio();
}

void CreatureObject::resetHAMBars() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 55);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->resetHAMBars();
}

bool CreatureObject::changeHAMBars(int hp, int ap, int mp, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 56);
		invocation.addSignedIntParameter(hp);
		invocation.addSignedIntParameter(ap);
		invocation.addSignedIntParameter(mp);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHAMBars(hp, ap, mp, forcedChange);
}

bool CreatureObject::changeHAMWounds(int hpwnd, int apwnd, int mpwnd, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 57);
		invocation.addSignedIntParameter(hpwnd);
		invocation.addSignedIntParameter(apwnd);
		invocation.addSignedIntParameter(mpwnd);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHAMWounds(hpwnd, apwnd, mpwnd, forcedChange);
}

void CreatureObject::changeMaxHAMBars(int hp, int ap, int mp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 58);
		invocation.addSignedIntParameter(hp);
		invocation.addSignedIntParameter(ap);
		invocation.addSignedIntParameter(mp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxHAMBars(hp, ap, mp);
}

bool CreatureObject::changeHealthWoundsBar(int wounds, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 59);
		invocation.addSignedIntParameter(wounds);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHealthWoundsBar(wounds, forcedChange);
}

bool CreatureObject::changeActionWoundsBar(int wounds, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 60);
		invocation.addSignedIntParameter(wounds);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeActionWoundsBar(wounds, forcedChange);
}

bool CreatureObject::changeMindWoundsBar(int wounds, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 61);
		invocation.addSignedIntParameter(wounds);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeMindWoundsBar(wounds, forcedChange);
}

bool CreatureObject::changeHealthBar(int hp, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 62);
		invocation.addSignedIntParameter(hp);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHealthBar(hp, forcedChange);
}

bool CreatureObject::changeStrengthBar(int st, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 63);
		invocation.addSignedIntParameter(st);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStrengthBar(st, forcedChange);
}

bool CreatureObject::changeConstitutionBar(int cs, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 64);
		invocation.addSignedIntParameter(cs);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeConstitutionBar(cs, forcedChange);
}

void CreatureObject::changeMaxHealthBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 65);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxHealthBar(hp);
}

void CreatureObject::changeMaxStrengthBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 66);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxStrengthBar(hp);
}

void CreatureObject::changeMaxConstitutionBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 67);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxConstitutionBar(hp);
}

void CreatureObject::changeShockWounds(int bf) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 68);
		invocation.addSignedIntParameter(bf);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeShockWounds(bf);
}

bool CreatureObject::changeActionBar(int ap, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 69);
		invocation.addSignedIntParameter(ap);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeActionBar(ap, forcedChange);
}

bool CreatureObject::changeQuicknessBar(int qc, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 70);
		invocation.addSignedIntParameter(qc);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeQuicknessBar(qc, forcedChange);
}

bool CreatureObject::changeStaminaBar(int st, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 71);
		invocation.addSignedIntParameter(st);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStaminaBar(st, forcedChange);
}

void CreatureObject::changeMaxActionBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 72);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxActionBar(hp);
}

void CreatureObject::changeMaxQuicknessBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 73);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxQuicknessBar(hp);
}

void CreatureObject::changeMaxStaminaBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 74);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxStaminaBar(hp);
}

bool CreatureObject::changeMindBar(int mp, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 75);
		invocation.addSignedIntParameter(mp);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeMindBar(mp, forcedChange);
}

bool CreatureObject::changeFocusBar(int fc, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 76);
		invocation.addSignedIntParameter(fc);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeFocusBar(fc, forcedChange);
}

bool CreatureObject::changeWillpowerBar(int wl, bool forcedChange) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 77);
		invocation.addSignedIntParameter(wl);
		invocation.addBooleanParameter(forcedChange);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeWillpowerBar(wl, forcedChange);
}

void CreatureObject::changeMaxMindBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 78);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxMindBar(hp);
}

void CreatureObject::changeMaxFocusBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 79);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxFocusBar(hp);
}

void CreatureObject::changeMaxWillpowerBar(int hp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 80);
		invocation.addSignedIntParameter(hp);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxWillpowerBar(hp);
}

bool CreatureObject::hasAttackDelay() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 81);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasAttackDelay();
}

void CreatureObject::clearAttackDelay() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 82);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearAttackDelay();
}

bool CreatureObject::isOnFullHealth() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 83);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOnFullHealth();
}

bool CreatureObject::hasStates() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 84);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasStates();
}

bool CreatureObject::hasState(unsigned long long state) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 85);
		invocation.addUnsignedLongParameter(state);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasState(state);
}

bool CreatureObject::hasWounds() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 86);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasWounds();
}

bool CreatureObject::hasShockWounds() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 87);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasShockWounds();
}

bool CreatureObject::isAttackable() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 88);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackable();
}

bool CreatureObject::isAttackableBy(CreatureObject* attacker) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 89);
		invocation.addObjectParameter(attacker);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackableBy(attacker);
}

bool CreatureObject::isListening() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 90);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isListening();
}

bool CreatureObject::isWatching() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 91);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isWatching();
}

void CreatureObject::activateBurstRun() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 92);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateBurstRun();
}

bool CreatureObject::hasQueuedState(unsigned int skillCRC) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 93);
		invocation.addUnsignedIntParameter(skillCRC);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasQueuedState(skillCRC);
}

bool CreatureObject::removeQueuedState(unsigned int skillCRC) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 94);
		invocation.addUnsignedIntParameter(skillCRC);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->removeQueuedState(skillCRC);
}

bool CreatureObject::addQueuedState(unsigned int skillCRC) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 95);
		invocation.addUnsignedIntParameter(skillCRC);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->addQueuedState(skillCRC);
}

void CreatureObject::setMeditateState() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 96);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMeditateState();
}

bool CreatureObject::isGuilded() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 97);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isGuilded();
}

void CreatureObject::setBaseHealth(unsigned int health) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 98);
		invocation.addUnsignedIntParameter(health);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseHealth(health);
}

void CreatureObject::setBaseStrength(unsigned int strength) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 99);
		invocation.addUnsignedIntParameter(strength);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStrength(strength);
}

void CreatureObject::setBaseConstitution(unsigned int constituition) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 100);
		invocation.addUnsignedIntParameter(constituition);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseConstitution(constituition);
}

void CreatureObject::setBaseAction(unsigned int action) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 101);
		invocation.addUnsignedIntParameter(action);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseAction(action);
}

void CreatureObject::setBaseQuickness(unsigned int quickness) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 102);
		invocation.addUnsignedIntParameter(quickness);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseQuickness(quickness);
}

void CreatureObject::setBaseStamina(unsigned int stamina) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 103);
		invocation.addUnsignedIntParameter(stamina);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStamina(stamina);
}

void CreatureObject::setBaseMind(unsigned int mind) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 104);
		invocation.addUnsignedIntParameter(mind);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseMind(mind);
}

void CreatureObject::setBaseFocus(unsigned int focus) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 105);
		invocation.addUnsignedIntParameter(focus);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseFocus(focus);
}

void CreatureObject::setBaseWillpower(unsigned int willpower) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 106);
		invocation.addUnsignedIntParameter(willpower);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseWillpower(willpower);
}

void CreatureObject::setHealth(unsigned int health) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 107);
		invocation.addUnsignedIntParameter(health);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealth(health);
}

void CreatureObject::setStrength(unsigned int strength) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 108);
		invocation.addUnsignedIntParameter(strength);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrength(strength);
}

void CreatureObject::setConstitution(unsigned int constituition) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 109);
		invocation.addUnsignedIntParameter(constituition);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitution(constituition);
}

void CreatureObject::setAction(unsigned int action) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 110);
		invocation.addUnsignedIntParameter(action);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAction(action);
}

void CreatureObject::setQuickness(unsigned int quickness) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 111);
		invocation.addUnsignedIntParameter(quickness);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuickness(quickness);
}

void CreatureObject::setStamina(unsigned int stamina) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 112);
		invocation.addUnsignedIntParameter(stamina);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStamina(stamina);
}

void CreatureObject::setMind(unsigned int mind) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 113);
		invocation.addUnsignedIntParameter(mind);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMind(mind);
}

void CreatureObject::setFocus(unsigned int focus) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 114);
		invocation.addUnsignedIntParameter(focus);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocus(focus);
}

void CreatureObject::setWillpower(unsigned int willpower) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 115);
		invocation.addUnsignedIntParameter(willpower);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpower(willpower);
}

void CreatureObject::setHealthMax(unsigned int health) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 116);
		invocation.addUnsignedIntParameter(health);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthMax(health);
}

void CreatureObject::setStrengthMax(unsigned int strength) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 117);
		invocation.addUnsignedIntParameter(strength);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrengthMax(strength);
}

void CreatureObject::setConstitutionMax(unsigned int constituition) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 118);
		invocation.addUnsignedIntParameter(constituition);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitutionMax(constituition);
}

void CreatureObject::setActionMax(unsigned int action) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 119);
		invocation.addUnsignedIntParameter(action);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionMax(action);
}

void CreatureObject::setQuicknessMax(unsigned int quickness) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 120);
		invocation.addUnsignedIntParameter(quickness);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuicknessMax(quickness);
}

void CreatureObject::setStaminaMax(unsigned int stamina) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 121);
		invocation.addUnsignedIntParameter(stamina);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStaminaMax(stamina);
}

void CreatureObject::setMindMax(unsigned int mind) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 122);
		invocation.addUnsignedIntParameter(mind);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindMax(mind);
}

void CreatureObject::setFocusMax(unsigned int focus) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 123);
		invocation.addUnsignedIntParameter(focus);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocusMax(focus);
}

void CreatureObject::setWillpowerMax(unsigned int willpower) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 124);
		invocation.addUnsignedIntParameter(willpower);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpowerMax(willpower);
}

void CreatureObject::setArmor(unsigned int ar) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 125);
		invocation.addUnsignedIntParameter(ar);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setArmor(ar);
}

void CreatureObject::setHealthWounds(unsigned int wounds) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 126);
		invocation.addUnsignedIntParameter(wounds);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthWounds(wounds);
}

void CreatureObject::setActionWounds(unsigned int wounds) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 127);
		invocation.addUnsignedIntParameter(wounds);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionWounds(wounds);
}

void CreatureObject::setMindWounds(unsigned int wounds) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 128);
		invocation.addUnsignedIntParameter(wounds);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindWounds(wounds);
}

void CreatureObject::setShockWounds(unsigned int wounds) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 129);
		invocation.addUnsignedIntParameter(wounds);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setShockWounds(wounds);
}

void CreatureObject::setWoundsUpdateCounter(unsigned int count) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 130);
		invocation.addUnsignedIntParameter(count);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWoundsUpdateCounter(count);
}

void CreatureObject::changeConditionDamage(int amount) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 131);
		invocation.addSignedIntParameter(amount);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeConditionDamage(amount);
}

void CreatureObject::setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 132);
		invocation.addUnsignedCharParameter(state);
		invocation.addBooleanParameter(overrideDizzy);
		invocation.addBooleanParameter(objectInteraction);
		invocation.addFloatParameter(objX);
		invocation.addFloatParameter(objY);
		invocation.addFloatParameter(objZ);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPosture(state, overrideDizzy, objectInteraction, objX, objY, objZ);
}

void CreatureObject::setDizziedState() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 133);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDizziedState();
}

void CreatureObject::setStunnedState() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 134);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStunnedState();
}

void CreatureObject::setBlindedState() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 135);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBlindedState();
}

void CreatureObject::setIntimidatedState() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 136);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setIntimidatedState();
}

void CreatureObject::setPoisonedState(int str, int type, int duration) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 137);
		invocation.addSignedIntParameter(str);
		invocation.addSignedIntParameter(type);
		invocation.addSignedIntParameter(duration);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPoisonedState(str, type, duration);
}

void CreatureObject::setBleedingState(int str, int type, int duration) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 138);
		invocation.addSignedIntParameter(str);
		invocation.addSignedIntParameter(type);
		invocation.addSignedIntParameter(duration);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBleedingState(str, type, duration);
}

void CreatureObject::setDiseasedState(int str, int type, int duration) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 139);
		invocation.addSignedIntParameter(str);
		invocation.addSignedIntParameter(type);
		invocation.addSignedIntParameter(duration);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDiseasedState(str, type, duration);
}

void CreatureObject::setOnFireState(int str, int type, int duration) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 140);
		invocation.addSignedIntParameter(str);
		invocation.addSignedIntParameter(type);
		invocation.addSignedIntParameter(duration);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setOnFireState(str, type, duration);
}

bool CreatureObject::setNextAttackDelay(int del) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 141);
		invocation.addSignedIntParameter(del);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->setNextAttackDelay(del);
}

void CreatureObject::setCharacterName(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 142);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterName(name);
}

void CreatureObject::setCharacterName(unicode& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 143);
		invocation.addUnicodeParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterName(name);
}

void CreatureObject::setTerrainName(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 144);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTerrainName(name);
}

void CreatureObject::setCharacterApperance(string& cust) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 145);
		invocation.addAsciiParameter(cust);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterApperance(cust);
}

void CreatureObject::setRaceName(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 146);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setRaceName(name);
}

void CreatureObject::setSpeciesName(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 147);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setSpeciesName(name);
}

void CreatureObject::setFaction(unsigned int fac) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 148);
		invocation.addUnsignedIntParameter(fac);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFaction(fac);
}

void CreatureObject::setHeight(float h) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 149);
		invocation.addFloatParameter(h);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeight(h);
}

void CreatureObject::setMood(unsigned char mdid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 150);
		invocation.addUnsignedCharParameter(mdid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(mdid);
}

void CreatureObject::setMood(const string& m) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 151);
		invocation.addAsciiParameter(m);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(m);
}

void CreatureObject::setGroup(GroupObject* Group) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 152);
		invocation.addObjectParameter(Group);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGroup(Group);
}

void CreatureObject::setMount(MountCreature* mount) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 153);
		invocation.addObjectParameter(mount);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMount(mount);
}

void CreatureObject::removeGroup() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 154);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeGroup();
}

bool CreatureObject::isInAGroup() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 155);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInAGroup();
}

void CreatureObject::setGroupID(unsigned long long gid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 156);
		invocation.addUnsignedLongParameter(gid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGroupID(gid);
}

void CreatureObject::updateGroupId(unsigned long long id) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 157);
		invocation.addUnsignedLongParameter(id);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupId(id);
}

void CreatureObject::updateGroupInviterId(unsigned long long id) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 158);
		invocation.addUnsignedLongParameter(id);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupInviterId(id);
}

void CreatureObject::setDefenderID(long long did) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 159);
		invocation.addSignedLongParameter(did);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefenderID(did);
}

void CreatureObject::updateTarget(unsigned long long targ) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 160);
		invocation.addUnsignedLongParameter(targ);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateTarget(targ);
}

void CreatureObject::updateTarget(SceneObject* targ) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 161);
		invocation.addObjectParameter(targ);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateTarget(targ);
}

void CreatureObject::setActionCounter(unsigned int actioncntr) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 162);
		invocation.addUnsignedIntParameter(actioncntr);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionCounter(actioncntr);
}

void CreatureObject::setWeapon(Weapon* wep) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 163);
		invocation.addObjectParameter(wep);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWeapon(wep);
}

void CreatureObject::setCreatureLinkID(unsigned long long creatureID) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 164);
		invocation.addUnsignedLongParameter(creatureID);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureLinkID(creatureID);
}

void CreatureObject::setAccuracy(int acc) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 165);
		invocation.addSignedIntParameter(acc);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAccuracy(acc);
}

void CreatureObject::setDamageBonus(int bonus) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 166);
		invocation.addSignedIntParameter(bonus);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDamageBonus(bonus);
}

void CreatureObject::setDefenseBonus(int bonus) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 167);
		invocation.addSignedIntParameter(bonus);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefenseBonus(bonus);
}

void CreatureObject::setLastMovementUpdateStamp(unsigned int tme) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 168);
		invocation.addUnsignedIntParameter(tme);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLastMovementUpdateStamp(tme);
}

void CreatureObject::setIgnoreMovementTests(int times) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 169);
		invocation.addSignedIntParameter(times);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setIgnoreMovementTests(times);
}

void CreatureObject::setLevel(unsigned int lvl) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 170);
		invocation.addUnsignedIntParameter(lvl);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLevel(lvl);
}

void CreatureObject::updateServerMovementStamp() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 171);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateServerMovementStamp();
}

unicode& CreatureObject::getCharacterName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 172);

		invocation.executeWithUnicodeReturn(_return_getCharacterName);
		return _return_getCharacterName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCharacterName();
}

string& CreatureObject::getStfName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 173);

		invocation.executeWithAsciiReturn(_return_getStfName);
		return _return_getStfName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getStfName();
}

string& CreatureObject::getSpeciesName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 174);

		invocation.executeWithAsciiReturn(_return_getSpeciesName);
		return _return_getSpeciesName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpeciesName();
}

string& CreatureObject::getRaceName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 175);

		invocation.executeWithAsciiReturn(_return_getRaceName);
		return _return_getRaceName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getRaceName();
}

string& CreatureObject::getTerrainName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 176);

		invocation.executeWithAsciiReturn(_return_getTerrainName);
		return _return_getTerrainName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getTerrainName();
}

void CreatureObject::getCharacterApperance(string& appearance) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 177);
		invocation.addAsciiParameter(appearance);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->getCharacterApperance(appearance);
}

bool CreatureObject::isOvert() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 178);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOvert();
}

unsigned long long CreatureObject::getStateBitmask() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 179);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStateBitmask();
}

unsigned int CreatureObject::getCreatureBitmask() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 180);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureBitmask();
}

unsigned char CreatureObject::getPosture() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 181);

		return invocation.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPosture();
}

unsigned int CreatureObject::getFaction() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 182);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFaction();
}

bool CreatureObject::isRebel() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 183);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRebel();
}

bool CreatureObject::isNeutral() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 184);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isNeutral();
}

bool CreatureObject::isImperial() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 185);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isImperial();
}

unsigned int CreatureObject::getPvpStatusBitmask() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 186);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPvpStatusBitmask();
}

unsigned int CreatureObject::getBankCredits() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 187);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankCredits();
}

unsigned int CreatureObject::getCashCredits() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 188);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCashCredits();
}

unsigned int CreatureObject::getWoundsUpdateCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 189);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObject::getNewWoundsUpdateCounter(int upd) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 190);
		invocation.addSignedIntParameter(upd);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewWoundsUpdateCounter(upd);
}

unsigned int CreatureObject::getBaseHealth() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 191);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealth();
}

unsigned int CreatureObject::getBaseStrength() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 192);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseStrength();
}

unsigned int CreatureObject::getBaseConstitution() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 193);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseConstitution();
}

unsigned int CreatureObject::getBaseAction() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 194);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseAction();
}

unsigned int CreatureObject::getBaseQuickness() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 195);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseQuickness();
}

unsigned int CreatureObject::getBaseStamina() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 196);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseStamina();
}

unsigned int CreatureObject::getBaseMind() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 197);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseMind();
}

unsigned int CreatureObject::getBaseFocus() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 198);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseFocus();
}

unsigned int CreatureObject::getBaseWillpower() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 199);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseWillpower();
}

unsigned int CreatureObject::getHealth() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 200);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealth();
}

unsigned int CreatureObject::getStrength() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 201);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrength();
}

unsigned int CreatureObject::getConstitution() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 202);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitution();
}

unsigned int CreatureObject::getAction() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 203);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAction();
}

unsigned int CreatureObject::getQuickness() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 204);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuickness();
}

unsigned int CreatureObject::getStamina() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 205);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStamina();
}

unsigned int CreatureObject::getMind() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 206);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMind();
}

unsigned int CreatureObject::getFocus() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 207);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocus();
}

unsigned int CreatureObject::getWillpower() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 208);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpower();
}

unsigned int CreatureObject::getHealthMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 209);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthMax();
}

unsigned int CreatureObject::getStrengthMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 210);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrengthMax();
}

unsigned int CreatureObject::getConstitutionMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 211);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitutionMax();
}

unsigned int CreatureObject::getActionMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 212);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionMax();
}

unsigned int CreatureObject::getQuicknessMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 213);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuicknessMax();
}

unsigned int CreatureObject::getStaminaMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 214);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStaminaMax();
}

unsigned int CreatureObject::getMindMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 215);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindMax();
}

unsigned int CreatureObject::getFocusMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 216);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocusMax();
}

unsigned int CreatureObject::getWillpowerMax() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 217);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpowerMax();
}

unsigned int CreatureObject::getArmor() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 218);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmor();
}

float CreatureObject::getArmorResist(int resistType) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 219);
		invocation.addSignedIntParameter(resistType);

		return invocation.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmorResist(resistType);
}

unsigned int CreatureObject::getHealthWounds() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 220);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthWounds();
}

unsigned int CreatureObject::getActionWounds() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 221);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionWounds();
}

unsigned int CreatureObject::getMindWounds() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 222);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindWounds();
}

unsigned int CreatureObject::getShockWounds() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 223);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getShockWounds();
}

unsigned int CreatureObject::getHAMUpdateCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 224);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMUpdateCounter();
}

unsigned int CreatureObject::getNewHAMUpdateCounter(int cnt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 225);
		invocation.addSignedIntParameter(cnt);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMUpdateCounter(cnt);
}

unsigned int CreatureObject::getHAMMaxUpdateCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 226);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMMaxUpdateCounter();
}

unsigned int CreatureObject::getNewHAMMaxUpdateCounter(int cnt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 227);
		invocation.addSignedIntParameter(cnt);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMMaxUpdateCounter(cnt);
}

unsigned int CreatureObject::getHealthEncumbrance() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 228);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthEncumbrance();
}

unsigned int CreatureObject::getActionEncumbrance() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 229);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionEncumbrance();
}

unsigned int CreatureObject::getMindEncumbrance() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 230);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindEncumbrance();
}

unsigned long long CreatureObject::getTargetID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 231);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTargetID();
}

SceneObject* CreatureObject::getTarget() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 232);

		return (SceneObject*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTarget();
}

unsigned long long CreatureObject::getWeaponID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 233);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponID();
}

unsigned long long CreatureObject::getGroupID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 234);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupID();
}

unsigned long long CreatureObject::getGuildID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 235);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildID();
}

Guild* CreatureObject::getGuild() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 236);

		return (Guild*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuild();
}

float CreatureObject::getSpeed() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 237);

		return invocation.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpeed();
}

float CreatureObject::getAcceleration() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 238);

		return invocation.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAcceleration();
}

unsigned long long CreatureObject::getDefenderID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 239);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenderID();
}

unsigned int CreatureObject::getDefenderUpdateCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 240);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenderUpdateCounter();
}

unsigned int CreatureObject::getNewDefenderUpdateCounter(int cnt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 241);
		invocation.addSignedIntParameter(cnt);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewDefenderUpdateCounter(cnt);
}

string& CreatureObject::getPerformanceName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 242);

		invocation.executeWithAsciiReturn(_return_getPerformanceName);
		return _return_getPerformanceName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceName();
}

unsigned int CreatureObject::getPerformanceCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 243);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceCounter();
}

unsigned int CreatureObject::getInstrumentID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 244);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentID();
}

string& CreatureObject::getMood() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 245);

		invocation.executeWithAsciiReturn(_return_getMood);
		return _return_getMood;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMood();
}

unsigned char CreatureObject::getMoodID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 246);

		return invocation.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodID();
}

unsigned long long CreatureObject::getGroupInviterID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 247);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviterID();
}

unsigned long long CreatureObject::getGroupInviteCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 248);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviteCounter();
}

unsigned long long CreatureObject::getNewGroupInviteCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 249);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewGroupInviteCounter();
}

unsigned long long CreatureObject::getWatchID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 250);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWatchID();
}

unsigned long long CreatureObject::getListenID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 251);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getListenID();
}

string& CreatureObject::getGuildName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 252);

		invocation.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildName();
}

int CreatureObject::getWeaponSpeedModifier() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 253);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponSpeedModifier();
}

unsigned int CreatureObject::getSkillBoxesUpdateCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 254);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillBoxesUpdateCounter();
}

unsigned int CreatureObject::getSkillModsCounter() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 255);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModsCounter();
}

unsigned int CreatureObject::getNewSkillModsCounter(int cnt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 256);
		invocation.addSignedIntParameter(cnt);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewSkillModsCounter(cnt);
}

SceneObject* CreatureObject::getInventoryItem(unsigned long long oid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 257);
		invocation.addUnsignedLongParameter(oid);

		return (SceneObject*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInventoryItem(oid);
}

void CreatureObject::removeInventoryItem(unsigned long long oid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 258);
		invocation.addUnsignedLongParameter(oid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeInventoryItem(oid);
}

SceneObject* CreatureObject::getLootItem(unsigned long long oid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 259);
		invocation.addUnsignedLongParameter(oid);

		return (SceneObject*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootItem(oid);
}

void CreatureObject::removeLootItem(unsigned long long oid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 260);
		invocation.addUnsignedLongParameter(oid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeLootItem(oid);
}

void CreatureObject::broadcastMessage(BaseMessage* msg, int range, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 261);
		invocation.addObjectParameter(msg);
		invocation.addSignedIntParameter(range);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->broadcastMessage(msg, range, doLock);
}

Inventory* CreatureObject::getInventory() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 262);

		return (Inventory*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInventory();
}

Container* CreatureObject::getLootContainer() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 263);

		return (Container*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootContainer();
}

unsigned long long CreatureObject::getNewItemID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 264);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewItemID();
}

Weapon* CreatureObject::getWeapon() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 265);

		return (Weapon*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeapon();
}

Armor* CreatureObject::getArmor(int type) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 266);
		invocation.addSignedIntParameter(type);

		return (Armor*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmor(type);
}

int CreatureObject::getSkillMod(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 267);
		invocation.addAsciiParameter(name);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillMod(name);
}

bool CreatureObject::hasSkillMod(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 268);
		invocation.addAsciiParameter(name);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkillMod(name);
}

int CreatureObject::getSkillModBonus(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 269);
		invocation.addAsciiParameter(name);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModBonus(name);
}

bool CreatureObject::hasSkillModBonus(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 270);
		invocation.addAsciiParameter(name);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkillModBonus(name);
}

int CreatureObject::getAccuracy() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 271);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAccuracy();
}

int CreatureObject::getDefenseBonus() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 272);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenseBonus();
}

int CreatureObject::getDamageBonus() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 273);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDamageBonus();
}

int CreatureObject::getConditionDamage() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 274);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConditionDamage();
}

int CreatureObject::getMaxCondition() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 275);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxCondition();
}

int CreatureObject::getCondition() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 276);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCondition();
}

MountCreature* CreatureObject::getMount() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 277);

		return (MountCreature*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMount();
}

unsigned long long CreatureObject::getLastServerMovementStamp() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 278);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLastServerMovementStamp();
}

unsigned long long CreatureObject::getCreatureLinkID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 279);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureLinkID();
}

float CreatureObject::getDistanceTo(CreatureObject* targetCreature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 280);
		invocation.addObjectParameter(targetCreature);

		return invocation.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDistanceTo(targetCreature);
}

float CreatureObject::getHeight() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 281);

		return invocation.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHeight();
}

unsigned int CreatureObject::getCreatureSkillsCount() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 282);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureSkillsCount();
}

unsigned int CreatureObject::getNewCreatureSkillsCount(int cnt) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 283);
		invocation.addSignedIntParameter(cnt);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewCreatureSkillsCount(cnt);
}

unsigned int CreatureObject::getLastMovementUpdateStamp() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 284);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLastMovementUpdateStamp();
}

int CreatureObject::getIgnoreMovementTests() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 285);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getIgnoreMovementTests();
}

unsigned int CreatureObject::getDefenderListSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 286);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenderListSize();
}

CreatureObject* CreatureObject::getDefender(int idx) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 287);
		invocation.addSignedIntParameter(idx);

		return (CreatureObject*) invocation.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefender(idx);
}

unsigned int CreatureObject::getLevel() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 288);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLevel();
}

int CreatureObject::getCenteredBonus() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 289);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCenteredBonus();
}

void CreatureObject::sendSystemMessage(const string& message) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 290);
		invocation.addAsciiParameter(message);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 291);
		invocation.addAsciiParameter(file);
		invocation.addAsciiParameter(str);
		invocation.addUnsignedLongParameter(targetid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObject::addInventoryItem(TangibleObject* item) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 292);
		invocation.addObjectParameter(item);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addInventoryItem(item);
}

void CreatureObject::addLootItem(TangibleObject* item) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 293);
		invocation.addObjectParameter(item);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addLootItem(item);
}

void CreatureObject::startDancing(const string& anim) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 294);
		invocation.addAsciiParameter(anim);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startDancing(anim);
}

void CreatureObject::startPlayingMusic(const string& anim) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 295);
		invocation.addAsciiParameter(anim);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startPlayingMusic(anim);
}

void CreatureObject::startWatch(unsigned long long entid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 296);
		invocation.addUnsignedLongParameter(entid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startWatch(entid);
}

void CreatureObject::startListen(unsigned long long entid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 297);
		invocation.addUnsignedLongParameter(entid);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startListen(entid);
}

void CreatureObject::stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 298);
		invocation.addUnsignedLongParameter(entid);
		invocation.addBooleanParameter(doSendPackets);
		invocation.addBooleanParameter(forced);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopWatch(entid, doSendPackets, forced, doLock);
}

void CreatureObject::stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 299);
		invocation.addUnsignedLongParameter(entid);
		invocation.addBooleanParameter(doSendPackets);
		invocation.addBooleanParameter(forced);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopListen(entid, doSendPackets, forced, doLock);
}

bool CreatureObject::isPlayingMusic() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 300);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPlayingMusic();
}

bool CreatureObject::isDancing() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 301);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDancing();
}

void CreatureObject::stopDancing() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 302);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopDancing();
}

void CreatureObject::stopPlayingMusic() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 303);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopPlayingMusic();
}

void CreatureObject::addListener(CreatureObject* creature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 304);
		invocation.addObjectParameter(creature);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addListener(creature);
}

void CreatureObject::addWatcher(CreatureObject* creature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 305);
		invocation.addObjectParameter(creature);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addWatcher(creature);
}

void CreatureObject::removeListener(CreatureObject* creature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 306);
		invocation.addObjectParameter(creature);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeListener(creature);
}

void CreatureObject::removeWatcher(CreatureObject* creature) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 307);
		invocation.addObjectParameter(creature);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeWatcher(creature);
}

void CreatureObject::activateRecovery() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 308);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateRecovery();
}

int CreatureObject::getCreatureSkillsSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 309);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureSkillsSize();
}

string& CreatureObject::getSkill(int idx) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 310);
		invocation.addSignedIntParameter(idx);

		invocation.executeWithAsciiReturn(_return_getSkill);
		return _return_getSkill;
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkill(idx);
}

bool CreatureObject::hasSkill(unsigned int skillCRC) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 311);
		invocation.addUnsignedIntParameter(skillCRC);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkill(skillCRC);
}

void CreatureObject::mountCreature(MountCreature* mnt, bool lockMount) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 312);
		invocation.addObjectParameter(mnt);
		invocation.addBooleanParameter(lockMount);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->mountCreature(mnt, lockMount);
}

void CreatureObject::dismount(bool lockMount, bool ignoreCooldown) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 313);
		invocation.addBooleanParameter(lockMount);
		invocation.addBooleanParameter(ignoreCooldown);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->dismount(lockMount, ignoreCooldown);
}

void CreatureObject::addCashCredits(unsigned int credits) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 314);
		invocation.addUnsignedIntParameter(credits);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addCashCredits(credits);
}

void CreatureObject::addBankCredits(unsigned int credits) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 315);
		invocation.addUnsignedIntParameter(credits);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addBankCredits(credits);
}

void CreatureObject::subtractCashCredits(unsigned int credits) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 316);
		invocation.addUnsignedIntParameter(credits);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->subtractCashCredits(credits);
}

void CreatureObject::subtractBankCredits(unsigned int credits) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 317);
		invocation.addUnsignedIntParameter(credits);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->subtractBankCredits(credits);
}

void CreatureObject::setCashCredits(int credits) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 318);
		invocation.addSignedIntParameter(credits);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCashCredits(credits);
}

void CreatureObject::setBankCredits(int credits) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 319);
		invocation.addSignedIntParameter(credits);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBankCredits(credits);
}

void CreatureObject::applyBuff(const string& type, int value, float duration) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 320);
		invocation.addAsciiParameter(type);
		invocation.addSignedIntParameter(value);
		invocation.addFloatParameter(duration);

		invocation.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->applyBuff(type, value, duration);
}

bool CreatureObject::verifyCashCredits(int creditsToRemove) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 321);
		invocation.addSignedIntParameter(creditsToRemove);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->verifyCashCredits(creditsToRemove);
}

bool CreatureObject::verifyBankCredits(int creditsToRemove) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 322);
		invocation.addSignedIntParameter(creditsToRemove);

		return invocation.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->verifyBankCredits(creditsToRemove);
}

/*
 *	CreatureObjectAdapter
 */

CreatureObjectAdapter::CreatureObjectAdapter(CreatureObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* CreatureObjectAdapter::invokeMethod(uint32 methid, ORBMethodInvocation* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendItemsTo((Player*) inv->getObjectParameter());
		break;
	case 7:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 8:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 9:
		doCombatAnimation((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 10:
		doAnimation(inv->getAsciiParameter(_param0_doAnimation__string_));
		break;
	case 11:
		playEffect(inv->getAsciiParameter(_param0_playEffect__string_string_), inv->getAsciiParameter(_param1_playEffect__string_string_));
		break;
	case 12:
		showFlyText(inv->getAsciiParameter(_param0_showFlyText__string_string_char_char_char_), inv->getAsciiParameter(_param1_showFlyText__string_string_char_char_char_), inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter());
		break;
	case 13:
		sendCombatSpam((CreatureObject*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_sendCombatSpam__CreatureObject_TangibleObject_int_string_bool_), inv->getBooleanParameter());
		break;
	case 14:
		addDamage((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 15:
		resp->insertInt(getDamage((CreatureObject*) inv->getObjectParameter()));
		break;
	case 16:
		resp->insertBoolean(isLootOwner((CreatureObject*) inv->getObjectParameter()));
		break;
	case 17:
		resp->insertInt(getMitigation(inv->getAsciiParameter(_param0_getMitigation__string_)));
		break;
	case 18:
		resp->insertBoolean(isIncapacitated());
		break;
	case 19:
		resp->insertBoolean(isDead());
		break;
	case 20:
		resp->insertBoolean(isKnockedDown());
		break;
	case 21:
		resp->insertBoolean(isKneeled());
		break;
	case 22:
		resp->insertBoolean(isProne());
		break;
	case 23:
		resp->insertBoolean(isInCombat());
		break;
	case 24:
		resp->insertBoolean(isDizzied());
		break;
	case 25:
		resp->insertBoolean(isStunned());
		break;
	case 26:
		resp->insertBoolean(isBlinded());
		break;
	case 27:
		resp->insertBoolean(isIntimidated());
		break;
	case 28:
		resp->insertBoolean(isDiseased());
		break;
	case 29:
		resp->insertBoolean(isPoisoned());
		break;
	case 30:
		resp->insertBoolean(isBleeding());
		break;
	case 31:
		resp->insertBoolean(isOnFire());
		break;
	case 32:
		resp->insertBoolean(isMounted());
		break;
	case 33:
		resp->insertBoolean(isRidingCreature());
		break;
	case 34:
		resp->insertBoolean(isMeditating());
		break;
	case 35:
		resp->insertBoolean(isPeaced());
		break;
	case 36:
		updateKnockdownRecovery();
		break;
	case 37:
		updateMood(inv->getAsciiParameter(_param0_updateMood__string_));
		break;
	case 38:
		resp->insertBoolean(checkKnockdownRecovery());
		break;
	case 39:
		updatePostureDownRecovery();
		break;
	case 40:
		updatePostureUpRecovery();
		break;
	case 41:
		resp->insertBoolean(checkPostureDownRecovery());
		break;
	case 42:
		resp->insertBoolean(checkPostureUpRecovery());
		break;
	case 43:
		setCombatState();
		break;
	case 44:
		clearCombatState(inv->getBooleanParameter());
		break;
	case 45:
		setDefender((CreatureObject*) inv->getObjectParameter());
		break;
	case 46:
		addDefender((CreatureObject*) inv->getObjectParameter());
		break;
	case 47:
		removeDefenders();
		break;
	case 48:
		removeDefender((CreatureObject*) inv->getObjectParameter());
		break;
	case 49:
		resp->insertBoolean(hasDefender((CreatureObject*) inv->getObjectParameter()));
		break;
	case 50:
		resp->insertBoolean(setState(inv->getUnsignedLongParameter()));
		break;
	case 51:
		resp->insertBoolean(clearState(inv->getUnsignedLongParameter()));
		break;
	case 52:
		updateStates();
		break;
	case 53:
		clearStates();
		break;
	case 54:
		resp->insertFloat(calculateBFRatio());
		break;
	case 55:
		resetHAMBars();
		break;
	case 56:
		resp->insertBoolean(changeHAMBars(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 57:
		resp->insertBoolean(changeHAMWounds(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 58:
		changeMaxHAMBars(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 59:
		resp->insertBoolean(changeHealthWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 60:
		resp->insertBoolean(changeActionWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 61:
		resp->insertBoolean(changeMindWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 62:
		resp->insertBoolean(changeHealthBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 63:
		resp->insertBoolean(changeStrengthBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 64:
		resp->insertBoolean(changeConstitutionBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 65:
		changeMaxHealthBar(inv->getSignedIntParameter());
		break;
	case 66:
		changeMaxStrengthBar(inv->getSignedIntParameter());
		break;
	case 67:
		changeMaxConstitutionBar(inv->getSignedIntParameter());
		break;
	case 68:
		changeShockWounds(inv->getSignedIntParameter());
		break;
	case 69:
		resp->insertBoolean(changeActionBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 70:
		resp->insertBoolean(changeQuicknessBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 71:
		resp->insertBoolean(changeStaminaBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 72:
		changeMaxActionBar(inv->getSignedIntParameter());
		break;
	case 73:
		changeMaxQuicknessBar(inv->getSignedIntParameter());
		break;
	case 74:
		changeMaxStaminaBar(inv->getSignedIntParameter());
		break;
	case 75:
		resp->insertBoolean(changeMindBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 76:
		resp->insertBoolean(changeFocusBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 77:
		resp->insertBoolean(changeWillpowerBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 78:
		changeMaxMindBar(inv->getSignedIntParameter());
		break;
	case 79:
		changeMaxFocusBar(inv->getSignedIntParameter());
		break;
	case 80:
		changeMaxWillpowerBar(inv->getSignedIntParameter());
		break;
	case 81:
		resp->insertBoolean(hasAttackDelay());
		break;
	case 82:
		clearAttackDelay();
		break;
	case 83:
		resp->insertBoolean(isOnFullHealth());
		break;
	case 84:
		resp->insertBoolean(hasStates());
		break;
	case 85:
		resp->insertBoolean(hasState(inv->getUnsignedLongParameter()));
		break;
	case 86:
		resp->insertBoolean(hasWounds());
		break;
	case 87:
		resp->insertBoolean(hasShockWounds());
		break;
	case 88:
		resp->insertBoolean(isAttackable());
		break;
	case 89:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 90:
		resp->insertBoolean(isListening());
		break;
	case 91:
		resp->insertBoolean(isWatching());
		break;
	case 92:
		activateBurstRun();
		break;
	case 93:
		resp->insertBoolean(hasQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 94:
		resp->insertBoolean(removeQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 95:
		resp->insertBoolean(addQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 96:
		setMeditateState();
		break;
	case 97:
		resp->insertBoolean(isGuilded());
		break;
	case 98:
		setBaseHealth(inv->getUnsignedIntParameter());
		break;
	case 99:
		setBaseStrength(inv->getUnsignedIntParameter());
		break;
	case 100:
		setBaseConstitution(inv->getUnsignedIntParameter());
		break;
	case 101:
		setBaseAction(inv->getUnsignedIntParameter());
		break;
	case 102:
		setBaseQuickness(inv->getUnsignedIntParameter());
		break;
	case 103:
		setBaseStamina(inv->getUnsignedIntParameter());
		break;
	case 104:
		setBaseMind(inv->getUnsignedIntParameter());
		break;
	case 105:
		setBaseFocus(inv->getUnsignedIntParameter());
		break;
	case 106:
		setBaseWillpower(inv->getUnsignedIntParameter());
		break;
	case 107:
		setHealth(inv->getUnsignedIntParameter());
		break;
	case 108:
		setStrength(inv->getUnsignedIntParameter());
		break;
	case 109:
		setConstitution(inv->getUnsignedIntParameter());
		break;
	case 110:
		setAction(inv->getUnsignedIntParameter());
		break;
	case 111:
		setQuickness(inv->getUnsignedIntParameter());
		break;
	case 112:
		setStamina(inv->getUnsignedIntParameter());
		break;
	case 113:
		setMind(inv->getUnsignedIntParameter());
		break;
	case 114:
		setFocus(inv->getUnsignedIntParameter());
		break;
	case 115:
		setWillpower(inv->getUnsignedIntParameter());
		break;
	case 116:
		setHealthMax(inv->getUnsignedIntParameter());
		break;
	case 117:
		setStrengthMax(inv->getUnsignedIntParameter());
		break;
	case 118:
		setConstitutionMax(inv->getUnsignedIntParameter());
		break;
	case 119:
		setActionMax(inv->getUnsignedIntParameter());
		break;
	case 120:
		setQuicknessMax(inv->getUnsignedIntParameter());
		break;
	case 121:
		setStaminaMax(inv->getUnsignedIntParameter());
		break;
	case 122:
		setMindMax(inv->getUnsignedIntParameter());
		break;
	case 123:
		setFocusMax(inv->getUnsignedIntParameter());
		break;
	case 124:
		setWillpowerMax(inv->getUnsignedIntParameter());
		break;
	case 125:
		setArmor(inv->getUnsignedIntParameter());
		break;
	case 126:
		setHealthWounds(inv->getUnsignedIntParameter());
		break;
	case 127:
		setActionWounds(inv->getUnsignedIntParameter());
		break;
	case 128:
		setMindWounds(inv->getUnsignedIntParameter());
		break;
	case 129:
		setShockWounds(inv->getUnsignedIntParameter());
		break;
	case 130:
		setWoundsUpdateCounter(inv->getUnsignedIntParameter());
		break;
	case 131:
		changeConditionDamage(inv->getSignedIntParameter());
		break;
	case 132:
		setPosture(inv->getUnsignedCharParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 133:
		setDizziedState();
		break;
	case 134:
		setStunnedState();
		break;
	case 135:
		setBlindedState();
		break;
	case 136:
		setIntimidatedState();
		break;
	case 137:
		setPoisonedState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 138:
		setBleedingState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 139:
		setDiseasedState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 140:
		setOnFireState(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 141:
		resp->insertBoolean(setNextAttackDelay(inv->getSignedIntParameter()));
		break;
	case 142:
		setCharacterName(inv->getAsciiParameter(_param0_setCharacterName__string_));
		break;
	case 143:
		setCharacterName(inv->getUnicodeParameter(_param0_setCharacterName__unicode_));
		break;
	case 144:
		setTerrainName(inv->getAsciiParameter(_param0_setTerrainName__string_));
		break;
	case 145:
		setCharacterApperance(inv->getAsciiParameter(_param0_setCharacterApperance__string_));
		break;
	case 146:
		setRaceName(inv->getAsciiParameter(_param0_setRaceName__string_));
		break;
	case 147:
		setSpeciesName(inv->getAsciiParameter(_param0_setSpeciesName__string_));
		break;
	case 148:
		setFaction(inv->getUnsignedIntParameter());
		break;
	case 149:
		setHeight(inv->getFloatParameter());
		break;
	case 150:
		setMood(inv->getUnsignedCharParameter());
		break;
	case 151:
		setMood(inv->getAsciiParameter(_param0_setMood__string_));
		break;
	case 152:
		setGroup((GroupObject*) inv->getObjectParameter());
		break;
	case 153:
		setMount((MountCreature*) inv->getObjectParameter());
		break;
	case 154:
		removeGroup();
		break;
	case 155:
		resp->insertBoolean(isInAGroup());
		break;
	case 156:
		setGroupID(inv->getUnsignedLongParameter());
		break;
	case 157:
		updateGroupId(inv->getUnsignedLongParameter());
		break;
	case 158:
		updateGroupInviterId(inv->getUnsignedLongParameter());
		break;
	case 159:
		setDefenderID(inv->getSignedLongParameter());
		break;
	case 160:
		updateTarget(inv->getUnsignedLongParameter());
		break;
	case 161:
		updateTarget((SceneObject*) inv->getObjectParameter());
		break;
	case 162:
		setActionCounter(inv->getUnsignedIntParameter());
		break;
	case 163:
		setWeapon((Weapon*) inv->getObjectParameter());
		break;
	case 164:
		setCreatureLinkID(inv->getUnsignedLongParameter());
		break;
	case 165:
		setAccuracy(inv->getSignedIntParameter());
		break;
	case 166:
		setDamageBonus(inv->getSignedIntParameter());
		break;
	case 167:
		setDefenseBonus(inv->getSignedIntParameter());
		break;
	case 168:
		setLastMovementUpdateStamp(inv->getUnsignedIntParameter());
		break;
	case 169:
		setIgnoreMovementTests(inv->getSignedIntParameter());
		break;
	case 170:
		setLevel(inv->getUnsignedIntParameter());
		break;
	case 171:
		updateServerMovementStamp();
		break;
	case 172:
		resp->insertUnicode(getCharacterName());
		break;
	case 173:
		resp->insertAscii(getStfName());
		break;
	case 174:
		resp->insertAscii(getSpeciesName());
		break;
	case 175:
		resp->insertAscii(getRaceName());
		break;
	case 176:
		resp->insertAscii(getTerrainName());
		break;
	case 177:
		getCharacterApperance(inv->getAsciiParameter(_param0_getCharacterApperance__string_));
		break;
	case 178:
		resp->insertBoolean(isOvert());
		break;
	case 179:
		resp->insertLong(getStateBitmask());
		break;
	case 180:
		resp->insertInt(getCreatureBitmask());
		break;
	case 181:
		resp->insertByte(getPosture());
		break;
	case 182:
		resp->insertInt(getFaction());
		break;
	case 183:
		resp->insertBoolean(isRebel());
		break;
	case 184:
		resp->insertBoolean(isNeutral());
		break;
	case 185:
		resp->insertBoolean(isImperial());
		break;
	case 186:
		resp->insertInt(getPvpStatusBitmask());
		break;
	case 187:
		resp->insertInt(getBankCredits());
		break;
	case 188:
		resp->insertInt(getCashCredits());
		break;
	case 189:
		resp->insertInt(getWoundsUpdateCounter());
		break;
	case 190:
		resp->insertInt(getNewWoundsUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 191:
		resp->insertInt(getBaseHealth());
		break;
	case 192:
		resp->insertInt(getBaseStrength());
		break;
	case 193:
		resp->insertInt(getBaseConstitution());
		break;
	case 194:
		resp->insertInt(getBaseAction());
		break;
	case 195:
		resp->insertInt(getBaseQuickness());
		break;
	case 196:
		resp->insertInt(getBaseStamina());
		break;
	case 197:
		resp->insertInt(getBaseMind());
		break;
	case 198:
		resp->insertInt(getBaseFocus());
		break;
	case 199:
		resp->insertInt(getBaseWillpower());
		break;
	case 200:
		resp->insertInt(getHealth());
		break;
	case 201:
		resp->insertInt(getStrength());
		break;
	case 202:
		resp->insertInt(getConstitution());
		break;
	case 203:
		resp->insertInt(getAction());
		break;
	case 204:
		resp->insertInt(getQuickness());
		break;
	case 205:
		resp->insertInt(getStamina());
		break;
	case 206:
		resp->insertInt(getMind());
		break;
	case 207:
		resp->insertInt(getFocus());
		break;
	case 208:
		resp->insertInt(getWillpower());
		break;
	case 209:
		resp->insertInt(getHealthMax());
		break;
	case 210:
		resp->insertInt(getStrengthMax());
		break;
	case 211:
		resp->insertInt(getConstitutionMax());
		break;
	case 212:
		resp->insertInt(getActionMax());
		break;
	case 213:
		resp->insertInt(getQuicknessMax());
		break;
	case 214:
		resp->insertInt(getStaminaMax());
		break;
	case 215:
		resp->insertInt(getMindMax());
		break;
	case 216:
		resp->insertInt(getFocusMax());
		break;
	case 217:
		resp->insertInt(getWillpowerMax());
		break;
	case 218:
		resp->insertInt(getArmor());
		break;
	case 219:
		resp->insertFloat(getArmorResist(inv->getSignedIntParameter()));
		break;
	case 220:
		resp->insertInt(getHealthWounds());
		break;
	case 221:
		resp->insertInt(getActionWounds());
		break;
	case 222:
		resp->insertInt(getMindWounds());
		break;
	case 223:
		resp->insertInt(getShockWounds());
		break;
	case 224:
		resp->insertInt(getHAMUpdateCounter());
		break;
	case 225:
		resp->insertInt(getNewHAMUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 226:
		resp->insertInt(getHAMMaxUpdateCounter());
		break;
	case 227:
		resp->insertInt(getNewHAMMaxUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 228:
		resp->insertInt(getHealthEncumbrance());
		break;
	case 229:
		resp->insertInt(getActionEncumbrance());
		break;
	case 230:
		resp->insertInt(getMindEncumbrance());
		break;
	case 231:
		resp->insertLong(getTargetID());
		break;
	case 232:
		resp->insertLong(getTarget()->_getORBObjectID());
		break;
	case 233:
		resp->insertLong(getWeaponID());
		break;
	case 234:
		resp->insertLong(getGroupID());
		break;
	case 235:
		resp->insertLong(getGuildID());
		break;
	case 236:
		resp->insertLong(getGuild()->_getORBObjectID());
		break;
	case 237:
		resp->insertFloat(getSpeed());
		break;
	case 238:
		resp->insertFloat(getAcceleration());
		break;
	case 239:
		resp->insertLong(getDefenderID());
		break;
	case 240:
		resp->insertInt(getDefenderUpdateCounter());
		break;
	case 241:
		resp->insertInt(getNewDefenderUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 242:
		resp->insertAscii(getPerformanceName());
		break;
	case 243:
		resp->insertInt(getPerformanceCounter());
		break;
	case 244:
		resp->insertInt(getInstrumentID());
		break;
	case 245:
		resp->insertAscii(getMood());
		break;
	case 246:
		resp->insertByte(getMoodID());
		break;
	case 247:
		resp->insertLong(getGroupInviterID());
		break;
	case 248:
		resp->insertLong(getGroupInviteCounter());
		break;
	case 249:
		resp->insertLong(getNewGroupInviteCounter());
		break;
	case 250:
		resp->insertLong(getWatchID());
		break;
	case 251:
		resp->insertLong(getListenID());
		break;
	case 252:
		resp->insertAscii(getGuildName());
		break;
	case 253:
		resp->insertSignedInt(getWeaponSpeedModifier());
		break;
	case 254:
		resp->insertInt(getSkillBoxesUpdateCounter());
		break;
	case 255:
		resp->insertInt(getSkillModsCounter());
		break;
	case 256:
		resp->insertInt(getNewSkillModsCounter(inv->getSignedIntParameter()));
		break;
	case 257:
		resp->insertLong(getInventoryItem(inv->getUnsignedLongParameter())->_getORBObjectID());
		break;
	case 258:
		removeInventoryItem(inv->getUnsignedLongParameter());
		break;
	case 259:
		resp->insertLong(getLootItem(inv->getUnsignedLongParameter())->_getORBObjectID());
		break;
	case 260:
		removeLootItem(inv->getUnsignedLongParameter());
		break;
	case 261:
		broadcastMessage((BaseMessage*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 262:
		resp->insertLong(getInventory()->_getORBObjectID());
		break;
	case 263:
		resp->insertLong(getLootContainer()->_getORBObjectID());
		break;
	case 264:
		resp->insertLong(getNewItemID());
		break;
	case 265:
		resp->insertLong(getWeapon()->_getORBObjectID());
		break;
	case 266:
		resp->insertLong(getArmor(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 267:
		resp->insertSignedInt(getSkillMod(inv->getAsciiParameter(_param0_getSkillMod__string_)));
		break;
	case 268:
		resp->insertBoolean(hasSkillMod(inv->getAsciiParameter(_param0_hasSkillMod__string_)));
		break;
	case 269:
		resp->insertSignedInt(getSkillModBonus(inv->getAsciiParameter(_param0_getSkillModBonus__string_)));
		break;
	case 270:
		resp->insertBoolean(hasSkillModBonus(inv->getAsciiParameter(_param0_hasSkillModBonus__string_)));
		break;
	case 271:
		resp->insertSignedInt(getAccuracy());
		break;
	case 272:
		resp->insertSignedInt(getDefenseBonus());
		break;
	case 273:
		resp->insertSignedInt(getDamageBonus());
		break;
	case 274:
		resp->insertSignedInt(getConditionDamage());
		break;
	case 275:
		resp->insertSignedInt(getMaxCondition());
		break;
	case 276:
		resp->insertSignedInt(getCondition());
		break;
	case 277:
		resp->insertLong(getMount()->_getORBObjectID());
		break;
	case 278:
		resp->insertLong(getLastServerMovementStamp());
		break;
	case 279:
		resp->insertLong(getCreatureLinkID());
		break;
	case 280:
		resp->insertFloat(getDistanceTo((CreatureObject*) inv->getObjectParameter()));
		break;
	case 281:
		resp->insertFloat(getHeight());
		break;
	case 282:
		resp->insertInt(getCreatureSkillsCount());
		break;
	case 283:
		resp->insertInt(getNewCreatureSkillsCount(inv->getSignedIntParameter()));
		break;
	case 284:
		resp->insertInt(getLastMovementUpdateStamp());
		break;
	case 285:
		resp->insertSignedInt(getIgnoreMovementTests());
		break;
	case 286:
		resp->insertInt(getDefenderListSize());
		break;
	case 287:
		resp->insertLong(getDefender(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 288:
		resp->insertInt(getLevel());
		break;
	case 289:
		resp->insertSignedInt(getCenteredBonus());
		break;
	case 290:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_));
		break;
	case 291:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_string_long_), inv->getAsciiParameter(_param1_sendSystemMessage__string_string_long_), inv->getUnsignedLongParameter());
		break;
	case 292:
		addInventoryItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 293:
		addLootItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 294:
		startDancing(inv->getAsciiParameter(_param0_startDancing__string_));
		break;
	case 295:
		startPlayingMusic(inv->getAsciiParameter(_param0_startPlayingMusic__string_));
		break;
	case 296:
		startWatch(inv->getUnsignedLongParameter());
		break;
	case 297:
		startListen(inv->getUnsignedLongParameter());
		break;
	case 298:
		stopWatch(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 299:
		stopListen(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 300:
		resp->insertBoolean(isPlayingMusic());
		break;
	case 301:
		resp->insertBoolean(isDancing());
		break;
	case 302:
		stopDancing();
		break;
	case 303:
		stopPlayingMusic();
		break;
	case 304:
		addListener((CreatureObject*) inv->getObjectParameter());
		break;
	case 305:
		addWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case 306:
		removeListener((CreatureObject*) inv->getObjectParameter());
		break;
	case 307:
		removeWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case 308:
		activateRecovery();
		break;
	case 309:
		resp->insertSignedInt(getCreatureSkillsSize());
		break;
	case 310:
		resp->insertAscii(getSkill(inv->getSignedIntParameter()));
		break;
	case 311:
		resp->insertBoolean(hasSkill(inv->getUnsignedIntParameter()));
		break;
	case 312:
		mountCreature((MountCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 313:
		dismount(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 314:
		addCashCredits(inv->getUnsignedIntParameter());
		break;
	case 315:
		addBankCredits(inv->getUnsignedIntParameter());
		break;
	case 316:
		subtractCashCredits(inv->getUnsignedIntParameter());
		break;
	case 317:
		subtractBankCredits(inv->getUnsignedIntParameter());
		break;
	case 318:
		setCashCredits(inv->getSignedIntParameter());
		break;
	case 319:
		setBankCredits(inv->getSignedIntParameter());
		break;
	case 320:
		applyBuff(inv->getAsciiParameter(_param0_applyBuff__string_int_float_), inv->getSignedIntParameter(), inv->getFloatParameter());
		break;
	case 321:
		resp->insertBoolean(verifyCashCredits(inv->getSignedIntParameter()));
		break;
	case 322:
		resp->insertBoolean(verifyBankCredits(inv->getSignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureObjectAdapter::sendItemsTo(Player* player) {
	return ((CreatureObjectImplementation*) impl)->sendItemsTo(player);
}

void CreatureObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((CreatureObjectImplementation*) impl)->sendTo(player, doClose);
}

void CreatureObjectAdapter::sendDestroyTo(Player* player) {
	return ((CreatureObjectImplementation*) impl)->sendDestroyTo(player);
}

void CreatureObjectAdapter::doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit) {
	return ((CreatureObjectImplementation*) impl)->doCombatAnimation(defender, animcrc, hit);
}

void CreatureObjectAdapter::doAnimation(const string& anim) {
	return ((CreatureObjectImplementation*) impl)->doAnimation(anim);
}

void CreatureObjectAdapter::playEffect(const string& file, const string& aux) {
	return ((CreatureObjectImplementation*) impl)->playEffect(file, aux);
}

void CreatureObjectAdapter::showFlyText(const string& file, const string& aux, unsigned char red, unsigned char green, unsigned char blue) {
	return ((CreatureObjectImplementation*) impl)->showFlyText(file, aux, red, green, blue);
}

void CreatureObjectAdapter::sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const string& skill, bool areaSpam) {
	return ((CreatureObjectImplementation*) impl)->sendCombatSpam(defender, item, damage, skill, areaSpam);
}

void CreatureObjectAdapter::addDamage(CreatureObject* creature, unsigned int damage) {
	return ((CreatureObjectImplementation*) impl)->addDamage(creature, damage);
}

unsigned int CreatureObjectAdapter::getDamage(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->getDamage(creature);
}

bool CreatureObjectAdapter::isLootOwner(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->isLootOwner(creature);
}

unsigned int CreatureObjectAdapter::getMitigation(const string& mit) {
	return ((CreatureObjectImplementation*) impl)->getMitigation(mit);
}

bool CreatureObjectAdapter::isIncapacitated() {
	return ((CreatureObjectImplementation*) impl)->isIncapacitated();
}

bool CreatureObjectAdapter::isDead() {
	return ((CreatureObjectImplementation*) impl)->isDead();
}

bool CreatureObjectAdapter::isKnockedDown() {
	return ((CreatureObjectImplementation*) impl)->isKnockedDown();
}

bool CreatureObjectAdapter::isKneeled() {
	return ((CreatureObjectImplementation*) impl)->isKneeled();
}

bool CreatureObjectAdapter::isProne() {
	return ((CreatureObjectImplementation*) impl)->isProne();
}

bool CreatureObjectAdapter::isInCombat() {
	return ((CreatureObjectImplementation*) impl)->isInCombat();
}

bool CreatureObjectAdapter::isDizzied() {
	return ((CreatureObjectImplementation*) impl)->isDizzied();
}

bool CreatureObjectAdapter::isStunned() {
	return ((CreatureObjectImplementation*) impl)->isStunned();
}

bool CreatureObjectAdapter::isBlinded() {
	return ((CreatureObjectImplementation*) impl)->isBlinded();
}

bool CreatureObjectAdapter::isIntimidated() {
	return ((CreatureObjectImplementation*) impl)->isIntimidated();
}

bool CreatureObjectAdapter::isDiseased() {
	return ((CreatureObjectImplementation*) impl)->isDiseased();
}

bool CreatureObjectAdapter::isPoisoned() {
	return ((CreatureObjectImplementation*) impl)->isPoisoned();
}

bool CreatureObjectAdapter::isBleeding() {
	return ((CreatureObjectImplementation*) impl)->isBleeding();
}

bool CreatureObjectAdapter::isOnFire() {
	return ((CreatureObjectImplementation*) impl)->isOnFire();
}

bool CreatureObjectAdapter::isMounted() {
	return ((CreatureObjectImplementation*) impl)->isMounted();
}

bool CreatureObjectAdapter::isRidingCreature() {
	return ((CreatureObjectImplementation*) impl)->isRidingCreature();
}

bool CreatureObjectAdapter::isMeditating() {
	return ((CreatureObjectImplementation*) impl)->isMeditating();
}

bool CreatureObjectAdapter::isPeaced() {
	return ((CreatureObjectImplementation*) impl)->isPeaced();
}

void CreatureObjectAdapter::updateKnockdownRecovery() {
	return ((CreatureObjectImplementation*) impl)->updateKnockdownRecovery();
}

void CreatureObjectAdapter::updateMood(const string& md) {
	return ((CreatureObjectImplementation*) impl)->updateMood(md);
}

bool CreatureObjectAdapter::checkKnockdownRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkKnockdownRecovery();
}

void CreatureObjectAdapter::updatePostureDownRecovery() {
	return ((CreatureObjectImplementation*) impl)->updatePostureDownRecovery();
}

void CreatureObjectAdapter::updatePostureUpRecovery() {
	return ((CreatureObjectImplementation*) impl)->updatePostureUpRecovery();
}

bool CreatureObjectAdapter::checkPostureDownRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkPostureDownRecovery();
}

bool CreatureObjectAdapter::checkPostureUpRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkPostureUpRecovery();
}

void CreatureObjectAdapter::setCombatState() {
	return ((CreatureObjectImplementation*) impl)->setCombatState();
}

void CreatureObjectAdapter::clearCombatState(bool removedefenders) {
	return ((CreatureObjectImplementation*) impl)->clearCombatState(removedefenders);
}

void CreatureObjectAdapter::setDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->setDefender(defender);
}

void CreatureObjectAdapter::addDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->addDefender(defender);
}

void CreatureObjectAdapter::removeDefenders() {
	return ((CreatureObjectImplementation*) impl)->removeDefenders();
}

void CreatureObjectAdapter::removeDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->removeDefender(defender);
}

bool CreatureObjectAdapter::hasDefender(CreatureObject* defender) {
	return ((CreatureObjectImplementation*) impl)->hasDefender(defender);
}

bool CreatureObjectAdapter::setState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->setState(state);
}

bool CreatureObjectAdapter::clearState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->clearState(state);
}

void CreatureObjectAdapter::updateStates() {
	return ((CreatureObjectImplementation*) impl)->updateStates();
}

void CreatureObjectAdapter::clearStates() {
	return ((CreatureObjectImplementation*) impl)->clearStates();
}

float CreatureObjectAdapter::calculateBFRatio() {
	return ((CreatureObjectImplementation*) impl)->calculateBFRatio();
}

void CreatureObjectAdapter::resetHAMBars() {
	return ((CreatureObjectImplementation*) impl)->resetHAMBars();
}

bool CreatureObjectAdapter::changeHAMBars(int hp, int ap, int mp, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHAMBars(hp, ap, mp, forcedChange);
}

bool CreatureObjectAdapter::changeHAMWounds(int hpwnd, int apwnd, int mpwnd, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHAMWounds(hpwnd, apwnd, mpwnd, forcedChange);
}

void CreatureObjectAdapter::changeMaxHAMBars(int hp, int ap, int mp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxHAMBars(hp, ap, mp);
}

bool CreatureObjectAdapter::changeHealthWoundsBar(int wounds, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHealthWoundsBar(wounds, forcedChange);
}

bool CreatureObjectAdapter::changeActionWoundsBar(int wounds, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeActionWoundsBar(wounds, forcedChange);
}

bool CreatureObjectAdapter::changeMindWoundsBar(int wounds, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeMindWoundsBar(wounds, forcedChange);
}

bool CreatureObjectAdapter::changeHealthBar(int hp, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHealthBar(hp, forcedChange);
}

bool CreatureObjectAdapter::changeStrengthBar(int st, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStrengthBar(st, forcedChange);
}

bool CreatureObjectAdapter::changeConstitutionBar(int cs, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeConstitutionBar(cs, forcedChange);
}

void CreatureObjectAdapter::changeMaxHealthBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxHealthBar(hp);
}

void CreatureObjectAdapter::changeMaxStrengthBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxStrengthBar(hp);
}

void CreatureObjectAdapter::changeMaxConstitutionBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxConstitutionBar(hp);
}

void CreatureObjectAdapter::changeShockWounds(int bf) {
	return ((CreatureObjectImplementation*) impl)->changeShockWounds(bf);
}

bool CreatureObjectAdapter::changeActionBar(int ap, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeActionBar(ap, forcedChange);
}

bool CreatureObjectAdapter::changeQuicknessBar(int qc, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeQuicknessBar(qc, forcedChange);
}

bool CreatureObjectAdapter::changeStaminaBar(int st, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStaminaBar(st, forcedChange);
}

void CreatureObjectAdapter::changeMaxActionBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxActionBar(hp);
}

void CreatureObjectAdapter::changeMaxQuicknessBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxQuicknessBar(hp);
}

void CreatureObjectAdapter::changeMaxStaminaBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxStaminaBar(hp);
}

bool CreatureObjectAdapter::changeMindBar(int mp, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeMindBar(mp, forcedChange);
}

bool CreatureObjectAdapter::changeFocusBar(int fc, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeFocusBar(fc, forcedChange);
}

bool CreatureObjectAdapter::changeWillpowerBar(int wl, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeWillpowerBar(wl, forcedChange);
}

void CreatureObjectAdapter::changeMaxMindBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxMindBar(hp);
}

void CreatureObjectAdapter::changeMaxFocusBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxFocusBar(hp);
}

void CreatureObjectAdapter::changeMaxWillpowerBar(int hp) {
	return ((CreatureObjectImplementation*) impl)->changeMaxWillpowerBar(hp);
}

bool CreatureObjectAdapter::hasAttackDelay() {
	return ((CreatureObjectImplementation*) impl)->hasAttackDelay();
}

void CreatureObjectAdapter::clearAttackDelay() {
	return ((CreatureObjectImplementation*) impl)->clearAttackDelay();
}

bool CreatureObjectAdapter::isOnFullHealth() {
	return ((CreatureObjectImplementation*) impl)->isOnFullHealth();
}

bool CreatureObjectAdapter::hasStates() {
	return ((CreatureObjectImplementation*) impl)->hasStates();
}

bool CreatureObjectAdapter::hasState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->hasState(state);
}

bool CreatureObjectAdapter::hasWounds() {
	return ((CreatureObjectImplementation*) impl)->hasWounds();
}

bool CreatureObjectAdapter::hasShockWounds() {
	return ((CreatureObjectImplementation*) impl)->hasShockWounds();
}

bool CreatureObjectAdapter::isAttackable() {
	return ((CreatureObjectImplementation*) impl)->isAttackable();
}

bool CreatureObjectAdapter::isAttackableBy(CreatureObject* attacker) {
	return ((CreatureObjectImplementation*) impl)->isAttackableBy(attacker);
}

bool CreatureObjectAdapter::isListening() {
	return ((CreatureObjectImplementation*) impl)->isListening();
}

bool CreatureObjectAdapter::isWatching() {
	return ((CreatureObjectImplementation*) impl)->isWatching();
}

void CreatureObjectAdapter::activateBurstRun() {
	return ((CreatureObjectImplementation*) impl)->activateBurstRun();
}

bool CreatureObjectAdapter::hasQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->hasQueuedState(skillCRC);
}

bool CreatureObjectAdapter::removeQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->removeQueuedState(skillCRC);
}

bool CreatureObjectAdapter::addQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->addQueuedState(skillCRC);
}

void CreatureObjectAdapter::setMeditateState() {
	return ((CreatureObjectImplementation*) impl)->setMeditateState();
}

bool CreatureObjectAdapter::isGuilded() {
	return ((CreatureObjectImplementation*) impl)->isGuilded();
}

void CreatureObjectAdapter::setBaseHealth(unsigned int health) {
	return ((CreatureObjectImplementation*) impl)->setBaseHealth(health);
}

void CreatureObjectAdapter::setBaseStrength(unsigned int strength) {
	return ((CreatureObjectImplementation*) impl)->setBaseStrength(strength);
}

void CreatureObjectAdapter::setBaseConstitution(unsigned int constituition) {
	return ((CreatureObjectImplementation*) impl)->setBaseConstitution(constituition);
}

void CreatureObjectAdapter::setBaseAction(unsigned int action) {
	return ((CreatureObjectImplementation*) impl)->setBaseAction(action);
}

void CreatureObjectAdapter::setBaseQuickness(unsigned int quickness) {
	return ((CreatureObjectImplementation*) impl)->setBaseQuickness(quickness);
}

void CreatureObjectAdapter::setBaseStamina(unsigned int stamina) {
	return ((CreatureObjectImplementation*) impl)->setBaseStamina(stamina);
}

void CreatureObjectAdapter::setBaseMind(unsigned int mind) {
	return ((CreatureObjectImplementation*) impl)->setBaseMind(mind);
}

void CreatureObjectAdapter::setBaseFocus(unsigned int focus) {
	return ((CreatureObjectImplementation*) impl)->setBaseFocus(focus);
}

void CreatureObjectAdapter::setBaseWillpower(unsigned int willpower) {
	return ((CreatureObjectImplementation*) impl)->setBaseWillpower(willpower);
}

void CreatureObjectAdapter::setHealth(unsigned int health) {
	return ((CreatureObjectImplementation*) impl)->setHealth(health);
}

void CreatureObjectAdapter::setStrength(unsigned int strength) {
	return ((CreatureObjectImplementation*) impl)->setStrength(strength);
}

void CreatureObjectAdapter::setConstitution(unsigned int constituition) {
	return ((CreatureObjectImplementation*) impl)->setConstitution(constituition);
}

void CreatureObjectAdapter::setAction(unsigned int action) {
	return ((CreatureObjectImplementation*) impl)->setAction(action);
}

void CreatureObjectAdapter::setQuickness(unsigned int quickness) {
	return ((CreatureObjectImplementation*) impl)->setQuickness(quickness);
}

void CreatureObjectAdapter::setStamina(unsigned int stamina) {
	return ((CreatureObjectImplementation*) impl)->setStamina(stamina);
}

void CreatureObjectAdapter::setMind(unsigned int mind) {
	return ((CreatureObjectImplementation*) impl)->setMind(mind);
}

void CreatureObjectAdapter::setFocus(unsigned int focus) {
	return ((CreatureObjectImplementation*) impl)->setFocus(focus);
}

void CreatureObjectAdapter::setWillpower(unsigned int willpower) {
	return ((CreatureObjectImplementation*) impl)->setWillpower(willpower);
}

void CreatureObjectAdapter::setHealthMax(unsigned int health) {
	return ((CreatureObjectImplementation*) impl)->setHealthMax(health);
}

void CreatureObjectAdapter::setStrengthMax(unsigned int strength) {
	return ((CreatureObjectImplementation*) impl)->setStrengthMax(strength);
}

void CreatureObjectAdapter::setConstitutionMax(unsigned int constituition) {
	return ((CreatureObjectImplementation*) impl)->setConstitutionMax(constituition);
}

void CreatureObjectAdapter::setActionMax(unsigned int action) {
	return ((CreatureObjectImplementation*) impl)->setActionMax(action);
}

void CreatureObjectAdapter::setQuicknessMax(unsigned int quickness) {
	return ((CreatureObjectImplementation*) impl)->setQuicknessMax(quickness);
}

void CreatureObjectAdapter::setStaminaMax(unsigned int stamina) {
	return ((CreatureObjectImplementation*) impl)->setStaminaMax(stamina);
}

void CreatureObjectAdapter::setMindMax(unsigned int mind) {
	return ((CreatureObjectImplementation*) impl)->setMindMax(mind);
}

void CreatureObjectAdapter::setFocusMax(unsigned int focus) {
	return ((CreatureObjectImplementation*) impl)->setFocusMax(focus);
}

void CreatureObjectAdapter::setWillpowerMax(unsigned int willpower) {
	return ((CreatureObjectImplementation*) impl)->setWillpowerMax(willpower);
}

void CreatureObjectAdapter::setArmor(unsigned int ar) {
	return ((CreatureObjectImplementation*) impl)->setArmor(ar);
}

void CreatureObjectAdapter::setHealthWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setHealthWounds(wounds);
}

void CreatureObjectAdapter::setActionWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setActionWounds(wounds);
}

void CreatureObjectAdapter::setMindWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setMindWounds(wounds);
}

void CreatureObjectAdapter::setShockWounds(unsigned int wounds) {
	return ((CreatureObjectImplementation*) impl)->setShockWounds(wounds);
}

void CreatureObjectAdapter::setWoundsUpdateCounter(unsigned int count) {
	return ((CreatureObjectImplementation*) impl)->setWoundsUpdateCounter(count);
}

void CreatureObjectAdapter::changeConditionDamage(int amount) {
	return ((CreatureObjectImplementation*) impl)->changeConditionDamage(amount);
}

void CreatureObjectAdapter::setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ) {
	return ((CreatureObjectImplementation*) impl)->setPosture(state, overrideDizzy, objectInteraction, objX, objY, objZ);
}

void CreatureObjectAdapter::setDizziedState() {
	return ((CreatureObjectImplementation*) impl)->setDizziedState();
}

void CreatureObjectAdapter::setStunnedState() {
	return ((CreatureObjectImplementation*) impl)->setStunnedState();
}

void CreatureObjectAdapter::setBlindedState() {
	return ((CreatureObjectImplementation*) impl)->setBlindedState();
}

void CreatureObjectAdapter::setIntimidatedState() {
	return ((CreatureObjectImplementation*) impl)->setIntimidatedState();
}

void CreatureObjectAdapter::setPoisonedState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setPoisonedState(str, type, duration);
}

void CreatureObjectAdapter::setBleedingState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setBleedingState(str, type, duration);
}

void CreatureObjectAdapter::setDiseasedState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setDiseasedState(str, type, duration);
}

void CreatureObjectAdapter::setOnFireState(int str, int type, int duration) {
	return ((CreatureObjectImplementation*) impl)->setOnFireState(str, type, duration);
}

bool CreatureObjectAdapter::setNextAttackDelay(int del) {
	return ((CreatureObjectImplementation*) impl)->setNextAttackDelay(del);
}

void CreatureObjectAdapter::setCharacterName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setCharacterName(name);
}

void CreatureObjectAdapter::setCharacterName(unicode& name) {
	return ((CreatureObjectImplementation*) impl)->setCharacterName(name);
}

void CreatureObjectAdapter::setTerrainName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setTerrainName(name);
}

void CreatureObjectAdapter::setCharacterApperance(string& cust) {
	return ((CreatureObjectImplementation*) impl)->setCharacterApperance(cust);
}

void CreatureObjectAdapter::setRaceName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setRaceName(name);
}

void CreatureObjectAdapter::setSpeciesName(const string& name) {
	return ((CreatureObjectImplementation*) impl)->setSpeciesName(name);
}

void CreatureObjectAdapter::setFaction(unsigned int fac) {
	return ((CreatureObjectImplementation*) impl)->setFaction(fac);
}

void CreatureObjectAdapter::setHeight(float h) {
	return ((CreatureObjectImplementation*) impl)->setHeight(h);
}

void CreatureObjectAdapter::setMood(unsigned char mdid) {
	return ((CreatureObjectImplementation*) impl)->setMood(mdid);
}

void CreatureObjectAdapter::setMood(const string& m) {
	return ((CreatureObjectImplementation*) impl)->setMood(m);
}

void CreatureObjectAdapter::setGroup(GroupObject* Group) {
	return ((CreatureObjectImplementation*) impl)->setGroup(Group);
}

void CreatureObjectAdapter::setMount(MountCreature* mount) {
	return ((CreatureObjectImplementation*) impl)->setMount(mount);
}

void CreatureObjectAdapter::removeGroup() {
	return ((CreatureObjectImplementation*) impl)->removeGroup();
}

bool CreatureObjectAdapter::isInAGroup() {
	return ((CreatureObjectImplementation*) impl)->isInAGroup();
}

void CreatureObjectAdapter::setGroupID(unsigned long long gid) {
	return ((CreatureObjectImplementation*) impl)->setGroupID(gid);
}

void CreatureObjectAdapter::updateGroupId(unsigned long long id) {
	return ((CreatureObjectImplementation*) impl)->updateGroupId(id);
}

void CreatureObjectAdapter::updateGroupInviterId(unsigned long long id) {
	return ((CreatureObjectImplementation*) impl)->updateGroupInviterId(id);
}

void CreatureObjectAdapter::setDefenderID(long long did) {
	return ((CreatureObjectImplementation*) impl)->setDefenderID(did);
}

void CreatureObjectAdapter::updateTarget(unsigned long long targ) {
	return ((CreatureObjectImplementation*) impl)->updateTarget(targ);
}

void CreatureObjectAdapter::updateTarget(SceneObject* targ) {
	return ((CreatureObjectImplementation*) impl)->updateTarget(targ);
}

void CreatureObjectAdapter::setActionCounter(unsigned int actioncntr) {
	return ((CreatureObjectImplementation*) impl)->setActionCounter(actioncntr);
}

void CreatureObjectAdapter::setWeapon(Weapon* wep) {
	return ((CreatureObjectImplementation*) impl)->setWeapon(wep);
}

void CreatureObjectAdapter::setCreatureLinkID(unsigned long long creatureID) {
	return ((CreatureObjectImplementation*) impl)->setCreatureLinkID(creatureID);
}

void CreatureObjectAdapter::setAccuracy(int acc) {
	return ((CreatureObjectImplementation*) impl)->setAccuracy(acc);
}

void CreatureObjectAdapter::setDamageBonus(int bonus) {
	return ((CreatureObjectImplementation*) impl)->setDamageBonus(bonus);
}

void CreatureObjectAdapter::setDefenseBonus(int bonus) {
	return ((CreatureObjectImplementation*) impl)->setDefenseBonus(bonus);
}

void CreatureObjectAdapter::setLastMovementUpdateStamp(unsigned int tme) {
	return ((CreatureObjectImplementation*) impl)->setLastMovementUpdateStamp(tme);
}

void CreatureObjectAdapter::setIgnoreMovementTests(int times) {
	return ((CreatureObjectImplementation*) impl)->setIgnoreMovementTests(times);
}

void CreatureObjectAdapter::setLevel(unsigned int lvl) {
	return ((CreatureObjectImplementation*) impl)->setLevel(lvl);
}

void CreatureObjectAdapter::updateServerMovementStamp() {
	return ((CreatureObjectImplementation*) impl)->updateServerMovementStamp();
}

unicode& CreatureObjectAdapter::getCharacterName() {
	return ((CreatureObjectImplementation*) impl)->getCharacterName();
}

string& CreatureObjectAdapter::getStfName() {
	return ((CreatureObjectImplementation*) impl)->getStfName();
}

string& CreatureObjectAdapter::getSpeciesName() {
	return ((CreatureObjectImplementation*) impl)->getSpeciesName();
}

string& CreatureObjectAdapter::getRaceName() {
	return ((CreatureObjectImplementation*) impl)->getRaceName();
}

string& CreatureObjectAdapter::getTerrainName() {
	return ((CreatureObjectImplementation*) impl)->getTerrainName();
}

void CreatureObjectAdapter::getCharacterApperance(string& appearance) {
	return ((CreatureObjectImplementation*) impl)->getCharacterApperance(appearance);
}

bool CreatureObjectAdapter::isOvert() {
	return ((CreatureObjectImplementation*) impl)->isOvert();
}

unsigned long long CreatureObjectAdapter::getStateBitmask() {
	return ((CreatureObjectImplementation*) impl)->getStateBitmask();
}

unsigned int CreatureObjectAdapter::getCreatureBitmask() {
	return ((CreatureObjectImplementation*) impl)->getCreatureBitmask();
}

unsigned char CreatureObjectAdapter::getPosture() {
	return ((CreatureObjectImplementation*) impl)->getPosture();
}

unsigned int CreatureObjectAdapter::getFaction() {
	return ((CreatureObjectImplementation*) impl)->getFaction();
}

bool CreatureObjectAdapter::isRebel() {
	return ((CreatureObjectImplementation*) impl)->isRebel();
}

bool CreatureObjectAdapter::isNeutral() {
	return ((CreatureObjectImplementation*) impl)->isNeutral();
}

bool CreatureObjectAdapter::isImperial() {
	return ((CreatureObjectImplementation*) impl)->isImperial();
}

unsigned int CreatureObjectAdapter::getPvpStatusBitmask() {
	return ((CreatureObjectImplementation*) impl)->getPvpStatusBitmask();
}

unsigned int CreatureObjectAdapter::getBankCredits() {
	return ((CreatureObjectImplementation*) impl)->getBankCredits();
}

unsigned int CreatureObjectAdapter::getCashCredits() {
	return ((CreatureObjectImplementation*) impl)->getCashCredits();
}

unsigned int CreatureObjectAdapter::getWoundsUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewWoundsUpdateCounter(int upd) {
	return ((CreatureObjectImplementation*) impl)->getNewWoundsUpdateCounter(upd);
}

unsigned int CreatureObjectAdapter::getBaseHealth() {
	return ((CreatureObjectImplementation*) impl)->getBaseHealth();
}

unsigned int CreatureObjectAdapter::getBaseStrength() {
	return ((CreatureObjectImplementation*) impl)->getBaseStrength();
}

unsigned int CreatureObjectAdapter::getBaseConstitution() {
	return ((CreatureObjectImplementation*) impl)->getBaseConstitution();
}

unsigned int CreatureObjectAdapter::getBaseAction() {
	return ((CreatureObjectImplementation*) impl)->getBaseAction();
}

unsigned int CreatureObjectAdapter::getBaseQuickness() {
	return ((CreatureObjectImplementation*) impl)->getBaseQuickness();
}

unsigned int CreatureObjectAdapter::getBaseStamina() {
	return ((CreatureObjectImplementation*) impl)->getBaseStamina();
}

unsigned int CreatureObjectAdapter::getBaseMind() {
	return ((CreatureObjectImplementation*) impl)->getBaseMind();
}

unsigned int CreatureObjectAdapter::getBaseFocus() {
	return ((CreatureObjectImplementation*) impl)->getBaseFocus();
}

unsigned int CreatureObjectAdapter::getBaseWillpower() {
	return ((CreatureObjectImplementation*) impl)->getBaseWillpower();
}

unsigned int CreatureObjectAdapter::getHealth() {
	return ((CreatureObjectImplementation*) impl)->getHealth();
}

unsigned int CreatureObjectAdapter::getStrength() {
	return ((CreatureObjectImplementation*) impl)->getStrength();
}

unsigned int CreatureObjectAdapter::getConstitution() {
	return ((CreatureObjectImplementation*) impl)->getConstitution();
}

unsigned int CreatureObjectAdapter::getAction() {
	return ((CreatureObjectImplementation*) impl)->getAction();
}

unsigned int CreatureObjectAdapter::getQuickness() {
	return ((CreatureObjectImplementation*) impl)->getQuickness();
}

unsigned int CreatureObjectAdapter::getStamina() {
	return ((CreatureObjectImplementation*) impl)->getStamina();
}

unsigned int CreatureObjectAdapter::getMind() {
	return ((CreatureObjectImplementation*) impl)->getMind();
}

unsigned int CreatureObjectAdapter::getFocus() {
	return ((CreatureObjectImplementation*) impl)->getFocus();
}

unsigned int CreatureObjectAdapter::getWillpower() {
	return ((CreatureObjectImplementation*) impl)->getWillpower();
}

unsigned int CreatureObjectAdapter::getHealthMax() {
	return ((CreatureObjectImplementation*) impl)->getHealthMax();
}

unsigned int CreatureObjectAdapter::getStrengthMax() {
	return ((CreatureObjectImplementation*) impl)->getStrengthMax();
}

unsigned int CreatureObjectAdapter::getConstitutionMax() {
	return ((CreatureObjectImplementation*) impl)->getConstitutionMax();
}

unsigned int CreatureObjectAdapter::getActionMax() {
	return ((CreatureObjectImplementation*) impl)->getActionMax();
}

unsigned int CreatureObjectAdapter::getQuicknessMax() {
	return ((CreatureObjectImplementation*) impl)->getQuicknessMax();
}

unsigned int CreatureObjectAdapter::getStaminaMax() {
	return ((CreatureObjectImplementation*) impl)->getStaminaMax();
}

unsigned int CreatureObjectAdapter::getMindMax() {
	return ((CreatureObjectImplementation*) impl)->getMindMax();
}

unsigned int CreatureObjectAdapter::getFocusMax() {
	return ((CreatureObjectImplementation*) impl)->getFocusMax();
}

unsigned int CreatureObjectAdapter::getWillpowerMax() {
	return ((CreatureObjectImplementation*) impl)->getWillpowerMax();
}

unsigned int CreatureObjectAdapter::getArmor() {
	return ((CreatureObjectImplementation*) impl)->getArmor();
}

float CreatureObjectAdapter::getArmorResist(int resistType) {
	return ((CreatureObjectImplementation*) impl)->getArmorResist(resistType);
}

unsigned int CreatureObjectAdapter::getHealthWounds() {
	return ((CreatureObjectImplementation*) impl)->getHealthWounds();
}

unsigned int CreatureObjectAdapter::getActionWounds() {
	return ((CreatureObjectImplementation*) impl)->getActionWounds();
}

unsigned int CreatureObjectAdapter::getMindWounds() {
	return ((CreatureObjectImplementation*) impl)->getMindWounds();
}

unsigned int CreatureObjectAdapter::getShockWounds() {
	return ((CreatureObjectImplementation*) impl)->getShockWounds();
}

unsigned int CreatureObjectAdapter::getHAMUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHAMMaxUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMMaxUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMMaxUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMMaxUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHealthEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getHealthEncumbrance();
}

unsigned int CreatureObjectAdapter::getActionEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getActionEncumbrance();
}

unsigned int CreatureObjectAdapter::getMindEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getMindEncumbrance();
}

unsigned long long CreatureObjectAdapter::getTargetID() {
	return ((CreatureObjectImplementation*) impl)->getTargetID();
}

SceneObject* CreatureObjectAdapter::getTarget() {
	return ((CreatureObjectImplementation*) impl)->getTarget();
}

unsigned long long CreatureObjectAdapter::getWeaponID() {
	return ((CreatureObjectImplementation*) impl)->getWeaponID();
}

unsigned long long CreatureObjectAdapter::getGroupID() {
	return ((CreatureObjectImplementation*) impl)->getGroupID();
}

unsigned long long CreatureObjectAdapter::getGuildID() {
	return ((CreatureObjectImplementation*) impl)->getGuildID();
}

Guild* CreatureObjectAdapter::getGuild() {
	return ((CreatureObjectImplementation*) impl)->getGuild();
}

float CreatureObjectAdapter::getSpeed() {
	return ((CreatureObjectImplementation*) impl)->getSpeed();
}

float CreatureObjectAdapter::getAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getAcceleration();
}

unsigned long long CreatureObjectAdapter::getDefenderID() {
	return ((CreatureObjectImplementation*) impl)->getDefenderID();
}

unsigned int CreatureObjectAdapter::getDefenderUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getDefenderUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewDefenderUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewDefenderUpdateCounter(cnt);
}

string& CreatureObjectAdapter::getPerformanceName() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceName();
}

unsigned int CreatureObjectAdapter::getPerformanceCounter() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceCounter();
}

unsigned int CreatureObjectAdapter::getInstrumentID() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentID();
}

string& CreatureObjectAdapter::getMood() {
	return ((CreatureObjectImplementation*) impl)->getMood();
}

unsigned char CreatureObjectAdapter::getMoodID() {
	return ((CreatureObjectImplementation*) impl)->getMoodID();
}

unsigned long long CreatureObjectAdapter::getGroupInviterID() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviterID();
}

unsigned long long CreatureObjectAdapter::getGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviteCounter();
}

unsigned long long CreatureObjectAdapter::getNewGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getNewGroupInviteCounter();
}

unsigned long long CreatureObjectAdapter::getWatchID() {
	return ((CreatureObjectImplementation*) impl)->getWatchID();
}

unsigned long long CreatureObjectAdapter::getListenID() {
	return ((CreatureObjectImplementation*) impl)->getListenID();
}

string& CreatureObjectAdapter::getGuildName() {
	return ((CreatureObjectImplementation*) impl)->getGuildName();
}

int CreatureObjectAdapter::getWeaponSpeedModifier() {
	return ((CreatureObjectImplementation*) impl)->getWeaponSpeedModifier();
}

unsigned int CreatureObjectAdapter::getSkillBoxesUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getSkillBoxesUpdateCounter();
}

unsigned int CreatureObjectAdapter::getSkillModsCounter() {
	return ((CreatureObjectImplementation*) impl)->getSkillModsCounter();
}

unsigned int CreatureObjectAdapter::getNewSkillModsCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewSkillModsCounter(cnt);
}

SceneObject* CreatureObjectAdapter::getInventoryItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getInventoryItem(oid);
}

void CreatureObjectAdapter::removeInventoryItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeInventoryItem(oid);
}

SceneObject* CreatureObjectAdapter::getLootItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getLootItem(oid);
}

void CreatureObjectAdapter::removeLootItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeLootItem(oid);
}

void CreatureObjectAdapter::broadcastMessage(BaseMessage* msg, int range, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->broadcastMessage(msg, range, doLock);
}

Inventory* CreatureObjectAdapter::getInventory() {
	return ((CreatureObjectImplementation*) impl)->getInventory();
}

Container* CreatureObjectAdapter::getLootContainer() {
	return ((CreatureObjectImplementation*) impl)->getLootContainer();
}

unsigned long long CreatureObjectAdapter::getNewItemID() {
	return ((CreatureObjectImplementation*) impl)->getNewItemID();
}

Weapon* CreatureObjectAdapter::getWeapon() {
	return ((CreatureObjectImplementation*) impl)->getWeapon();
}

Armor* CreatureObjectAdapter::getArmor(int type) {
	return ((CreatureObjectImplementation*) impl)->getArmor(type);
}

int CreatureObjectAdapter::getSkillMod(const string& name) {
	return ((CreatureObjectImplementation*) impl)->getSkillMod(name);
}

bool CreatureObjectAdapter::hasSkillMod(const string& name) {
	return ((CreatureObjectImplementation*) impl)->hasSkillMod(name);
}

int CreatureObjectAdapter::getSkillModBonus(const string& name) {
	return ((CreatureObjectImplementation*) impl)->getSkillModBonus(name);
}

bool CreatureObjectAdapter::hasSkillModBonus(const string& name) {
	return ((CreatureObjectImplementation*) impl)->hasSkillModBonus(name);
}

int CreatureObjectAdapter::getAccuracy() {
	return ((CreatureObjectImplementation*) impl)->getAccuracy();
}

int CreatureObjectAdapter::getDefenseBonus() {
	return ((CreatureObjectImplementation*) impl)->getDefenseBonus();
}

int CreatureObjectAdapter::getDamageBonus() {
	return ((CreatureObjectImplementation*) impl)->getDamageBonus();
}

int CreatureObjectAdapter::getConditionDamage() {
	return ((CreatureObjectImplementation*) impl)->getConditionDamage();
}

int CreatureObjectAdapter::getMaxCondition() {
	return ((CreatureObjectImplementation*) impl)->getMaxCondition();
}

int CreatureObjectAdapter::getCondition() {
	return ((CreatureObjectImplementation*) impl)->getCondition();
}

MountCreature* CreatureObjectAdapter::getMount() {
	return ((CreatureObjectImplementation*) impl)->getMount();
}

unsigned long long CreatureObjectAdapter::getLastServerMovementStamp() {
	return ((CreatureObjectImplementation*) impl)->getLastServerMovementStamp();
}

unsigned long long CreatureObjectAdapter::getCreatureLinkID() {
	return ((CreatureObjectImplementation*) impl)->getCreatureLinkID();
}

float CreatureObjectAdapter::getDistanceTo(CreatureObject* targetCreature) {
	return ((CreatureObjectImplementation*) impl)->getDistanceTo(targetCreature);
}

float CreatureObjectAdapter::getHeight() {
	return ((CreatureObjectImplementation*) impl)->getHeight();
}

unsigned int CreatureObjectAdapter::getCreatureSkillsCount() {
	return ((CreatureObjectImplementation*) impl)->getCreatureSkillsCount();
}

unsigned int CreatureObjectAdapter::getNewCreatureSkillsCount(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewCreatureSkillsCount(cnt);
}

unsigned int CreatureObjectAdapter::getLastMovementUpdateStamp() {
	return ((CreatureObjectImplementation*) impl)->getLastMovementUpdateStamp();
}

int CreatureObjectAdapter::getIgnoreMovementTests() {
	return ((CreatureObjectImplementation*) impl)->getIgnoreMovementTests();
}

unsigned int CreatureObjectAdapter::getDefenderListSize() {
	return ((CreatureObjectImplementation*) impl)->getDefenderListSize();
}

CreatureObject* CreatureObjectAdapter::getDefender(int idx) {
	return ((CreatureObjectImplementation*) impl)->getDefender(idx);
}

unsigned int CreatureObjectAdapter::getLevel() {
	return ((CreatureObjectImplementation*) impl)->getLevel();
}

int CreatureObjectAdapter::getCenteredBonus() {
	return ((CreatureObjectImplementation*) impl)->getCenteredBonus();
}

void CreatureObjectAdapter::sendSystemMessage(const string& message) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObjectAdapter::addInventoryItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->addInventoryItem(item);
}

void CreatureObjectAdapter::addLootItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->addLootItem(item);
}

void CreatureObjectAdapter::startDancing(const string& anim) {
	return ((CreatureObjectImplementation*) impl)->startDancing(anim);
}

void CreatureObjectAdapter::startPlayingMusic(const string& anim) {
	return ((CreatureObjectImplementation*) impl)->startPlayingMusic(anim);
}

void CreatureObjectAdapter::startWatch(unsigned long long entid) {
	return ((CreatureObjectImplementation*) impl)->startWatch(entid);
}

void CreatureObjectAdapter::startListen(unsigned long long entid) {
	return ((CreatureObjectImplementation*) impl)->startListen(entid);
}

void CreatureObjectAdapter::stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->stopWatch(entid, doSendPackets, forced, doLock);
}

void CreatureObjectAdapter::stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock) {
	return ((CreatureObjectImplementation*) impl)->stopListen(entid, doSendPackets, forced, doLock);
}

bool CreatureObjectAdapter::isPlayingMusic() {
	return ((CreatureObjectImplementation*) impl)->isPlayingMusic();
}

bool CreatureObjectAdapter::isDancing() {
	return ((CreatureObjectImplementation*) impl)->isDancing();
}

void CreatureObjectAdapter::stopDancing() {
	return ((CreatureObjectImplementation*) impl)->stopDancing();
}

void CreatureObjectAdapter::stopPlayingMusic() {
	return ((CreatureObjectImplementation*) impl)->stopPlayingMusic();
}

void CreatureObjectAdapter::addListener(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->addListener(creature);
}

void CreatureObjectAdapter::addWatcher(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->addWatcher(creature);
}

void CreatureObjectAdapter::removeListener(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->removeListener(creature);
}

void CreatureObjectAdapter::removeWatcher(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->removeWatcher(creature);
}

void CreatureObjectAdapter::activateRecovery() {
	return ((CreatureObjectImplementation*) impl)->activateRecovery();
}

int CreatureObjectAdapter::getCreatureSkillsSize() {
	return ((CreatureObjectImplementation*) impl)->getCreatureSkillsSize();
}

string& CreatureObjectAdapter::getSkill(int idx) {
	return ((CreatureObjectImplementation*) impl)->getSkill(idx);
}

bool CreatureObjectAdapter::hasSkill(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->hasSkill(skillCRC);
}

void CreatureObjectAdapter::mountCreature(MountCreature* mnt, bool lockMount) {
	return ((CreatureObjectImplementation*) impl)->mountCreature(mnt, lockMount);
}

void CreatureObjectAdapter::dismount(bool lockMount, bool ignoreCooldown) {
	return ((CreatureObjectImplementation*) impl)->dismount(lockMount, ignoreCooldown);
}

void CreatureObjectAdapter::addCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->addCashCredits(credits);
}

void CreatureObjectAdapter::addBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->addBankCredits(credits);
}

void CreatureObjectAdapter::subtractCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->subtractCashCredits(credits);
}

void CreatureObjectAdapter::subtractBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->subtractBankCredits(credits);
}

void CreatureObjectAdapter::setCashCredits(int credits) {
	return ((CreatureObjectImplementation*) impl)->setCashCredits(credits);
}

void CreatureObjectAdapter::setBankCredits(int credits) {
	return ((CreatureObjectImplementation*) impl)->setBankCredits(credits);
}

void CreatureObjectAdapter::applyBuff(const string& type, int value, float duration) {
	return ((CreatureObjectImplementation*) impl)->applyBuff(type, value, duration);
}

bool CreatureObjectAdapter::verifyCashCredits(int creditsToRemove) {
	return ((CreatureObjectImplementation*) impl)->verifyCashCredits(creditsToRemove);
}

bool CreatureObjectAdapter::verifyBankCredits(int creditsToRemove) {
	return ((CreatureObjectImplementation*) impl)->verifyBankCredits(creditsToRemove);
}

/*
 *	CreatureObjectHelper
 */

CreatureObjectHelper::CreatureObjectHelper() {
	className = "CreatureObject";

	ObjectRequestBroker::instance()->registerClass(className, this);
}

void CreatureObjectHelper::finalizeHelper() {
	CreatureObjectHelper::finalize();
}

ORBObject* CreatureObjectHelper::instantiateObject() {
	return new CreatureObject();
}

ORBObjectAdapter* CreatureObjectHelper::createAdapter(ORBObjectServant* obj) {
	ORBObjectAdapter* adapter = new CreatureObjectAdapter((CreatureObjectImplementation*) obj);

	ORBObjectStub* stub = new CreatureObject(obj);
	stub->_setORBClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	CreatureObjectServant
 */

CreatureObjectServant::CreatureObjectServant(unsigned long long oid) : SceneObjectImplementation(oid) {
	_classHelper = CreatureObjectHelper::instance();
}

CreatureObjectServant::~CreatureObjectServant() {
}

void CreatureObjectServant::_setStub(ORBObjectStub* stub) {
	_this = (CreatureObject*) stub;
	SceneObjectServant::_setStub(stub);
}

ORBObjectStub* CreatureObjectServant::_getStub() {
	return _this;
}

