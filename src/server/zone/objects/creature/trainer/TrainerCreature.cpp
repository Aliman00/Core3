/*
 *	server/zone/objects/creature/trainer/TrainerCreature.cpp generated by engine3 IDL compiler 0.55
 */

#include "../Creature.h"

#include "../../player/Player.h"

#include "../../scene/SceneObject.h"

#include "TrainerCreature.h"

#include "TrainerCreatureImplementation.h"

/*
 *	TrainerCreatureStub
 */

TrainerCreature::TrainerCreature() : Creature(NULL) {
}

TrainerCreature::TrainerCreature(DistributedObjectServant* obj) : Creature(obj) {
}

TrainerCreature::TrainerCreature(TrainerCreature& ref) : Creature(ref) {
}

TrainerCreature::~TrainerCreature() {
}

TrainerCreature* TrainerCreature::clone() {
	return new TrainerCreature(*this);
}


void TrainerCreature::sendConversationStartTo(SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendConversationStartTo(obj);
}

void TrainerCreature::sendSkillBoxes(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendSkillBoxes(player);
}

void TrainerCreature::selectConversationOption(int option, SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->selectConversationOption(option, obj);
}

/*
 *	TrainerCreatureAdapter
 */

TrainerCreatureAdapter::TrainerCreatureAdapter(TrainerCreatureImplementation* obj) : CreatureAdapter(obj) {
}

Packet* TrainerCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		sendSkillBoxes((Player*) inv->getObjectParameter());
		break;
	case 8:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TrainerCreatureAdapter::sendConversationStartTo(SceneObject* obj) {
	return ((TrainerCreatureImplementation*) impl)->sendConversationStartTo(obj);
}

void TrainerCreatureAdapter::sendSkillBoxes(Player* player) {
	return ((TrainerCreatureImplementation*) impl)->sendSkillBoxes(player);
}

void TrainerCreatureAdapter::selectConversationOption(int option, SceneObject* obj) {
	return ((TrainerCreatureImplementation*) impl)->selectConversationOption(option, obj);
}

/*
 *	TrainerCreatureHelper
 */

TrainerCreatureHelper* TrainerCreatureHelper::staticInitializer = TrainerCreatureHelper::instance();

TrainerCreatureHelper::TrainerCreatureHelper() {
	className = "TrainerCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TrainerCreatureHelper::finalizeHelper() {
	TrainerCreatureHelper::finalize();
}

DistributedObject* TrainerCreatureHelper::instantiateObject() {
	return new TrainerCreature();
}

DistributedObjectAdapter* TrainerCreatureHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new TrainerCreatureAdapter((TrainerCreatureImplementation*) obj);

	DistributedObjectStub* stub = new TrainerCreature(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	TrainerCreatureServant
 */

TrainerCreatureServant::TrainerCreatureServant(unsigned long long oid) : CreatureImplementation(oid) {
	_classHelper = TrainerCreatureHelper::instance();
}

TrainerCreatureServant::~TrainerCreatureServant() {
}

void TrainerCreatureServant::_setStub(DistributedObjectStub* stub) {
	_this = (TrainerCreature*) stub;
	CreatureServant::_setStub(stub);
}

DistributedObjectStub* TrainerCreatureServant::_getStub() {
	return _this;
}

