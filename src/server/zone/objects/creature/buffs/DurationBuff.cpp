/*
 *	server/zone/objects/creature/buffs/DurationBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "DurationBuff.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/BuffDurationEvent.h"

#include "server/zone/objects/creature/buffs/SpiceDownerBuff.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/creature/buffs/BuffDurationEvent.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "engine/core/Task.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/templates/tangible/SharedWeaponObjectTemplate.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/service/Message.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/ZoneClientSession.h"

#include "system/lang/Time.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

/*
 *	DurationBuffStub
 */

enum {RPC_ACTIVATE__BOOL_ = 6};

DurationBuff::DurationBuff(CreatureObject* creo, unsigned int buffcrc, float duration) : Buff(DummyConstructorParameter::instance()) {
	DurationBuffImplementation* _implementation = new DurationBuffImplementation(creo, buffcrc, duration);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

DurationBuff::DurationBuff(DummyConstructorParameter* param) : Buff(param) {
}

DurationBuff::~DurationBuff() {
}


void DurationBuff::activate(bool applyModifiers) {
	DurationBuffImplementation* _implementation = (DurationBuffImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else
		_implementation->activate(applyModifiers);
}

DistributedObjectServant* DurationBuff::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void DurationBuff::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<DurationBuffImplementation*>(servant));
}

/*
 *	DurationBuffImplementation
 */

DurationBuffImplementation::DurationBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


DurationBuffImplementation::~DurationBuffImplementation() {
}


void DurationBuffImplementation::finalize() {
}

void DurationBuffImplementation::_initializeImplementation() {
	_setClassHelper(DurationBuffHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void DurationBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (DurationBuff*) stub;
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* DurationBuffImplementation::_getStub() {
	return _this;
}

DurationBuffImplementation::operator const DurationBuff*() {
	return _this;
}

Object* DurationBuffImplementation::clone() {
	return dynamic_cast<Object*>(new DurationBuffImplementation(*this));
}


void DurationBuffImplementation::lock(bool doLock) {
}

void DurationBuffImplementation::lock(ManagedObject* obj) {
}

void DurationBuffImplementation::rlock(bool doLock) {
}

void DurationBuffImplementation::wlock(bool doLock) {
}

void DurationBuffImplementation::wlock(ManagedObject* obj) {
}

void DurationBuffImplementation::unlock(bool doLock) {
}

void DurationBuffImplementation::runlock(bool doLock) {
}

void DurationBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("DurationBuff");

}

void DurationBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(DurationBuffImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DurationBuffImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuffImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void DurationBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DurationBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DurationBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + BuffImplementation::writeObjectMembers(stream);
}

DurationBuffImplementation::DurationBuffImplementation(CreatureObject* creo, unsigned int buffcrc, float duration) : BuffImplementation(creo, buffcrc, duration, BuffType::FOOD) {
	_initializeImplementation();
}

void DurationBuffImplementation::activate(bool applyModifiers) {
	// server/zone/objects/creature/buffs/DurationBuff.idl():  		super.activate(false);
	BuffImplementation::activate(false);
}

/*
 *	DurationBuffAdapter
 */

DurationBuffAdapter::DurationBuffAdapter(DurationBuffImplementation* obj) : BuffAdapter(obj) {
}

Packet* DurationBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_ACTIVATE__BOOL_:
		activate(inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DurationBuffAdapter::activate(bool applyModifiers) {
	((DurationBuffImplementation*) impl)->activate(applyModifiers);
}

/*
 *	DurationBuffHelper
 */

DurationBuffHelper* DurationBuffHelper::staticInitializer = DurationBuffHelper::instance();

DurationBuffHelper::DurationBuffHelper() {
	className = "DurationBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void DurationBuffHelper::finalizeHelper() {
	DurationBuffHelper::finalize();
}

DistributedObject* DurationBuffHelper::instantiateObject() {
	return new DurationBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* DurationBuffHelper::instantiateServant() {
	return new DurationBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DurationBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DurationBuffAdapter((DurationBuffImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

