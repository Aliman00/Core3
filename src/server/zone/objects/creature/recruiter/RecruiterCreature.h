/*
 *	server/zone/objects/creature/recruiter/RecruiterCreature.h generated by engine3 IDL compiler 0.55
 */

#ifndef RECRUITERCREATURE_H_
#define RECRUITERCREATURE_H_

#include "engine/orb/DistributedObjectBroker.h"

class Creature;

class SceneObject;

class Player;

#include "../Creature.h"

class RecruiterCreature : public Creature {
protected:
	RecruiterCreature();
	RecruiterCreature(DistributedObjectServant* obj);
	RecruiterCreature(RecruiterCreature& ref);

	virtual ~RecruiterCreature();

public:
	RecruiterCreature* clone();

	void sendConversationStartTo(SceneObject* obj);

	void sendFactions(Player* player);

	void selectConversationOption(int option, SceneObject* obj);

protected:
	friend class RecruiterCreatureHelper;
};

class RecruiterCreatureImplementation;

class RecruiterCreatureAdapter : public CreatureAdapter {
public:
	RecruiterCreatureAdapter(RecruiterCreatureImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendConversationStartTo(SceneObject* obj);

	void sendFactions(Player* player);

	void selectConversationOption(int option, SceneObject* obj);

};

class RecruiterCreatureHelper : public DistributedObjectClassHelper, public Singleton<RecruiterCreatureHelper> {
public:
	RecruiterCreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<RecruiterCreatureHelper>;
};

#include "../CreatureImplementation.h"

class RecruiterCreatureServant : public CreatureImplementation {
public:
	RecruiterCreature* _this;

public:
	RecruiterCreatureServant(unsigned long long oid);
	virtual ~RecruiterCreatureServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*RECRUITERCREATURE_H_*/
