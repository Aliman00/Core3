/*
 *	server/zone/objects/intangible/player/PlayerDataObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef PLAYERDATAOBJECT_H_
#define PLAYERDATAOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/StandaloneBaseMessage.h"

class ZoneClientSession;

class IntangibleObject;

class PlayerObject;

#include "../IntangibleObject.h"

class PlayerDataObject : public IntangibleObject {
public:
	PlayerDataObject(unsigned long long objectid);

	void sendTo(PlayerObject* player, bool close = true);

	void sendToOwner();

	void setClient(ZoneClientSession* client);

	void setLinkedPlayer(PlayerObject* player);

	void setAccessLevel(unsigned char level);

	void setCharacterBitmask(unsigned int bitmask);

	void setCurrentTitle(const String& title);

	void setForcePower(unsigned int power);

	void setForcePowerMax(unsigned int power);

	void setFoodFilling(unsigned int filling);

	void setFoodFillingMax(unsigned int filling);

	void setDrinkFilling(unsigned int filling);

	void setDrinkFillingMax(unsigned int filling);

	void setLanguageID(unsigned int id);

	void setJediState(unsigned int jedistate);

	ZoneClientSession* getClient();

	PlayerObject* getLinkedPlayer();

	unsigned char getAccessLevel();

	unsigned int getCharacterBitmask();

	String& getCurrentTitle();

	unsigned int getForcePower();

	unsigned int getForcePowerMax();

	unsigned int getFoodFilling();

	unsigned int getFoodFillingMax();

	unsigned int getDrinkFilling();

	unsigned int getDrinkFillingMax();

	unsigned int getLanguageID();

	unsigned int getJediState();

	bool isPrivileged();

protected:
	PlayerDataObject(DummyConstructorParameter* param);

	virtual ~PlayerDataObject();

	String _return_getCurrentTitle;

	friend class PlayerDataObjectHelper;
};

class PlayerDataObjectImplementation;

class PlayerDataObjectAdapter : public IntangibleObjectAdapter {
public:
	PlayerDataObjectAdapter(PlayerDataObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(PlayerObject* player, bool close);

	void sendToOwner();

	void setClient(ZoneClientSession* client);

	void setLinkedPlayer(PlayerObject* player);

	void setAccessLevel(unsigned char level);

	void setCharacterBitmask(unsigned int bitmask);

	void setCurrentTitle(const String& title);

	void setForcePower(unsigned int power);

	void setForcePowerMax(unsigned int power);

	void setFoodFilling(unsigned int filling);

	void setFoodFillingMax(unsigned int filling);

	void setDrinkFilling(unsigned int filling);

	void setDrinkFillingMax(unsigned int filling);

	void setLanguageID(unsigned int id);

	void setJediState(unsigned int jedistate);

	ZoneClientSession* getClient();

	PlayerObject* getLinkedPlayer();

	unsigned char getAccessLevel();

	unsigned int getCharacterBitmask();

	String& getCurrentTitle();

	unsigned int getForcePower();

	unsigned int getForcePowerMax();

	unsigned int getFoodFilling();

	unsigned int getFoodFillingMax();

	unsigned int getDrinkFilling();

	unsigned int getDrinkFillingMax();

	unsigned int getLanguageID();

	unsigned int getJediState();

	bool isPrivileged();

protected:
	String _param0_setCurrentTitle__String_;
};

class PlayerDataObjectHelper : public DistributedObjectClassHelper, public Singleton<PlayerDataObjectHelper> {
	static PlayerDataObjectHelper* staticInitializer;

public:
	PlayerDataObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<PlayerDataObjectHelper>;
};

#include "../IntangibleObjectImplementation.h"

class PlayerDataObjectServant : public IntangibleObjectImplementation {
public:
	PlayerDataObject* _this;

public:
	PlayerDataObjectServant(unsigned long long objectid, int type);
	virtual ~PlayerDataObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*PLAYERDATAOBJECT_H_*/
