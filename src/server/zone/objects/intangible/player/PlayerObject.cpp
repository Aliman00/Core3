/*
 *	server/zone/objects/intangible/player/PlayerObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlayerObject.h"

#include "PlayerObjectImplementation.h"

#include "../../../ZoneClientSession.h"

#include "../IntangibleObject.h"

#include "../../tangible/creature/CreatureObject.h"

/*
 *	PlayerObjectStub
 */

PlayerObject::PlayerObject(unsigned long long objectid, CreatureObject* linkedcreature) : IntangibleObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerObjectImplementation(objectid, linkedcreature);
	_impl->_setStub(this);
}

PlayerObject::PlayerObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

PlayerObject::~PlayerObject() {
}

void PlayerObject::sendMessage(BaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendMessage(msg);
}

void PlayerObject::sendMessage(StandaloneBaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendMessage(msg);
}

void PlayerObject::setClient(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setClient(client);
}

void PlayerObject::setAccessLevel(unsigned char level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedCharParameter(level);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setAccessLevel(level);
}

void PlayerObject::setLinkedCreature(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setLinkedCreature(creature);
}

void PlayerObject::setFirstName(const String& fname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(fname);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setFirstName(fname);
}

void PlayerObject::setCharacterID(unsigned long long characterid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedLongParameter(characterid);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setCharacterID(characterid);
}

ZoneClientSession* PlayerObject::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getClient();
}

unsigned char PlayerObject::getAccessLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getAccessLevel();
}

CreatureObject* PlayerObject::getLinkedCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getLinkedCreature();
}

String& PlayerObject::getFirstName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getFirstName);
		return _return_getFirstName;
	} else
		return ((PlayerObjectImplementation*) _impl)->getFirstName();
}

unsigned long long PlayerObject::getCharacterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getCharacterID();
}

bool PlayerObject::isOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOnline();
}

bool PlayerObject::isOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOffline();
}

bool PlayerObject::isLoading() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLoading();
}

bool PlayerObject::isLinkDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLinkDead();
}

bool PlayerObject::isLoggingIn() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLoggingIn();
}

bool PlayerObject::isLoggingOut() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isLoggingOut();
}

bool PlayerObject::isPrivileged() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isPrivileged();
}

/*
 *	PlayerObjectAdapter
 */

PlayerObjectAdapter::PlayerObjectAdapter(PlayerObjectImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* PlayerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 7:
		sendMessage((StandaloneBaseMessage*) inv->getObjectParameter());
		break;
	case 8:
		setClient((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 9:
		setAccessLevel(inv->getUnsignedCharParameter());
		break;
	case 10:
		setLinkedCreature((CreatureObject*) inv->getObjectParameter());
		break;
	case 11:
		setFirstName(inv->getAsciiParameter(_param0_setFirstName__String_));
		break;
	case 12:
		setCharacterID(inv->getUnsignedLongParameter());
		break;
	case 13:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 14:
		resp->insertByte(getAccessLevel());
		break;
	case 15:
		resp->insertLong(getLinkedCreature()->_getObjectID());
		break;
	case 16:
		resp->insertAscii(getFirstName());
		break;
	case 17:
		resp->insertLong(getCharacterID());
		break;
	case 18:
		resp->insertBoolean(isOnline());
		break;
	case 19:
		resp->insertBoolean(isOffline());
		break;
	case 20:
		resp->insertBoolean(isLoading());
		break;
	case 21:
		resp->insertBoolean(isLinkDead());
		break;
	case 22:
		resp->insertBoolean(isLoggingIn());
		break;
	case 23:
		resp->insertBoolean(isLoggingOut());
		break;
	case 24:
		resp->insertBoolean(isPrivileged());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerObjectAdapter::sendMessage(BaseMessage* msg) {
	return ((PlayerObjectImplementation*) impl)->sendMessage(msg);
}

void PlayerObjectAdapter::sendMessage(StandaloneBaseMessage* msg) {
	return ((PlayerObjectImplementation*) impl)->sendMessage(msg);
}

void PlayerObjectAdapter::setClient(ZoneClientSession* client) {
	return ((PlayerObjectImplementation*) impl)->setClient(client);
}

void PlayerObjectAdapter::setAccessLevel(unsigned char level) {
	return ((PlayerObjectImplementation*) impl)->setAccessLevel(level);
}

void PlayerObjectAdapter::setLinkedCreature(CreatureObject* creature) {
	return ((PlayerObjectImplementation*) impl)->setLinkedCreature(creature);
}

void PlayerObjectAdapter::setFirstName(const String& fname) {
	return ((PlayerObjectImplementation*) impl)->setFirstName(fname);
}

void PlayerObjectAdapter::setCharacterID(unsigned long long characterid) {
	return ((PlayerObjectImplementation*) impl)->setCharacterID(characterid);
}

ZoneClientSession* PlayerObjectAdapter::getClient() {
	return ((PlayerObjectImplementation*) impl)->getClient();
}

unsigned char PlayerObjectAdapter::getAccessLevel() {
	return ((PlayerObjectImplementation*) impl)->getAccessLevel();
}

CreatureObject* PlayerObjectAdapter::getLinkedCreature() {
	return ((PlayerObjectImplementation*) impl)->getLinkedCreature();
}

String& PlayerObjectAdapter::getFirstName() {
	return ((PlayerObjectImplementation*) impl)->getFirstName();
}

unsigned long long PlayerObjectAdapter::getCharacterID() {
	return ((PlayerObjectImplementation*) impl)->getCharacterID();
}

bool PlayerObjectAdapter::isOnline() {
	return ((PlayerObjectImplementation*) impl)->isOnline();
}

bool PlayerObjectAdapter::isOffline() {
	return ((PlayerObjectImplementation*) impl)->isOffline();
}

bool PlayerObjectAdapter::isLoading() {
	return ((PlayerObjectImplementation*) impl)->isLoading();
}

bool PlayerObjectAdapter::isLinkDead() {
	return ((PlayerObjectImplementation*) impl)->isLinkDead();
}

bool PlayerObjectAdapter::isLoggingIn() {
	return ((PlayerObjectImplementation*) impl)->isLoggingIn();
}

bool PlayerObjectAdapter::isLoggingOut() {
	return ((PlayerObjectImplementation*) impl)->isLoggingOut();
}

bool PlayerObjectAdapter::isPrivileged() {
	return ((PlayerObjectImplementation*) impl)->isPrivileged();
}

/*
 *	PlayerObjectHelper
 */

PlayerObjectHelper* PlayerObjectHelper::staticInitializer = PlayerObjectHelper::instance();

PlayerObjectHelper::PlayerObjectHelper() {
	className = "PlayerObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerObjectHelper::finalizeHelper() {
	PlayerObjectHelper::finalize();
}

DistributedObject* PlayerObjectHelper::instantiateObject() {
	return new PlayerObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerObjectAdapter((PlayerObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerObjectServant
 */

PlayerObjectServant::PlayerObjectServant(unsigned long long objectid, int type) : IntangibleObjectImplementation(objectid, type) {
	_classHelper = PlayerObjectHelper::instance();
}

PlayerObjectServant::~PlayerObjectServant() {
}

void PlayerObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerObject*) stub;
	IntangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerObjectServant::_getStub() {
	return _this;
}

