/*
 *	server/zone/objects/intangible/player/PlayerDataObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlayerDataObject.h"

#include "PlayerDataObjectImplementation.h"

#include "../../../ZoneClientSession.h"

#include "../IntangibleObject.h"

#include "../../tangible/creature/player/PlayerObject.h"

/*
 *	PlayerDataObjectStub
 */

PlayerDataObject::PlayerDataObject(unsigned long long objectid) : IntangibleObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerDataObjectImplementation(objectid);
	_impl->_setStub(this);
}

PlayerDataObject::PlayerDataObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

PlayerDataObject::~PlayerDataObject() {
}

void PlayerDataObject::sendTo(PlayerObject* player, bool close) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(close);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->sendTo(player, close);
}

void PlayerDataObject::sendToOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->sendToOwner();
}

void PlayerDataObject::setClient(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setClient(client);
}

void PlayerDataObject::setLinkedPlayer(PlayerObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setLinkedPlayer(player);
}

void PlayerDataObject::setAccessLevel(unsigned char level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedCharParameter(level);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setAccessLevel(level);
}

void PlayerDataObject::setCharacterBitmask(unsigned int bitmask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(bitmask);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setCharacterBitmask(bitmask);
}

void PlayerDataObject::setCurrentTitle(const String& title) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(title);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setCurrentTitle(title);
}

void PlayerDataObject::setForcePower(unsigned int power) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setForcePower(power);
}

void PlayerDataObject::setForcePowerMax(unsigned int power) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setForcePowerMax(power);
}

void PlayerDataObject::setFoodFilling(unsigned int filling) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedIntParameter(filling);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setFoodFilling(filling);
}

void PlayerDataObject::setFoodFillingMax(unsigned int filling) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedIntParameter(filling);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setFoodFillingMax(filling);
}

void PlayerDataObject::setDrinkFilling(unsigned int filling) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addUnsignedIntParameter(filling);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setDrinkFilling(filling);
}

void PlayerDataObject::setDrinkFillingMax(unsigned int filling) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedIntParameter(filling);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setDrinkFillingMax(filling);
}

void PlayerDataObject::setLanguageID(unsigned int id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setLanguageID(id);
}

void PlayerDataObject::setJediState(unsigned int jedistate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedIntParameter(jedistate);

		method.executeWithVoidReturn();
	} else
		((PlayerDataObjectImplementation*) _impl)->setJediState(jedistate);
}

ZoneClientSession* PlayerDataObject::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getClient();
}

PlayerObject* PlayerDataObject::getLinkedPlayer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return (PlayerObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getLinkedPlayer();
}

unsigned char PlayerDataObject::getAccessLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getAccessLevel();
}

unsigned int PlayerDataObject::getCharacterBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getCharacterBitmask();
}

String& PlayerDataObject::getCurrentTitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithAsciiReturn(_return_getCurrentTitle);
		return _return_getCurrentTitle;
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getCurrentTitle();
}

unsigned int PlayerDataObject::getForcePower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getForcePower();
}

unsigned int PlayerDataObject::getForcePowerMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getForcePowerMax();
}

unsigned int PlayerDataObject::getFoodFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getFoodFilling();
}

unsigned int PlayerDataObject::getFoodFillingMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getFoodFillingMax();
}

unsigned int PlayerDataObject::getDrinkFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getDrinkFilling();
}

unsigned int PlayerDataObject::getDrinkFillingMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getDrinkFillingMax();
}

unsigned int PlayerDataObject::getLanguageID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getLanguageID();
}

unsigned int PlayerDataObject::getJediState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->getJediState();
}

bool PlayerDataObject::isPrivileged() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerDataObjectImplementation*) _impl)->isPrivileged();
}

/*
 *	PlayerDataObjectAdapter
 */

PlayerDataObjectAdapter::PlayerDataObjectAdapter(PlayerDataObjectImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* PlayerDataObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((PlayerObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		sendToOwner();
		break;
	case 8:
		setClient((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 9:
		setLinkedPlayer((PlayerObject*) inv->getObjectParameter());
		break;
	case 10:
		setAccessLevel(inv->getUnsignedCharParameter());
		break;
	case 11:
		setCharacterBitmask(inv->getUnsignedIntParameter());
		break;
	case 12:
		setCurrentTitle(inv->getAsciiParameter(_param0_setCurrentTitle__String_));
		break;
	case 13:
		setForcePower(inv->getUnsignedIntParameter());
		break;
	case 14:
		setForcePowerMax(inv->getUnsignedIntParameter());
		break;
	case 15:
		setFoodFilling(inv->getUnsignedIntParameter());
		break;
	case 16:
		setFoodFillingMax(inv->getUnsignedIntParameter());
		break;
	case 17:
		setDrinkFilling(inv->getUnsignedIntParameter());
		break;
	case 18:
		setDrinkFillingMax(inv->getUnsignedIntParameter());
		break;
	case 19:
		setLanguageID(inv->getUnsignedIntParameter());
		break;
	case 20:
		setJediState(inv->getUnsignedIntParameter());
		break;
	case 21:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 22:
		resp->insertLong(getLinkedPlayer()->_getObjectID());
		break;
	case 23:
		resp->insertByte(getAccessLevel());
		break;
	case 24:
		resp->insertInt(getCharacterBitmask());
		break;
	case 25:
		resp->insertAscii(getCurrentTitle());
		break;
	case 26:
		resp->insertInt(getForcePower());
		break;
	case 27:
		resp->insertInt(getForcePowerMax());
		break;
	case 28:
		resp->insertInt(getFoodFilling());
		break;
	case 29:
		resp->insertInt(getFoodFillingMax());
		break;
	case 30:
		resp->insertInt(getDrinkFilling());
		break;
	case 31:
		resp->insertInt(getDrinkFillingMax());
		break;
	case 32:
		resp->insertInt(getLanguageID());
		break;
	case 33:
		resp->insertInt(getJediState());
		break;
	case 34:
		resp->insertBoolean(isPrivileged());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerDataObjectAdapter::sendTo(PlayerObject* player, bool close) {
	return ((PlayerDataObjectImplementation*) impl)->sendTo(player, close);
}

void PlayerDataObjectAdapter::sendToOwner() {
	return ((PlayerDataObjectImplementation*) impl)->sendToOwner();
}

void PlayerDataObjectAdapter::setClient(ZoneClientSession* client) {
	return ((PlayerDataObjectImplementation*) impl)->setClient(client);
}

void PlayerDataObjectAdapter::setLinkedPlayer(PlayerObject* player) {
	return ((PlayerDataObjectImplementation*) impl)->setLinkedPlayer(player);
}

void PlayerDataObjectAdapter::setAccessLevel(unsigned char level) {
	return ((PlayerDataObjectImplementation*) impl)->setAccessLevel(level);
}

void PlayerDataObjectAdapter::setCharacterBitmask(unsigned int bitmask) {
	return ((PlayerDataObjectImplementation*) impl)->setCharacterBitmask(bitmask);
}

void PlayerDataObjectAdapter::setCurrentTitle(const String& title) {
	return ((PlayerDataObjectImplementation*) impl)->setCurrentTitle(title);
}

void PlayerDataObjectAdapter::setForcePower(unsigned int power) {
	return ((PlayerDataObjectImplementation*) impl)->setForcePower(power);
}

void PlayerDataObjectAdapter::setForcePowerMax(unsigned int power) {
	return ((PlayerDataObjectImplementation*) impl)->setForcePowerMax(power);
}

void PlayerDataObjectAdapter::setFoodFilling(unsigned int filling) {
	return ((PlayerDataObjectImplementation*) impl)->setFoodFilling(filling);
}

void PlayerDataObjectAdapter::setFoodFillingMax(unsigned int filling) {
	return ((PlayerDataObjectImplementation*) impl)->setFoodFillingMax(filling);
}

void PlayerDataObjectAdapter::setDrinkFilling(unsigned int filling) {
	return ((PlayerDataObjectImplementation*) impl)->setDrinkFilling(filling);
}

void PlayerDataObjectAdapter::setDrinkFillingMax(unsigned int filling) {
	return ((PlayerDataObjectImplementation*) impl)->setDrinkFillingMax(filling);
}

void PlayerDataObjectAdapter::setLanguageID(unsigned int id) {
	return ((PlayerDataObjectImplementation*) impl)->setLanguageID(id);
}

void PlayerDataObjectAdapter::setJediState(unsigned int jedistate) {
	return ((PlayerDataObjectImplementation*) impl)->setJediState(jedistate);
}

ZoneClientSession* PlayerDataObjectAdapter::getClient() {
	return ((PlayerDataObjectImplementation*) impl)->getClient();
}

PlayerObject* PlayerDataObjectAdapter::getLinkedPlayer() {
	return ((PlayerDataObjectImplementation*) impl)->getLinkedPlayer();
}

unsigned char PlayerDataObjectAdapter::getAccessLevel() {
	return ((PlayerDataObjectImplementation*) impl)->getAccessLevel();
}

unsigned int PlayerDataObjectAdapter::getCharacterBitmask() {
	return ((PlayerDataObjectImplementation*) impl)->getCharacterBitmask();
}

String& PlayerDataObjectAdapter::getCurrentTitle() {
	return ((PlayerDataObjectImplementation*) impl)->getCurrentTitle();
}

unsigned int PlayerDataObjectAdapter::getForcePower() {
	return ((PlayerDataObjectImplementation*) impl)->getForcePower();
}

unsigned int PlayerDataObjectAdapter::getForcePowerMax() {
	return ((PlayerDataObjectImplementation*) impl)->getForcePowerMax();
}

unsigned int PlayerDataObjectAdapter::getFoodFilling() {
	return ((PlayerDataObjectImplementation*) impl)->getFoodFilling();
}

unsigned int PlayerDataObjectAdapter::getFoodFillingMax() {
	return ((PlayerDataObjectImplementation*) impl)->getFoodFillingMax();
}

unsigned int PlayerDataObjectAdapter::getDrinkFilling() {
	return ((PlayerDataObjectImplementation*) impl)->getDrinkFilling();
}

unsigned int PlayerDataObjectAdapter::getDrinkFillingMax() {
	return ((PlayerDataObjectImplementation*) impl)->getDrinkFillingMax();
}

unsigned int PlayerDataObjectAdapter::getLanguageID() {
	return ((PlayerDataObjectImplementation*) impl)->getLanguageID();
}

unsigned int PlayerDataObjectAdapter::getJediState() {
	return ((PlayerDataObjectImplementation*) impl)->getJediState();
}

bool PlayerDataObjectAdapter::isPrivileged() {
	return ((PlayerDataObjectImplementation*) impl)->isPrivileged();
}

/*
 *	PlayerDataObjectHelper
 */

PlayerDataObjectHelper* PlayerDataObjectHelper::staticInitializer = PlayerDataObjectHelper::instance();

PlayerDataObjectHelper::PlayerDataObjectHelper() {
	className = "PlayerDataObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerDataObjectHelper::finalizeHelper() {
	PlayerDataObjectHelper::finalize();
}

DistributedObject* PlayerDataObjectHelper::instantiateObject() {
	return new PlayerDataObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerDataObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerDataObjectAdapter((PlayerDataObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerDataObjectServant
 */

PlayerDataObjectServant::PlayerDataObjectServant(unsigned long long objectid, int type) : IntangibleObjectImplementation(objectid, type) {
	_classHelper = PlayerDataObjectHelper::instance();
}

PlayerDataObjectServant::~PlayerDataObjectServant() {
}

void PlayerDataObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerDataObject*) stub;
	IntangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerDataObjectServant::_getStub() {
	return _this;
}

