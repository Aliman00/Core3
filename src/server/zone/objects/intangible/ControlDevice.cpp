/*
 *	server/zone/objects/intangible/ControlDevice.cpp generated by engine3 IDL compiler 0.60
 */

#include "ControlDevice.h"

#include "server/zone/objects/creature/VehicleObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	ControlDeviceStub
 */

enum {RPC_UPDATETODATABASEALLOBJECTS__BOOL_ = 6,RPC_STOREOBJECT__PLAYERCREATURE_,RPC_GENERATEOBJECT__PLAYERCREATURE_,RPC_SETCONTROLLEDOBJECT__CREATUREOBJECT_,RPC_GETCONTROLLEDOBJECT__,RPC_ISCONTROLDEVICE__};

ControlDevice::ControlDevice() : IntangibleObject(DummyConstructorParameter::instance()) {
	ControlDeviceImplementation* _implementation = new ControlDeviceImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

ControlDevice::ControlDevice(DummyConstructorParameter* param) : IntangibleObject(param) {
}

ControlDevice::~ControlDevice() {
}


void ControlDevice::updateToDatabaseAllObjects(bool startTask) {
	ControlDeviceImplementation* _implementation = (ControlDeviceImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

void ControlDevice::storeObject(PlayerCreature* player) {
	ControlDeviceImplementation* _implementation = (ControlDeviceImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOREOBJECT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->storeObject(player);
}

void ControlDevice::generateObject(PlayerCreature* player) {
	ControlDeviceImplementation* _implementation = (ControlDeviceImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEOBJECT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->generateObject(player);
}

void ControlDevice::setControlledObject(CreatureObject* object) {
	ControlDeviceImplementation* _implementation = (ControlDeviceImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTROLLEDOBJECT__CREATUREOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->setControlledObject(object);
}

CreatureObject* ControlDevice::getControlledObject() {
	ControlDeviceImplementation* _implementation = (ControlDeviceImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTROLLEDOBJECT__);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getControlledObject();
}

bool ControlDevice::isControlDevice() {
	ControlDeviceImplementation* _implementation = (ControlDeviceImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isControlDevice();
}

DistributedObjectServant* ControlDevice::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void ControlDevice::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<ControlDeviceImplementation*>(servant));
}

/*
 *	ControlDeviceImplementation
 */

ControlDeviceImplementation::ControlDeviceImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


ControlDeviceImplementation::~ControlDeviceImplementation() {
}


void ControlDeviceImplementation::finalize() {
}

void ControlDeviceImplementation::_initializeImplementation() {
	_setClassHelper(ControlDeviceHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ControlDeviceImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ControlDevice*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ControlDeviceImplementation::_getStub() {
	return _this;
}

ControlDeviceImplementation::operator const ControlDevice*() {
	return _this;
}

Object* ControlDeviceImplementation::clone() {
	return dynamic_cast<Object*>(new ControlDeviceImplementation(*this));
}


void ControlDeviceImplementation::lock(bool doLock) {
}

void ControlDeviceImplementation::lock(ManagedObject* obj) {
}

void ControlDeviceImplementation::rlock(bool doLock) {
}

void ControlDeviceImplementation::wlock(bool doLock) {
}

void ControlDeviceImplementation::wlock(ManagedObject* obj) {
}

void ControlDeviceImplementation::unlock(bool doLock) {
}

void ControlDeviceImplementation::runlock(bool doLock) {
}

void ControlDeviceImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("ControlDevice");

}

void ControlDeviceImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ControlDeviceImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ControlDeviceImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (IntangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "controlledObject") {
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&controlledObject, stream);
		return true;
	}


	return false;
}

void ControlDeviceImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ControlDeviceImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ControlDeviceImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "controlledObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&controlledObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + IntangibleObjectImplementation::writeObjectMembers(stream);
}

ControlDeviceImplementation::ControlDeviceImplementation() {
	_initializeImplementation();
	// server/zone/objects/intangible/ControlDevice.idl():  		controlledObject = null;
	controlledObject = NULL;
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.setLoggingName("ControlDevice");
	Logger::setLoggingName("ControlDevice");
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void ControlDeviceImplementation::updateToDatabaseAllObjects(bool startTask) {
	// server/zone/objects/intangible/ControlDevice.idl():  		}
	if (controlledObject != NULL){
	// server/zone/objects/intangible/ControlDevice.idl():  			controlledObject.updateToDatabaseWithoutChildren();
	controlledObject->updateToDatabaseWithoutChildren();
	// server/zone/objects/intangible/ControlDevice.idl():  			super.updateToDatabaseAllObjects(startTask);
	IntangibleObjectImplementation::updateToDatabaseAllObjects(startTask);
}

	else {
	// server/zone/objects/intangible/ControlDevice.idl():  			super.updateToDatabaseAllObjects(startTask);
	IntangibleObjectImplementation::updateToDatabaseAllObjects(startTask);
}
}

void ControlDeviceImplementation::storeObject(PlayerCreature* player) {
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.error("called storeObject on an abstract method");
	Logger::error("called storeObject on an abstract method");
}

void ControlDeviceImplementation::generateObject(PlayerCreature* player) {
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.error("called generateObject on an abstract method");
	Logger::error("called generateObject on an abstract method");
}

void ControlDeviceImplementation::setControlledObject(CreatureObject* object) {
	// server/zone/objects/intangible/ControlDevice.idl():  		controlledObject = object;
	controlledObject = object;
}

CreatureObject* ControlDeviceImplementation::getControlledObject() {
	// server/zone/objects/intangible/ControlDevice.idl():  		return controlledObject;
	return controlledObject;
}

bool ControlDeviceImplementation::isControlDevice() {
	// server/zone/objects/intangible/ControlDevice.idl():  		return true;
	return true;
}

/*
 *	ControlDeviceAdapter
 */

ControlDeviceAdapter::ControlDeviceAdapter(ControlDeviceImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* ControlDeviceAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case RPC_STOREOBJECT__PLAYERCREATURE_:
		storeObject((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_GENERATEOBJECT__PLAYERCREATURE_:
		generateObject((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SETCONTROLLEDOBJECT__CREATUREOBJECT_:
		setControlledObject((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_GETCONTROLLEDOBJECT__:
		resp->insertLong(getControlledObject()->_getObjectID());
		break;
	case RPC_ISCONTROLDEVICE__:
		resp->insertBoolean(isControlDevice());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ControlDeviceAdapter::updateToDatabaseAllObjects(bool startTask) {
	((ControlDeviceImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void ControlDeviceAdapter::storeObject(PlayerCreature* player) {
	((ControlDeviceImplementation*) impl)->storeObject(player);
}

void ControlDeviceAdapter::generateObject(PlayerCreature* player) {
	((ControlDeviceImplementation*) impl)->generateObject(player);
}

void ControlDeviceAdapter::setControlledObject(CreatureObject* object) {
	((ControlDeviceImplementation*) impl)->setControlledObject(object);
}

CreatureObject* ControlDeviceAdapter::getControlledObject() {
	return ((ControlDeviceImplementation*) impl)->getControlledObject();
}

bool ControlDeviceAdapter::isControlDevice() {
	return ((ControlDeviceImplementation*) impl)->isControlDevice();
}

/*
 *	ControlDeviceHelper
 */

ControlDeviceHelper* ControlDeviceHelper::staticInitializer = ControlDeviceHelper::instance();

ControlDeviceHelper::ControlDeviceHelper() {
	className = "ControlDevice";

	Core::getObjectBroker()->registerClass(className, this);
}

void ControlDeviceHelper::finalizeHelper() {
	ControlDeviceHelper::finalize();
}

DistributedObject* ControlDeviceHelper::instantiateObject() {
	return new ControlDevice(DummyConstructorParameter::instance());
}

DistributedObjectServant* ControlDeviceHelper::instantiateServant() {
	return new ControlDeviceImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ControlDeviceHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ControlDeviceAdapter((ControlDeviceImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

