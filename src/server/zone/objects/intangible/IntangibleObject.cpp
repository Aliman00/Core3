/*
 *	server/zone/objects/intangible/IntangibleObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "IntangibleObject.h"

#include "IntangibleObjectImplementation.h"

/*
 *	IntangibleObjectStub
 */

IntangibleObject::IntangibleObject() : SceneObject(NULL) {
}

IntangibleObject::IntangibleObject(DistributedObjectServant* obj) : SceneObject(obj) {
}

IntangibleObject::IntangibleObject(IntangibleObject& ref) : SceneObject(ref) {
}

IntangibleObject::~IntangibleObject() {
}

IntangibleObject* IntangibleObject::clone() {
	return new IntangibleObject(*this);
}


void IntangibleObject::sendTo(Player* player, bool doClose) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->sendTo(player, doClose);
}

void IntangibleObject::sendDestroyTo(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->sendDestroyTo(player);
}

void IntangibleObject::setName(const string& name) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->setName(name);
}

void IntangibleObject::setDetailName(const string& detail) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);
		method.addAsciiParameter(detail);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->setDetailName(detail);
}

void IntangibleObject::setWorldObject(SceneObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->setWorldObject(obj);
}

void IntangibleObject::updateStatus(unsigned int stat) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(stat);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->updateStatus(stat);
}

string& IntangibleObject::getName() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((IntangibleObjectImplementation*) _impl)->getName();
}

string& IntangibleObject::getDetailName() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);

		method.executeWithAsciiReturn(_return_getDetailName);
		return _return_getDetailName;
	} else
		return ((IntangibleObjectImplementation*) _impl)->getDetailName();
}

SceneObject* IntangibleObject::getWorldObject() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 14);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((IntangibleObjectImplementation*) _impl)->getWorldObject();
}

unsigned int IntangibleObject::getStatus() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 15);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((IntangibleObjectImplementation*) _impl)->getStatus();
}

/*
 *	IntangibleObjectAdapter
 */

IntangibleObjectAdapter::IntangibleObjectAdapter(IntangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* IntangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 8:
		setName(inv->getAsciiParameter(_param0_setName__string_));
		break;
	case 9:
		setDetailName(inv->getAsciiParameter(_param0_setDetailName__string_));
		break;
	case 10:
		setWorldObject((SceneObject*) inv->getObjectParameter());
		break;
	case 11:
		updateStatus(inv->getUnsignedIntParameter());
		break;
	case 12:
		resp->insertAscii(getName());
		break;
	case 13:
		resp->insertAscii(getDetailName());
		break;
	case 14:
		resp->insertLong(getWorldObject()->_getObjectID());
		break;
	case 15:
		resp->insertInt(getStatus());
		break;
	default:
		return NULL;
	}

	return resp;
}

void IntangibleObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((IntangibleObjectImplementation*) impl)->sendTo(player, doClose);
}

void IntangibleObjectAdapter::sendDestroyTo(Player* player) {
	return ((IntangibleObjectImplementation*) impl)->sendDestroyTo(player);
}

void IntangibleObjectAdapter::setName(const string& name) {
	return ((IntangibleObjectImplementation*) impl)->setName(name);
}

void IntangibleObjectAdapter::setDetailName(const string& detail) {
	return ((IntangibleObjectImplementation*) impl)->setDetailName(detail);
}

void IntangibleObjectAdapter::setWorldObject(SceneObject* obj) {
	return ((IntangibleObjectImplementation*) impl)->setWorldObject(obj);
}

void IntangibleObjectAdapter::updateStatus(unsigned int stat) {
	return ((IntangibleObjectImplementation*) impl)->updateStatus(stat);
}

string& IntangibleObjectAdapter::getName() {
	return ((IntangibleObjectImplementation*) impl)->getName();
}

string& IntangibleObjectAdapter::getDetailName() {
	return ((IntangibleObjectImplementation*) impl)->getDetailName();
}

SceneObject* IntangibleObjectAdapter::getWorldObject() {
	return ((IntangibleObjectImplementation*) impl)->getWorldObject();
}

unsigned int IntangibleObjectAdapter::getStatus() {
	return ((IntangibleObjectImplementation*) impl)->getStatus();
}

/*
 *	IntangibleObjectHelper
 */

IntangibleObjectHelper::IntangibleObjectHelper() {
	className = "IntangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void IntangibleObjectHelper::finalizeHelper() {
	IntangibleObjectHelper::finalize();
}

DistributedObject* IntangibleObjectHelper::instantiateObject() {
	return new IntangibleObject();
}

DistributedObjectAdapter* IntangibleObjectHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new IntangibleObjectAdapter((IntangibleObjectImplementation*) obj);

	DistributedObjectStub* stub = new IntangibleObject(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	IntangibleObjectServant
 */

IntangibleObjectServant::IntangibleObjectServant(unsigned long long oid) : SceneObjectImplementation(oid) {
	_classHelper = IntangibleObjectHelper::instance();
}

IntangibleObjectServant::~IntangibleObjectServant() {
}

void IntangibleObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (IntangibleObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* IntangibleObjectServant::_getStub() {
	return _this;
}

