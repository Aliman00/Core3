/*
 *	server/zone/objects/intangible/IntangibleObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "IntangibleObject.h"

#include "IntangibleObjectImplementation.h"

#include "../SceneObject.h"

/*
 *	IntangibleObjectStub
 */

IntangibleObject::IntangibleObject(unsigned long long objectid, int type) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new IntangibleObjectImplementation(objectid, type);
	_impl->_setStub(this);
}

IntangibleObject::IntangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

IntangibleObject::~IntangibleObject() {
}

/*
 *	IntangibleObjectAdapter
 */

IntangibleObjectAdapter::IntangibleObjectAdapter(IntangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* IntangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	IntangibleObjectHelper
 */

IntangibleObjectHelper* IntangibleObjectHelper::staticInitializer = IntangibleObjectHelper::instance();

IntangibleObjectHelper::IntangibleObjectHelper() {
	className = "IntangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void IntangibleObjectHelper::finalizeHelper() {
	IntangibleObjectHelper::finalize();
}

DistributedObject* IntangibleObjectHelper::instantiateObject() {
	return new IntangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* IntangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new IntangibleObjectAdapter((IntangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	IntangibleObjectServant
 */

IntangibleObjectServant::IntangibleObjectServant(unsigned long long objectid, int type) : SceneObjectImplementation(objectid, type) {
	_classHelper = IntangibleObjectHelper::instance();
}

IntangibleObjectServant::~IntangibleObjectServant() {
}

void IntangibleObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (IntangibleObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* IntangibleObjectServant::_getStub() {
	return _this;
}

