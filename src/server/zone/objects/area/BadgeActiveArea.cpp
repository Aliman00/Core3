/*
 *	server/zone/objects/area/BadgeActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "BadgeActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/util/u3d/Quaternion.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "engine/util/Observer.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	BadgeActiveAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6,RPC_SETBADGE__INT_,RPC_GETBADGE__};

BadgeActiveArea::BadgeActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	BadgeActiveAreaImplementation* _implementation = new BadgeActiveAreaImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

BadgeActiveArea::BadgeActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

BadgeActiveArea::~BadgeActiveArea() {
}


void BadgeActiveArea::notifyEnter(SceneObject* player) {
	BadgeActiveAreaImplementation* _implementation = (BadgeActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void BadgeActiveArea::setBadge(unsigned int a) {
	BadgeActiveAreaImplementation* _implementation = (BadgeActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBADGE__INT_);
		method.addUnsignedIntParameter(a);

		method.executeWithVoidReturn();
	} else
		_implementation->setBadge(a);
}

unsigned int BadgeActiveArea::getBadge() {
	BadgeActiveAreaImplementation* _implementation = (BadgeActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBADGE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getBadge();
}

DistributedObjectServant* BadgeActiveArea::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void BadgeActiveArea::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<BadgeActiveAreaImplementation*>(servant));
}

/*
 *	BadgeActiveAreaImplementation
 */

BadgeActiveAreaImplementation::BadgeActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


BadgeActiveAreaImplementation::~BadgeActiveAreaImplementation() {
}


void BadgeActiveAreaImplementation::finalize() {
}

void BadgeActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(BadgeActiveAreaHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void BadgeActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (BadgeActiveArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* BadgeActiveAreaImplementation::_getStub() {
	return _this;
}

BadgeActiveAreaImplementation::operator const BadgeActiveArea*() {
	return _this;
}

Object* BadgeActiveAreaImplementation::clone() {
	return dynamic_cast<Object*>(new BadgeActiveAreaImplementation(*this));
}


void BadgeActiveAreaImplementation::lock(bool doLock) {
}

void BadgeActiveAreaImplementation::lock(ManagedObject* obj) {
}

void BadgeActiveAreaImplementation::rlock(bool doLock) {
}

void BadgeActiveAreaImplementation::wlock(bool doLock) {
}

void BadgeActiveAreaImplementation::wlock(ManagedObject* obj) {
}

void BadgeActiveAreaImplementation::unlock(bool doLock) {
}

void BadgeActiveAreaImplementation::runlock(bool doLock) {
}

void BadgeActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("BadgeActiveArea");

}

void BadgeActiveAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(BadgeActiveAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool BadgeActiveAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "areaBadge") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&areaBadge, stream);
		return true;
	}


	return false;
}

void BadgeActiveAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = BadgeActiveAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int BadgeActiveAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "areaBadge";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&areaBadge, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ActiveAreaImplementation::writeObjectMembers(stream);
}

BadgeActiveAreaImplementation::BadgeActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/BadgeActiveArea.idl():  		areaBadge = 0;
	areaBadge = 0;
	// server/zone/objects/area/BadgeActiveArea.idl():  		Logger.setLoggingName("BadgeActiveArea");
	Logger::setLoggingName("BadgeActiveArea");
}

void BadgeActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/BadgeActiveArea.idl():  		PlayerCreature 
	if (!player->isPlayerCreature())	// server/zone/objects/area/BadgeActiveArea.idl():  			return;
	return;
	// server/zone/objects/area/BadgeActiveArea.idl():  		PlayerCreature playerCreature = (PlayerCreature) player;
	PlayerCreature* playerCreature = (PlayerCreature*) player;
	// server/zone/objects/area/BadgeActiveArea.idl():  	}
	if (!playerCreature->hasBadge(areaBadge)){
	// server/zone/objects/area/BadgeActiveArea.idl():  			playerCreature.awardBadge(areaBadge);
	playerCreature->awardBadge(areaBadge);
}
}

void BadgeActiveAreaImplementation::setBadge(unsigned int a) {
	// server/zone/objects/area/BadgeActiveArea.idl():  		areaBadge = a;
	areaBadge = a;
}

unsigned int BadgeActiveAreaImplementation::getBadge() {
	// server/zone/objects/area/BadgeActiveArea.idl():  		return areaBadge;
	return areaBadge;
}

/*
 *	BadgeActiveAreaAdapter
 */

BadgeActiveAreaAdapter::BadgeActiveAreaAdapter(BadgeActiveAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* BadgeActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETBADGE__INT_:
		setBadge(inv->getUnsignedIntParameter());
		break;
	case RPC_GETBADGE__:
		resp->insertInt(getBadge());
		break;
	default:
		return NULL;
	}

	return resp;
}

void BadgeActiveAreaAdapter::notifyEnter(SceneObject* player) {
	((BadgeActiveAreaImplementation*) impl)->notifyEnter(player);
}

void BadgeActiveAreaAdapter::setBadge(unsigned int a) {
	((BadgeActiveAreaImplementation*) impl)->setBadge(a);
}

unsigned int BadgeActiveAreaAdapter::getBadge() {
	return ((BadgeActiveAreaImplementation*) impl)->getBadge();
}

/*
 *	BadgeActiveAreaHelper
 */

BadgeActiveAreaHelper* BadgeActiveAreaHelper::staticInitializer = BadgeActiveAreaHelper::instance();

BadgeActiveAreaHelper::BadgeActiveAreaHelper() {
	className = "BadgeActiveArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void BadgeActiveAreaHelper::finalizeHelper() {
	BadgeActiveAreaHelper::finalize();
}

DistributedObject* BadgeActiveAreaHelper::instantiateObject() {
	return new BadgeActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* BadgeActiveAreaHelper::instantiateServant() {
	return new BadgeActiveAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BadgeActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BadgeActiveAreaAdapter((BadgeActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

