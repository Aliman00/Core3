/*
 *	server/zone/objects/area/MissionReconActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionReconActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/mission/ReconMissionObjective.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/area/MissionReconActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/mission/ReconMissionObjective.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	MissionReconActiveAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6,RPC_SETMISSIONOBJECTIVE__RECONMISSIONOBJECTIVE_};

MissionReconActiveArea::MissionReconActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	MissionReconActiveAreaImplementation* _implementation = new MissionReconActiveAreaImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

MissionReconActiveArea::MissionReconActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

MissionReconActiveArea::~MissionReconActiveArea() {
}


void MissionReconActiveArea::notifyEnter(SceneObject* player) {
	MissionReconActiveAreaImplementation* _implementation = (MissionReconActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void MissionReconActiveArea::setMissionObjective(ReconMissionObjective* mission) {
	MissionReconActiveAreaImplementation* _implementation = (MissionReconActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONOBJECTIVE__RECONMISSIONOBJECTIVE_);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(mission);
}

DistributedObjectServant* MissionReconActiveArea::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void MissionReconActiveArea::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<MissionReconActiveAreaImplementation*>(servant));
}

/*
 *	MissionReconActiveAreaImplementation
 */

MissionReconActiveAreaImplementation::MissionReconActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


MissionReconActiveAreaImplementation::~MissionReconActiveAreaImplementation() {
}


void MissionReconActiveAreaImplementation::finalize() {
}

void MissionReconActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(MissionReconActiveAreaHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void MissionReconActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionReconActiveArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* MissionReconActiveAreaImplementation::_getStub() {
	return _this;
}

MissionReconActiveAreaImplementation::operator const MissionReconActiveArea*() {
	return _this;
}

Object* MissionReconActiveAreaImplementation::clone() {
	return dynamic_cast<Object*>(new MissionReconActiveAreaImplementation(*this));
}


void MissionReconActiveAreaImplementation::lock(bool doLock) {
}

void MissionReconActiveAreaImplementation::lock(ManagedObject* obj) {
}

void MissionReconActiveAreaImplementation::rlock(bool doLock) {
}

void MissionReconActiveAreaImplementation::wlock(bool doLock) {
}

void MissionReconActiveAreaImplementation::wlock(ManagedObject* obj) {
}

void MissionReconActiveAreaImplementation::unlock(bool doLock) {
}

void MissionReconActiveAreaImplementation::runlock(bool doLock) {
}

void MissionReconActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("MissionReconActiveArea");

}

void MissionReconActiveAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(MissionReconActiveAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionReconActiveAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "missionObjective") {
		TypeInfo<ManagedWeakReference<ReconMissionObjective* > >::parseFromBinaryStream(&missionObjective, stream);
		return true;
	}


	return false;
}

void MissionReconActiveAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionReconActiveAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionReconActiveAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "missionObjective";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<ReconMissionObjective* > >::toBinaryStream(&missionObjective, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ActiveAreaImplementation::writeObjectMembers(stream);
}

MissionReconActiveAreaImplementation::MissionReconActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/MissionReconActiveArea.idl():  		missionObjective = null;
	missionObjective = NULL;
	// server/zone/objects/area/MissionReconActiveArea.idl():  		Logger.setLoggingName("MissionReconActiveArea");
	Logger::setLoggingName("MissionReconActiveArea");
}

void MissionReconActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/MissionReconActiveArea.idl():  		Logger.info("notifyEnter mission recon", true);
	Logger::info("notifyEnter mission recon", true);
	// server/zone/objects/area/MissionReconActiveArea.idl():  		}
	if (!player->isPlayerCreature()){
	// server/zone/objects/area/MissionReconActiveArea.idl():  			return;
	return;
}

	else {
	// server/zone/objects/area/MissionReconActiveArea.idl():  			}
	if (missionObjective != NULL){
	// server/zone/objects/area/MissionReconActiveArea.idl():  				PlayerCreature missionOwner = missionObjective.getPlayerOwner();
	PlayerCreature* missionOwner = missionObjective->getPlayerOwner();
	// server/zone/objects/area/MissionReconActiveArea.idl():  			}
	if ((PlayerCreature*) player == missionOwner){
	// server/zone/objects/area/MissionReconActiveArea.idl():  					missionObjective.complete();
	missionObjective->complete();
}
}

	else {
	// server/zone/objects/area/MissionReconActiveArea.idl():  				super.removeFromZone();
	ActiveAreaImplementation::removeFromZone();
}
}
}

void MissionReconActiveAreaImplementation::setMissionObjective(ReconMissionObjective* mission) {
	// server/zone/objects/area/MissionReconActiveArea.idl():  		missionObjective = mission;
	missionObjective = mission;
}

/*
 *	MissionReconActiveAreaAdapter
 */

MissionReconActiveAreaAdapter::MissionReconActiveAreaAdapter(MissionReconActiveAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* MissionReconActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETMISSIONOBJECTIVE__RECONMISSIONOBJECTIVE_:
		setMissionObjective((ReconMissionObjective*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionReconActiveAreaAdapter::notifyEnter(SceneObject* player) {
	((MissionReconActiveAreaImplementation*) impl)->notifyEnter(player);
}

void MissionReconActiveAreaAdapter::setMissionObjective(ReconMissionObjective* mission) {
	((MissionReconActiveAreaImplementation*) impl)->setMissionObjective(mission);
}

/*
 *	MissionReconActiveAreaHelper
 */

MissionReconActiveAreaHelper* MissionReconActiveAreaHelper::staticInitializer = MissionReconActiveAreaHelper::instance();

MissionReconActiveAreaHelper::MissionReconActiveAreaHelper() {
	className = "MissionReconActiveArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionReconActiveAreaHelper::finalizeHelper() {
	MissionReconActiveAreaHelper::finalize();
}

DistributedObject* MissionReconActiveAreaHelper::instantiateObject() {
	return new MissionReconActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionReconActiveAreaHelper::instantiateServant() {
	return new MissionReconActiveAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionReconActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionReconActiveAreaAdapter((MissionReconActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

