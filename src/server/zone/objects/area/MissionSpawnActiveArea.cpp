/*
 *	server/zone/objects/area/MissionSpawnActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionSpawnActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/mission/DestroyMissionObjective.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/templates/tangible/LairObjectTemplate.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/tangible/lair/LairObject.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/lair/HealLairEvent.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/core/Task.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/tangible/DamageMap.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/area/MissionSpawnActiveArea.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/mission/DestroyMissionObjective.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/service/Message.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/templates/TemplateReference.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "engine/util/Observer.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/ZoneClientSession.h"

#include "system/lang/Time.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/stringid/StringIdManager.h"

/*
 *	MissionSpawnActiveAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6,RPC_SETMISSIONOBJECTIVE__DESTROYMISSIONOBJECTIVE_};

MissionSpawnActiveArea::MissionSpawnActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	MissionSpawnActiveAreaImplementation* _implementation = new MissionSpawnActiveAreaImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

MissionSpawnActiveArea::MissionSpawnActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

MissionSpawnActiveArea::~MissionSpawnActiveArea() {
}


void MissionSpawnActiveArea::notifyEnter(SceneObject* player) {
	MissionSpawnActiveAreaImplementation* _implementation = (MissionSpawnActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void MissionSpawnActiveArea::setMissionObjective(DestroyMissionObjective* mission) {
	MissionSpawnActiveAreaImplementation* _implementation = (MissionSpawnActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONOBJECTIVE__DESTROYMISSIONOBJECTIVE_);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(mission);
}

DistributedObjectServant* MissionSpawnActiveArea::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void MissionSpawnActiveArea::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<MissionSpawnActiveAreaImplementation*>(servant));
}

/*
 *	MissionSpawnActiveAreaImplementation
 */

MissionSpawnActiveAreaImplementation::MissionSpawnActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


MissionSpawnActiveAreaImplementation::~MissionSpawnActiveAreaImplementation() {
}


void MissionSpawnActiveAreaImplementation::finalize() {
}

void MissionSpawnActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(MissionSpawnActiveAreaHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void MissionSpawnActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionSpawnActiveArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* MissionSpawnActiveAreaImplementation::_getStub() {
	return _this;
}

MissionSpawnActiveAreaImplementation::operator const MissionSpawnActiveArea*() {
	return _this;
}

Object* MissionSpawnActiveAreaImplementation::clone() {
	return dynamic_cast<Object*>(new MissionSpawnActiveAreaImplementation(*this));
}


void MissionSpawnActiveAreaImplementation::lock(bool doLock) {
}

void MissionSpawnActiveAreaImplementation::lock(ManagedObject* obj) {
}

void MissionSpawnActiveAreaImplementation::rlock(bool doLock) {
}

void MissionSpawnActiveAreaImplementation::wlock(bool doLock) {
}

void MissionSpawnActiveAreaImplementation::wlock(ManagedObject* obj) {
}

void MissionSpawnActiveAreaImplementation::unlock(bool doLock) {
}

void MissionSpawnActiveAreaImplementation::runlock(bool doLock) {
}

void MissionSpawnActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("MissionSpawnActiveArea");

}

void MissionSpawnActiveAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(MissionSpawnActiveAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionSpawnActiveAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "destroyMissionObjective") {
		TypeInfo<ManagedWeakReference<DestroyMissionObjective* > >::parseFromBinaryStream(&destroyMissionObjective, stream);
		return true;
	}


	return false;
}

void MissionSpawnActiveAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionSpawnActiveAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionSpawnActiveAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "destroyMissionObjective";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<DestroyMissionObjective* > >::toBinaryStream(&destroyMissionObjective, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ActiveAreaImplementation::writeObjectMembers(stream);
}

MissionSpawnActiveAreaImplementation::MissionSpawnActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		destroyMissionObjective = null;
	destroyMissionObjective = NULL;
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		Logger.setLoggingName("MissionSpawnActiveArea");
	Logger::setLoggingName("MissionSpawnActiveArea");
}

void MissionSpawnActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		}
	if (!player->isPlayerCreature()){
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			return;
	return;
}

	else {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			}
	if (destroyMissionObjective != NULL){
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  				PlayerCreature missionOwner = destroyMissionObjective.getPlayerOwner();
	PlayerCreature* missionOwner = destroyMissionObjective->getPlayerOwner();
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			}
	if ((PlayerCreature*) player == missionOwner){
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  					destroyMissionObjective.spawnLair();
	destroyMissionObjective->spawnLair();
}
}

	else {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  				super.removeFromZone();
	ActiveAreaImplementation::removeFromZone();
}
}
}

void MissionSpawnActiveAreaImplementation::setMissionObjective(DestroyMissionObjective* mission) {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		destroyMissionObjective = mission;
	destroyMissionObjective = mission;
}

/*
 *	MissionSpawnActiveAreaAdapter
 */

MissionSpawnActiveAreaAdapter::MissionSpawnActiveAreaAdapter(MissionSpawnActiveAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* MissionSpawnActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETMISSIONOBJECTIVE__DESTROYMISSIONOBJECTIVE_:
		setMissionObjective((DestroyMissionObjective*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionSpawnActiveAreaAdapter::notifyEnter(SceneObject* player) {
	((MissionSpawnActiveAreaImplementation*) impl)->notifyEnter(player);
}

void MissionSpawnActiveAreaAdapter::setMissionObjective(DestroyMissionObjective* mission) {
	((MissionSpawnActiveAreaImplementation*) impl)->setMissionObjective(mission);
}

/*
 *	MissionSpawnActiveAreaHelper
 */

MissionSpawnActiveAreaHelper* MissionSpawnActiveAreaHelper::staticInitializer = MissionSpawnActiveAreaHelper::instance();

MissionSpawnActiveAreaHelper::MissionSpawnActiveAreaHelper() {
	className = "MissionSpawnActiveArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionSpawnActiveAreaHelper::finalizeHelper() {
	MissionSpawnActiveAreaHelper::finalize();
}

DistributedObject* MissionSpawnActiveAreaHelper::instantiateObject() {
	return new MissionSpawnActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionSpawnActiveAreaHelper::instantiateServant() {
	return new MissionSpawnActiveAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionSpawnActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionSpawnActiveAreaAdapter((MissionSpawnActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

