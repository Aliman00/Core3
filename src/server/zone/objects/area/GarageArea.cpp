/*
 *	server/zone/objects/area/GarageArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "GarageArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "engine/util/Observer.h"

#include "system/util/Vector.h"

#include "system/io/ObjectOutputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "engine/core/Task.h"

#include "engine/core/ManagedObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/chat/room/ChatRoom.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/login/account/Account.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "system/lang/Time.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "system/util/VectorMap.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "engine/util/Observable.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "engine/util/u3d/Quaternion.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/ZoneClientSession.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/planet/PlanetManager.h"

/*
 *	GarageAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6};

GarageArea::GarageArea() : ActiveArea(DummyConstructorParameter::instance()) {
	GarageAreaImplementation* _implementation = new GarageAreaImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

GarageArea::GarageArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

GarageArea::~GarageArea() {
}


void GarageArea::notifyEnter(SceneObject* player) {
	GarageAreaImplementation* _implementation = (GarageAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

DistributedObjectServant* GarageArea::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void GarageArea::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<GarageAreaImplementation*>(servant));
}

/*
 *	GarageAreaImplementation
 */

GarageAreaImplementation::GarageAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


GarageAreaImplementation::~GarageAreaImplementation() {
}


void GarageAreaImplementation::finalize() {
}

void GarageAreaImplementation::_initializeImplementation() {
	_setClassHelper(GarageAreaHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void GarageAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GarageArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* GarageAreaImplementation::_getStub() {
	return _this;
}

GarageAreaImplementation::operator const GarageArea*() {
	return _this;
}

Object* GarageAreaImplementation::clone() {
	return dynamic_cast<Object*>(new GarageAreaImplementation(*this));
}


void GarageAreaImplementation::lock(bool doLock) {
}

void GarageAreaImplementation::lock(ManagedObject* obj) {
}

void GarageAreaImplementation::rlock(bool doLock) {
}

void GarageAreaImplementation::wlock(bool doLock) {
}

void GarageAreaImplementation::wlock(ManagedObject* obj) {
}

void GarageAreaImplementation::unlock(bool doLock) {
}

void GarageAreaImplementation::runlock(bool doLock) {
}

void GarageAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("GarageArea");

}

void GarageAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(GarageAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GarageAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void GarageAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GarageAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GarageAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ActiveAreaImplementation::writeObjectMembers(stream);
}

GarageAreaImplementation::GarageAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/GarageArea.idl():  		Logger.setLoggingName("GarageArea");
	Logger::setLoggingName("GarageArea");
}

void GarageAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/GarageArea.idl():  	}
	if (player->isPlayerCreature()){
	// server/zone/objects/area/GarageArea.idl():  			PlayerCreature playerCreature = (PlayerCreature) player;
	PlayerCreature* playerCreature = (PlayerCreature*) player;
	// server/zone/objects/area/GarageArea.idl():  			playerCreature.sendSystemMessage("@pet/pet_menu:garage_proximity");
	playerCreature->sendSystemMessage("@pet/pet_menu:garage_proximity");
}
}

/*
 *	GarageAreaAdapter
 */

GarageAreaAdapter::GarageAreaAdapter(GarageAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* GarageAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GarageAreaAdapter::notifyEnter(SceneObject* player) {
	((GarageAreaImplementation*) impl)->notifyEnter(player);
}

/*
 *	GarageAreaHelper
 */

GarageAreaHelper* GarageAreaHelper::staticInitializer = GarageAreaHelper::instance();

GarageAreaHelper::GarageAreaHelper() {
	className = "GarageArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void GarageAreaHelper::finalizeHelper() {
	GarageAreaHelper::finalize();
}

DistributedObject* GarageAreaHelper::instantiateObject() {
	return new GarageArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* GarageAreaHelper::instantiateServant() {
	return new GarageAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GarageAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GarageAreaAdapter((GarageAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

