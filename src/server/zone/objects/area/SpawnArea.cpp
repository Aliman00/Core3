/*
 *	server/zone/objects/area/SpawnArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "SpawnArea.h"

#include "server/zone/objects/creature/aigroup/AiGroup.h"

#include "server/zone/objects/area/SpawnObserver.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/creature/CreatureTemplate.h"

#include "server/zone/managers/creature/DynamicSpawnGroup.h"

#include "server/zone/managers/creature/StaticSpawnGroup.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/area/SpawnArea.h"

#include "server/zone/objects/area/SpawnObserver.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/AiAgent.h"

#include "server/zone/objects/creature/AiObserver.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/PatrolPoint.h"

#include "server/zone/objects/creature/PatrolPointsVector.h"

#include "server/zone/objects/creature/aigroup/AiGroup.h"

#include "server/zone/objects/creature/aigroup/AiGroupObserver.h"

#include "server/zone/objects/creature/events/AiAwarenessEvent.h"

#include "server/zone/objects/creature/events/AiMoveEvent.h"

#include "server/zone/objects/creature/events/AiThinkEvent.h"

#include "server/zone/objects/creature/events/AiWaitEvent.h"

#include "server/zone/objects/creature/events/DespawnCreatureOnPlayerDissappear.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/WorldCoordinates.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/DamageMap.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	SpawnAreaStub
 */

enum {RPC_REGISTEROBSERVERS__ = 6,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_ADDTEMPLATE__INT_,RPC_SETTIER__INT_,RPC_SETSPAWNCONSTANT__INT_,RPC_ISSTATICAREA__,RPC_ISDYNAMICAREA__};

SpawnArea::SpawnArea() : ActiveArea(DummyConstructorParameter::instance()) {
	SpawnAreaImplementation* _implementation = new SpawnAreaImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

SpawnArea::SpawnArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

SpawnArea::~SpawnArea() {
}


void SpawnArea::registerObservers() {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTEROBSERVERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->registerObservers();
}

int SpawnArea::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SpawnArea::addTemplate(unsigned int tempCRC) {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTEMPLATE__INT_);
		method.addUnsignedIntParameter(tempCRC);

		method.executeWithVoidReturn();
	} else
		_implementation->addTemplate(tempCRC);
}

void SpawnArea::setTier(int n) {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTIER__INT_);
		method.addSignedIntParameter(n);

		method.executeWithVoidReturn();
	} else
		_implementation->setTier(n);
}

void SpawnArea::setSpawnConstant(int n) {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNCONSTANT__INT_);
		method.addSignedIntParameter(n);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawnConstant(n);
}

bool SpawnArea::isStaticArea() {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTATICAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStaticArea();
}

bool SpawnArea::isDynamicArea() {
	SpawnAreaImplementation* _implementation = (SpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDYNAMICAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDynamicArea();
}

DistributedObjectServant* SpawnArea::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void SpawnArea::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<SpawnAreaImplementation*>(servant));
}

/*
 *	SpawnAreaImplementation
 */

SpawnAreaImplementation::SpawnAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


SpawnAreaImplementation::~SpawnAreaImplementation() {
}


void SpawnAreaImplementation::finalize() {
}

void SpawnAreaImplementation::_initializeImplementation() {
	_setClassHelper(SpawnAreaHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SpawnAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SpawnArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* SpawnAreaImplementation::_getStub() {
	return _this;
}

SpawnAreaImplementation::operator const SpawnArea*() {
	return _this;
}

Object* SpawnAreaImplementation::clone() {
	return dynamic_cast<Object*>(new SpawnAreaImplementation(*this));
}


void SpawnAreaImplementation::lock(bool doLock) {
}

void SpawnAreaImplementation::lock(ManagedObject* obj) {
}

void SpawnAreaImplementation::rlock(bool doLock) {
}

void SpawnAreaImplementation::wlock(bool doLock) {
}

void SpawnAreaImplementation::wlock(ManagedObject* obj) {
}

void SpawnAreaImplementation::unlock(bool doLock) {
}

void SpawnAreaImplementation::runlock(bool doLock) {
}

void SpawnAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("SpawnArea");

}

void SpawnAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SpawnAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SpawnAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "spawnCreatureTemplates") {
		TypeInfo<SortedVector<unsigned int> >::parseFromBinaryStream(&spawnCreatureTemplates, stream);
		return true;
	}

	if (_name == "observers") {
		TypeInfo<SortedVector<ManagedReference<SpawnObserver* > > >::parseFromBinaryStream(&observers, stream);
		return true;
	}

	if (_name == "tier") {
		TypeInfo<int >::parseFromBinaryStream(&tier, stream);
		return true;
	}

	if (_name == "spawnConstant") {
		TypeInfo<int >::parseFromBinaryStream(&spawnConstant, stream);
		return true;
	}


	return false;
}

void SpawnAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SpawnAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SpawnAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "spawnCreatureTemplates";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<unsigned int> >::toBinaryStream(&spawnCreatureTemplates, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "observers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<SpawnObserver* > > >::toBinaryStream(&observers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "tier";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&tier, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnConstant";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&spawnConstant, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 4 + ActiveAreaImplementation::writeObjectMembers(stream);
}

SpawnAreaImplementation::SpawnAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/SpawnArea.idl():  		spawnConstant = 0;
	spawnConstant = 0;
	// server/zone/objects/area/SpawnArea.idl():  		Logger.setLoggingName("SpawnArea");
	Logger::setLoggingName("SpawnArea");
}

void SpawnAreaImplementation::registerObservers() {
}

int SpawnAreaImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/area/SpawnArea.idl():  		return 1;
	return 1;
}

void SpawnAreaImplementation::addTemplate(unsigned int tempCRC) {
	// server/zone/objects/area/SpawnArea.idl():  		spawnCreatureTemplates.add(tempCRC);
	(&spawnCreatureTemplates)->add(tempCRC);
}

void SpawnAreaImplementation::setTier(int n) {
	// server/zone/objects/area/SpawnArea.idl():  		tier = n;
	tier = n;
}

void SpawnAreaImplementation::setSpawnConstant(int n) {
	// server/zone/objects/area/SpawnArea.idl():  		spawnConstant = n;
	spawnConstant = n;
}

bool SpawnAreaImplementation::isStaticArea() {
	// server/zone/objects/area/SpawnArea.idl():  		return false;
	return false;
}

bool SpawnAreaImplementation::isDynamicArea() {
	// server/zone/objects/area/SpawnArea.idl():  		return false;
	return false;
}

/*
 *	SpawnAreaAdapter
 */

SpawnAreaAdapter::SpawnAreaAdapter(SpawnAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* SpawnAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_REGISTEROBSERVERS__:
		registerObservers();
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case RPC_ADDTEMPLATE__INT_:
		addTemplate(inv->getUnsignedIntParameter());
		break;
	case RPC_SETTIER__INT_:
		setTier(inv->getSignedIntParameter());
		break;
	case RPC_SETSPAWNCONSTANT__INT_:
		setSpawnConstant(inv->getSignedIntParameter());
		break;
	case RPC_ISSTATICAREA__:
		resp->insertBoolean(isStaticArea());
		break;
	case RPC_ISDYNAMICAREA__:
		resp->insertBoolean(isDynamicArea());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SpawnAreaAdapter::registerObservers() {
	((SpawnAreaImplementation*) impl)->registerObservers();
}

int SpawnAreaAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((SpawnAreaImplementation*) impl)->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SpawnAreaAdapter::addTemplate(unsigned int tempCRC) {
	((SpawnAreaImplementation*) impl)->addTemplate(tempCRC);
}

void SpawnAreaAdapter::setTier(int n) {
	((SpawnAreaImplementation*) impl)->setTier(n);
}

void SpawnAreaAdapter::setSpawnConstant(int n) {
	((SpawnAreaImplementation*) impl)->setSpawnConstant(n);
}

bool SpawnAreaAdapter::isStaticArea() {
	return ((SpawnAreaImplementation*) impl)->isStaticArea();
}

bool SpawnAreaAdapter::isDynamicArea() {
	return ((SpawnAreaImplementation*) impl)->isDynamicArea();
}

/*
 *	SpawnAreaHelper
 */

SpawnAreaHelper* SpawnAreaHelper::staticInitializer = SpawnAreaHelper::instance();

SpawnAreaHelper::SpawnAreaHelper() {
	className = "SpawnArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void SpawnAreaHelper::finalizeHelper() {
	SpawnAreaHelper::finalize();
}

DistributedObject* SpawnAreaHelper::instantiateObject() {
	return new SpawnArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* SpawnAreaHelper::instantiateServant() {
	return new SpawnAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SpawnAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SpawnAreaAdapter((SpawnAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

