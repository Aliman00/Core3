/*
 *	server/zone/objects/building/travel/TravelBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TravelBuildingObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "engine/service/Message.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "engine/core/Task.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "engine/util/Observer.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	TravelBuildingObjectStub
 */

enum {};

TravelBuildingObject::TravelBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	TravelBuildingObjectImplementation* _implementation = new TravelBuildingObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

TravelBuildingObject::TravelBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

TravelBuildingObject::~TravelBuildingObject() {
}


DistributedObjectServant* TravelBuildingObject::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void TravelBuildingObject::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<TravelBuildingObjectImplementation*>(servant));
}

/*
 *	TravelBuildingObjectImplementation
 */

TravelBuildingObjectImplementation::TravelBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


TravelBuildingObjectImplementation::~TravelBuildingObjectImplementation() {
}


void TravelBuildingObjectImplementation::finalize() {
}

void TravelBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(TravelBuildingObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TravelBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TravelBuildingObject*) stub;
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TravelBuildingObjectImplementation::_getStub() {
	return _this;
}

TravelBuildingObjectImplementation::operator const TravelBuildingObject*() {
	return _this;
}

Object* TravelBuildingObjectImplementation::clone() {
	return dynamic_cast<Object*>(new TravelBuildingObjectImplementation(*this));
}


void TravelBuildingObjectImplementation::lock(bool doLock) {
}

void TravelBuildingObjectImplementation::lock(ManagedObject* obj) {
}

void TravelBuildingObjectImplementation::rlock(bool doLock) {
}

void TravelBuildingObjectImplementation::wlock(bool doLock) {
}

void TravelBuildingObjectImplementation::wlock(ManagedObject* obj) {
}

void TravelBuildingObjectImplementation::unlock(bool doLock) {
}

void TravelBuildingObjectImplementation::runlock(bool doLock) {
}

void TravelBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("TravelBuildingObject");

}

void TravelBuildingObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TravelBuildingObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TravelBuildingObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuildingObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void TravelBuildingObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TravelBuildingObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TravelBuildingObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + BuildingObjectImplementation::writeObjectMembers(stream);
}

TravelBuildingObjectImplementation::TravelBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/travel/TravelBuildingObject.idl():  		Logger.setLoggingName("TravelBuildingObject");
	Logger::setLoggingName("TravelBuildingObject");
}

/*
 *	TravelBuildingObjectAdapter
 */

TravelBuildingObjectAdapter::TravelBuildingObjectAdapter(TravelBuildingObjectImplementation* obj) : BuildingObjectAdapter(obj) {
}

Packet* TravelBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	TravelBuildingObjectHelper
 */

TravelBuildingObjectHelper* TravelBuildingObjectHelper::staticInitializer = TravelBuildingObjectHelper::instance();

TravelBuildingObjectHelper::TravelBuildingObjectHelper() {
	className = "TravelBuildingObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TravelBuildingObjectHelper::finalizeHelper() {
	TravelBuildingObjectHelper::finalize();
}

DistributedObject* TravelBuildingObjectHelper::instantiateObject() {
	return new TravelBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TravelBuildingObjectHelper::instantiateServant() {
	return new TravelBuildingObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TravelBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TravelBuildingObjectAdapter((TravelBuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

