/*
 *	server/zone/objects/building/tutorial/TutorialBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TutorialBuildingObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/building/tutorial/events/UnloadBuildingTask.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Observable.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "engine/util/ObserverEventMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "engine/util/u3d/QuadTreeNode.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "engine/util/Observer.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/core/ManagedObject.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	TutorialBuildingObjectStub
 */

enum {RPC_REMOVEFROMZONE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ONENTER__PLAYERCREATURE_,RPC_ONEXIT__PLAYERCREATURE_,RPC_CLEARUNLOADEVENT__,};

TutorialBuildingObject::TutorialBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	TutorialBuildingObjectImplementation* _implementation = new TutorialBuildingObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

TutorialBuildingObject::TutorialBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

TutorialBuildingObject::~TutorialBuildingObject() {
}


void TutorialBuildingObject::removeFromZone() {
	TutorialBuildingObjectImplementation* _implementation = (TutorialBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMZONE__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromZone();
}

void TutorialBuildingObject::initializeTransientMembers() {
	TutorialBuildingObjectImplementation* _implementation = (TutorialBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void TutorialBuildingObject::onEnter(PlayerCreature* player) {
	TutorialBuildingObjectImplementation* _implementation = (TutorialBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ONENTER__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->onEnter(player);
}

void TutorialBuildingObject::onExit(PlayerCreature* player) {
	TutorialBuildingObjectImplementation* _implementation = (TutorialBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ONEXIT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->onExit(player);
}

void TutorialBuildingObject::clearUnloadEvent() {
	TutorialBuildingObjectImplementation* _implementation = (TutorialBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARUNLOADEVENT__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearUnloadEvent();
}

DistributedObjectServant* TutorialBuildingObject::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void TutorialBuildingObject::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<TutorialBuildingObjectImplementation*>(servant));
}

/*
 *	TutorialBuildingObjectImplementation
 */

TutorialBuildingObjectImplementation::TutorialBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


TutorialBuildingObjectImplementation::~TutorialBuildingObjectImplementation() {
}


void TutorialBuildingObjectImplementation::finalize() {
}

void TutorialBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(TutorialBuildingObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TutorialBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TutorialBuildingObject*) stub;
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TutorialBuildingObjectImplementation::_getStub() {
	return _this;
}

TutorialBuildingObjectImplementation::operator const TutorialBuildingObject*() {
	return _this;
}

Object* TutorialBuildingObjectImplementation::clone() {
	return dynamic_cast<Object*>(new TutorialBuildingObjectImplementation(*this));
}


void TutorialBuildingObjectImplementation::lock(bool doLock) {
}

void TutorialBuildingObjectImplementation::lock(ManagedObject* obj) {
}

void TutorialBuildingObjectImplementation::rlock(bool doLock) {
}

void TutorialBuildingObjectImplementation::wlock(bool doLock) {
}

void TutorialBuildingObjectImplementation::wlock(ManagedObject* obj) {
}

void TutorialBuildingObjectImplementation::unlock(bool doLock) {
}

void TutorialBuildingObjectImplementation::runlock(bool doLock) {
}

void TutorialBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("TutorialBuildingObject");

}

void TutorialBuildingObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TutorialBuildingObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TutorialBuildingObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuildingObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void TutorialBuildingObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TutorialBuildingObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TutorialBuildingObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + BuildingObjectImplementation::writeObjectMembers(stream);
}

TutorialBuildingObjectImplementation::TutorialBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		initializeTransientMembers();
	initializeTransientMembers();
}

void TutorialBuildingObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		super.initializeTransientMembers();
	BuildingObjectImplementation::initializeTransientMembers();
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		unloadTask = null;
	unloadTask = NULL;
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		Logger.setLoggingName("TutorialBuildingObject");
	Logger::setLoggingName("TutorialBuildingObject");
}

void TutorialBuildingObjectImplementation::onEnter(PlayerCreature* player) {
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		dequeueUnloadEvent();
	dequeueUnloadEvent();
}

void TutorialBuildingObjectImplementation::onExit(PlayerCreature* player) {
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		enqueueUnloadEvent();
	enqueueUnloadEvent();
}

void TutorialBuildingObjectImplementation::clearUnloadEvent() {
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  		unloadTask = null;
	unloadTask = NULL;
}

void TutorialBuildingObjectImplementation::dequeueUnloadEvent() {
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  	}
	if (unloadTask){
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  			unloadTask.cancel();
	unloadTask->cancel();
	// server/zone/objects/building/tutorial/TutorialBuildingObject.idl():  			clearUnloadEvent();
	clearUnloadEvent();
}
}

/*
 *	TutorialBuildingObjectAdapter
 */

TutorialBuildingObjectAdapter::TutorialBuildingObjectAdapter(TutorialBuildingObjectImplementation* obj) : BuildingObjectAdapter(obj) {
}

Packet* TutorialBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_REMOVEFROMZONE__:
		removeFromZone();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_ONENTER__PLAYERCREATURE_:
		onEnter((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_ONEXIT__PLAYERCREATURE_:
		onExit((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_CLEARUNLOADEVENT__:
		clearUnloadEvent();
		break;
	default:
		return NULL;
	}

	return resp;
}

void TutorialBuildingObjectAdapter::removeFromZone() {
	((TutorialBuildingObjectImplementation*) impl)->removeFromZone();
}

void TutorialBuildingObjectAdapter::initializeTransientMembers() {
	((TutorialBuildingObjectImplementation*) impl)->initializeTransientMembers();
}

void TutorialBuildingObjectAdapter::onEnter(PlayerCreature* player) {
	((TutorialBuildingObjectImplementation*) impl)->onEnter(player);
}

void TutorialBuildingObjectAdapter::onExit(PlayerCreature* player) {
	((TutorialBuildingObjectImplementation*) impl)->onExit(player);
}

void TutorialBuildingObjectAdapter::clearUnloadEvent() {
	((TutorialBuildingObjectImplementation*) impl)->clearUnloadEvent();
}

/*
 *	TutorialBuildingObjectHelper
 */

TutorialBuildingObjectHelper* TutorialBuildingObjectHelper::staticInitializer = TutorialBuildingObjectHelper::instance();

TutorialBuildingObjectHelper::TutorialBuildingObjectHelper() {
	className = "TutorialBuildingObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TutorialBuildingObjectHelper::finalizeHelper() {
	TutorialBuildingObjectHelper::finalize();
}

DistributedObject* TutorialBuildingObjectHelper::instantiateObject() {
	return new TutorialBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TutorialBuildingObjectHelper::instantiateServant() {
	return new TutorialBuildingObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TutorialBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TutorialBuildingObjectAdapter((TutorialBuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

