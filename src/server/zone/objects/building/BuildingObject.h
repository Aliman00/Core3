/*
 *	server/zone/objects/building/BuildingObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef BUILDINGOBJECT_H_
#define BUILDINGOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/util/QuadTreeEntry.h"

class CellObject;

class SceneObject;

class Player;

class CreatureObject;

class Zone;

#include "../scene/SceneObject.h"

class BuildingObject : public SceneObject {
protected:
	BuildingObject();
	BuildingObject(DistributedObjectServant* obj);
	BuildingObject(BuildingObject& ref);

	virtual ~BuildingObject();

public:
	BuildingObject* clone();

	void addCell(CellObject* cell);

	void insertToZone(Zone* zone);

	void removeFromZone();

	void notifyInsertToZone(CreatureObject* creature);

	bool isStatic();

	int getBuildingType();

	void setBuildingType(int type);

	void lock(bool doLock = true);

	void unlock(bool doLock = true);

	void setSize(float minx, float miny, float maxx, float maxy);

	void insert(QuadTreeEntry* obj);

	void remove(QuadTreeEntry* obj);

	void removeAll();

	bool update(QuadTreeEntry* obj);

	void inRange(QuadTreeEntry* obj, float range);

protected:
	friend class BuildingObjectHelper;
};

class BuildingObjectImplementation;

class BuildingObjectAdapter : public SceneObjectAdapter {
public:
	BuildingObjectAdapter(BuildingObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addCell(CellObject* cell);

	void insertToZone(Zone* zone);

	void removeFromZone();

	void notifyInsertToZone(CreatureObject* creature);

	bool isStatic();

	int getBuildingType();

	void setBuildingType(int type);

	void lock(bool doLock);

	void unlock(bool doLock);

	void setSize(float minx, float miny, float maxx, float maxy);

	void insert(QuadTreeEntry* obj);

	void remove(QuadTreeEntry* obj);

	void removeAll();

	bool update(QuadTreeEntry* obj);

	void inRange(QuadTreeEntry* obj, float range);

};

class BuildingObjectHelper : public DistributedObjectClassHelper, public Singleton<BuildingObjectHelper> {
public:
	BuildingObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<BuildingObjectHelper>;
};

#include "../scene/SceneObjectImplementation.h"

class BuildingObjectServant : public SceneObjectImplementation {
public:
	BuildingObject* _this;

public:
	BuildingObjectServant(unsigned long long oid);
	virtual ~BuildingObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*BUILDINGOBJECT_H_*/
