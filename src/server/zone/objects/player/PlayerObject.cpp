/*
 *	server/zone/objects/player/PlayerObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlayerObject.h"

#include "PlayerObjectImplementation.h"

#include "../../Zone.h"

#include "../scene/SceneObject.h"

#include "Player.h"

#include "../waypoint/WaypointObject.h"

/*
 *	PlayerObjectStub
 */

PlayerObject::PlayerObject(Player* player) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerObjectImplementation(player);
	_impl->_setStub(this);
}

PlayerObject::PlayerObject(DummyConstructorParameter* param) : SceneObject(param) {
}

PlayerObject::~PlayerObject() {
}

void PlayerObject::sendToOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendToOwner();
}

void PlayerObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendTo(player, doClose);
}

void PlayerObject::addExperience(const string& xpType, int xp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->addExperience(xpType, xp, updateClient);
}

void PlayerObject::removeExperience(const string& xpType, int xp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->removeExperience(xpType, xp, updateClient);
}

bool PlayerObject::setCharacterBit(unsigned int bit, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(updateClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->setCharacterBit(bit, updateClient);
}

bool PlayerObject::clearCharacterBit(unsigned int bit, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(updateClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->clearCharacterBit(bit, updateClient);
}

void PlayerObject::setForcePower(unsigned int fp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedIntParameter(fp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setForcePower(fp, updateClient);
}

void PlayerObject::setForcePowerMax(int fp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(fp);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setForcePowerMax(fp);
}

void PlayerObject::setForceRegen(int fp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(fp);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setForceRegen(fp);
}

unsigned int PlayerObject::getForcePower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getForcePower();
}

unsigned int PlayerObject::getForcePowerMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getForcePowerMax();
}

unsigned int PlayerObject::getForceRegen() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getForceRegen();
}

bool PlayerObject::isJedi() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isJedi();
}

bool PlayerObject::isOnFullForce() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->isOnFullForce();
}

unsigned int PlayerObject::getCharacterBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getCharacterBitmask();
}

int PlayerObject::getWaypointListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getWaypointListSize();
}

unsigned int PlayerObject::getJediState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getJediState();
}

WaypointObject* PlayerObject::getWaypoint(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addUnsignedLongParameter(id);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getWaypoint(id);
}

void PlayerObject::addWaypoint(WaypointObject* wp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(wp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->addWaypoint(wp, updateClient);
}

bool PlayerObject::removeWaypoint(WaypointObject* wp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(wp);
		method.addBooleanParameter(updateClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->removeWaypoint(wp, updateClient);
}

void PlayerObject::updateWaypoint(WaypointObject* wp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(wp);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->updateWaypoint(wp);
}

Player* PlayerObject::getPlayer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getPlayer();
}

void PlayerObject::setCurrentTitle(string& nTitle, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addAsciiParameter(nTitle);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setCurrentTitle(nTitle, updateClient);
}

void PlayerObject::setTitle(string& temptitle) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addAsciiParameter(temptitle);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setTitle(temptitle);
}

string& PlayerObject::getCurrentTitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithAsciiReturn(_return_getCurrentTitle);
		return _return_getCurrentTitle;
	} else
		return ((PlayerObjectImplementation*) _impl)->getCurrentTitle();
}

unsigned int PlayerObject::getExperienceListCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getExperienceListCount();
}

unsigned int PlayerObject::getNewExperienceListCount(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getNewExperienceListCount(cnt);
}

unsigned int PlayerObject::getWaypointListCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getWaypointListCount();
}

unsigned int PlayerObject::getNewWaypointListCount(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getNewWaypointListCount(cnt);
}

/*
 *	PlayerObjectAdapter
 */

PlayerObjectAdapter::PlayerObjectAdapter(PlayerObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* PlayerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendToOwner();
		break;
	case 7:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 8:
		addExperience(inv->getAsciiParameter(_param0_addExperience__string_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 9:
		removeExperience(inv->getAsciiParameter(_param0_removeExperience__string_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 10:
		resp->insertBoolean(setCharacterBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 11:
		resp->insertBoolean(clearCharacterBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 12:
		setForcePower(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 13:
		setForcePowerMax(inv->getSignedIntParameter());
		break;
	case 14:
		setForceRegen(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertInt(getForcePower());
		break;
	case 16:
		resp->insertInt(getForcePowerMax());
		break;
	case 17:
		resp->insertInt(getForceRegen());
		break;
	case 18:
		resp->insertBoolean(isJedi());
		break;
	case 19:
		resp->insertBoolean(isOnFullForce());
		break;
	case 20:
		resp->insertInt(getCharacterBitmask());
		break;
	case 21:
		resp->insertSignedInt(getWaypointListSize());
		break;
	case 22:
		resp->insertInt(getJediState());
		break;
	case 23:
		resp->insertLong(getWaypoint(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 24:
		addWaypoint((WaypointObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 25:
		resp->insertBoolean(removeWaypoint((WaypointObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 26:
		updateWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 27:
		resp->insertLong(getPlayer()->_getObjectID());
		break;
	case 28:
		setCurrentTitle(inv->getAsciiParameter(_param0_setCurrentTitle__string_bool_), inv->getBooleanParameter());
		break;
	case 29:
		setTitle(inv->getAsciiParameter(_param0_setTitle__string_));
		break;
	case 30:
		resp->insertAscii(getCurrentTitle());
		break;
	case 31:
		resp->insertInt(getExperienceListCount());
		break;
	case 32:
		resp->insertInt(getNewExperienceListCount(inv->getSignedIntParameter()));
		break;
	case 33:
		resp->insertInt(getWaypointListCount());
		break;
	case 34:
		resp->insertInt(getNewWaypointListCount(inv->getSignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerObjectAdapter::sendToOwner() {
	return ((PlayerObjectImplementation*) impl)->sendToOwner();
}

void PlayerObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((PlayerObjectImplementation*) impl)->sendTo(player, doClose);
}

void PlayerObjectAdapter::addExperience(const string& xpType, int xp, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->addExperience(xpType, xp, updateClient);
}

void PlayerObjectAdapter::removeExperience(const string& xpType, int xp, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->removeExperience(xpType, xp, updateClient);
}

bool PlayerObjectAdapter::setCharacterBit(unsigned int bit, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->setCharacterBit(bit, updateClient);
}

bool PlayerObjectAdapter::clearCharacterBit(unsigned int bit, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->clearCharacterBit(bit, updateClient);
}

void PlayerObjectAdapter::setForcePower(unsigned int fp, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->setForcePower(fp, updateClient);
}

void PlayerObjectAdapter::setForcePowerMax(int fp) {
	return ((PlayerObjectImplementation*) impl)->setForcePowerMax(fp);
}

void PlayerObjectAdapter::setForceRegen(int fp) {
	return ((PlayerObjectImplementation*) impl)->setForceRegen(fp);
}

unsigned int PlayerObjectAdapter::getForcePower() {
	return ((PlayerObjectImplementation*) impl)->getForcePower();
}

unsigned int PlayerObjectAdapter::getForcePowerMax() {
	return ((PlayerObjectImplementation*) impl)->getForcePowerMax();
}

unsigned int PlayerObjectAdapter::getForceRegen() {
	return ((PlayerObjectImplementation*) impl)->getForceRegen();
}

bool PlayerObjectAdapter::isJedi() {
	return ((PlayerObjectImplementation*) impl)->isJedi();
}

bool PlayerObjectAdapter::isOnFullForce() {
	return ((PlayerObjectImplementation*) impl)->isOnFullForce();
}

unsigned int PlayerObjectAdapter::getCharacterBitmask() {
	return ((PlayerObjectImplementation*) impl)->getCharacterBitmask();
}

int PlayerObjectAdapter::getWaypointListSize() {
	return ((PlayerObjectImplementation*) impl)->getWaypointListSize();
}

unsigned int PlayerObjectAdapter::getJediState() {
	return ((PlayerObjectImplementation*) impl)->getJediState();
}

WaypointObject* PlayerObjectAdapter::getWaypoint(unsigned long long id) {
	return ((PlayerObjectImplementation*) impl)->getWaypoint(id);
}

void PlayerObjectAdapter::addWaypoint(WaypointObject* wp, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->addWaypoint(wp, updateClient);
}

bool PlayerObjectAdapter::removeWaypoint(WaypointObject* wp, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->removeWaypoint(wp, updateClient);
}

void PlayerObjectAdapter::updateWaypoint(WaypointObject* wp) {
	return ((PlayerObjectImplementation*) impl)->updateWaypoint(wp);
}

Player* PlayerObjectAdapter::getPlayer() {
	return ((PlayerObjectImplementation*) impl)->getPlayer();
}

void PlayerObjectAdapter::setCurrentTitle(string& nTitle, bool updateClient) {
	return ((PlayerObjectImplementation*) impl)->setCurrentTitle(nTitle, updateClient);
}

void PlayerObjectAdapter::setTitle(string& temptitle) {
	return ((PlayerObjectImplementation*) impl)->setTitle(temptitle);
}

string& PlayerObjectAdapter::getCurrentTitle() {
	return ((PlayerObjectImplementation*) impl)->getCurrentTitle();
}

unsigned int PlayerObjectAdapter::getExperienceListCount() {
	return ((PlayerObjectImplementation*) impl)->getExperienceListCount();
}

unsigned int PlayerObjectAdapter::getNewExperienceListCount(int cnt) {
	return ((PlayerObjectImplementation*) impl)->getNewExperienceListCount(cnt);
}

unsigned int PlayerObjectAdapter::getWaypointListCount() {
	return ((PlayerObjectImplementation*) impl)->getWaypointListCount();
}

unsigned int PlayerObjectAdapter::getNewWaypointListCount(int cnt) {
	return ((PlayerObjectImplementation*) impl)->getNewWaypointListCount(cnt);
}

/*
 *	PlayerObjectHelper
 */

PlayerObjectHelper* PlayerObjectHelper::staticInitializer = PlayerObjectHelper::instance();

PlayerObjectHelper::PlayerObjectHelper() {
	className = "PlayerObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerObjectHelper::finalizeHelper() {
	PlayerObjectHelper::finalize();
}

DistributedObject* PlayerObjectHelper::instantiateObject() {
	return new PlayerObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerObjectAdapter((PlayerObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerObjectServant
 */

PlayerObjectServant::PlayerObjectServant() : SceneObjectImplementation() {
	_classHelper = PlayerObjectHelper::instance();
}

PlayerObjectServant::~PlayerObjectServant() {
}

void PlayerObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerObjectServant::_getStub() {
	return _this;
}

