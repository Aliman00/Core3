/*
 *	server/zone/objects/player/PlayerObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/commands/QueueCommand.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

/*
 *	PlayerObjectStub
 */

PlayerObject::PlayerObject(LuaObject* templateData) : IntangibleObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerObjectImplementation(templateData);
	_impl->_setStub(this);
}

PlayerObject::PlayerObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

PlayerObject::~PlayerObject() {
}


void PlayerObject::loadTemplateData(LuaObject* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void PlayerObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->initializeTransientMembers();
}

void PlayerObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void PlayerObject::sendMessage(BasePacket* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->sendMessage(msg);
}

void PlayerObject::addExperience(const String& xpType, int xp, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->addExperience(xpType, xp, notifyClient);
}

void PlayerObject::removeExperience(const String& xpType, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(xpType);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->removeExperience(xpType, notifyClient);
}

void PlayerObject::addWaypoint(WaypointObject* waypoint, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerObjectImplementation*) _impl)->addWaypoint(waypoint, notifyClient);
}

void PlayerObject::addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(planet);
		method.addFloatParameter(positionX);
		method.addFloatParameter(positionY);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->addWaypoint(planet, positionX, positionY, notifyClient);
}

void PlayerObject::addSkills(Vector<QueueCommand*>& skills, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerObjectImplementation*) _impl)->addSkills(skills, notifyClient);
}

void PlayerObject::addSkills(Vector<Certification*>& skills, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerObjectImplementation*) _impl)->addSkills(skills, notifyClient);
}

void PlayerObject::removeSkills(Vector<QueueCommand*>& skills, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerObjectImplementation*) _impl)->removeSkills(skills, notifyClient);
}

void PlayerObject::removeSkills(Vector<Certification*>& skills, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerObjectImplementation*) _impl)->removeSkills(skills, notifyClient);
}

bool PlayerObject::hasSkill(Skill* skill) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((PlayerObjectImplementation*) _impl)->hasSkill(skill);
}

unsigned int PlayerObject::getCharacterBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getCharacterBitmask();
}

String PlayerObject::getTitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithAsciiReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return ((PlayerObjectImplementation*) _impl)->getTitle();
}

unsigned int PlayerObject::getAdminLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getAdminLevel();
}

void PlayerObject::setCharacterBitmask(unsigned int bitmask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedIntParameter(bitmask);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setCharacterBitmask(bitmask);
}

bool PlayerObject::setCharacterBit(unsigned int bit, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->setCharacterBit(bit, notifyClient);
}

bool PlayerObject::clearCharacterBit(unsigned int bit, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->clearCharacterBit(bit, notifyClient);
}

void PlayerObject::setTitle(const String& characterTitle) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(characterTitle);

		method.executeWithVoidReturn();
	} else
		((PlayerObjectImplementation*) _impl)->setTitle(characterTitle);
}

DeltaVectorMap<String, int>* PlayerObject::getExperienceList() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((PlayerObjectImplementation*) _impl)->getExperienceList();
}

int PlayerObject::getForcePower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getForcePower();
}

int PlayerObject::getForcePowerMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getForcePowerMax();
}

WaypointList* PlayerObject::getWaypointList() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((PlayerObjectImplementation*) _impl)->getWaypointList();
}

SkillList* PlayerObject::getSkills() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((PlayerObjectImplementation*) _impl)->getSkills();
}

int PlayerObject::getFoodFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getFoodFilling();
}

int PlayerObject::getFoodFillingMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getFoodFillingMax();
}

int PlayerObject::getDrinkFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getDrinkFilling();
}

int PlayerObject::getDrinkFillingMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getDrinkFillingMax();
}

int PlayerObject::getJediState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerObjectImplementation*) _impl)->getJediState();
}

/*
 *	PlayerObjectImplementation
 */

PlayerObjectImplementation::PlayerObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}

PlayerObjectImplementation::~PlayerObjectImplementation() {
	PlayerObjectImplementation::finalize();
}


void PlayerObjectImplementation::finalize() {
}

void PlayerObjectImplementation::_initializeImplementation() {
	_setClassHelper(PlayerObjectHelper::instance());

	_serializationHelperMethod();
}

void PlayerObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerObject*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerObjectImplementation::_getStub() {
	return _this;
}

PlayerObjectImplementation::operator const PlayerObject*() {
	return _this;
}

void PlayerObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("PlayerObject");

	addSerializableVariable("characterBitmask", &characterBitmask);
	addSerializableVariable("title", &title);
	addSerializableVariable("forcePower", &forcePower);
	addSerializableVariable("forcePowerMax", &forcePowerMax);
	addSerializableVariable("foodFilling", &foodFilling);
	addSerializableVariable("foodFillingMax", &foodFillingMax);
	addSerializableVariable("drinkFilling", &drinkFilling);
	addSerializableVariable("drinkFillingMax", &drinkFillingMax);
	addSerializableVariable("jediState", &jediState);
	addSerializableVariable("adminLevel", &adminLevel);
	addSerializableVariable("experienceList", &experienceList);
	addSerializableVariable("waypointList", &waypointList);
	addSerializableVariable("skillList", &skillList);
}

PlayerObjectImplementation::PlayerObjectImplementation(LuaObject* templateData) : IntangibleObjectImplementation((templateData)) {
	_initializeImplementation();
	// server/zone/objects/player/PlayerObject.idl(107):  loadTemplateData(templateData);
	loadTemplateData(templateData);
	// server/zone/objects/player/PlayerObject.idl(109):  Logger.setLoggingName("PlayerObject");
	Logger::setLoggingName("PlayerObject");
}

bool PlayerObjectImplementation::hasSkill(Skill* skill) {
	// server/zone/objects/player/PlayerObject.idl(202):  return skillList.contains(skill);
	return (&skillList)->contains(skill);
}

unsigned int PlayerObjectImplementation::getCharacterBitmask() {
	// server/zone/objects/player/PlayerObject.idl(206):  return characterBitmask;
	return characterBitmask;
}

String PlayerObjectImplementation::getTitle() {
	// server/zone/objects/player/PlayerObject.idl(210):  return title;
	return title;
}

unsigned int PlayerObjectImplementation::getAdminLevel() {
	// server/zone/objects/player/PlayerObject.idl(214):  return adminLevel;
	return adminLevel;
}

void PlayerObjectImplementation::setCharacterBitmask(unsigned int bitmask) {
	// server/zone/objects/player/PlayerObject.idl(218):  characterBitmask = bitmask;
	characterBitmask = bitmask;
}

void PlayerObjectImplementation::setTitle(const String& characterTitle) {
	// server/zone/objects/player/PlayerObject.idl(225):  title = characterTitle;
	title = characterTitle;
}

DeltaVectorMap<String, int>* PlayerObjectImplementation::getExperienceList() {
	// server/zone/objects/player/PlayerObject.idl(230):  return experienceList;
	return (&experienceList);
}

int PlayerObjectImplementation::getForcePower() {
	// server/zone/objects/player/PlayerObject.idl(234):  return forcePower;
	return forcePower;
}

int PlayerObjectImplementation::getForcePowerMax() {
	// server/zone/objects/player/PlayerObject.idl(238):  return forcePowerMax;
	return forcePowerMax;
}

WaypointList* PlayerObjectImplementation::getWaypointList() {
	// server/zone/objects/player/PlayerObject.idl(243):  return waypointList;
	return (&waypointList);
}

SkillList* PlayerObjectImplementation::getSkills() {
	// server/zone/objects/player/PlayerObject.idl(248):  return skillList;
	return (&skillList);
}

int PlayerObjectImplementation::getFoodFilling() {
	// server/zone/objects/player/PlayerObject.idl(252):  return foodFilling;
	return foodFilling;
}

int PlayerObjectImplementation::getFoodFillingMax() {
	// server/zone/objects/player/PlayerObject.idl(256):  return foodFillingMax;
	return foodFillingMax;
}

int PlayerObjectImplementation::getDrinkFilling() {
	// server/zone/objects/player/PlayerObject.idl(260):  return drinkFilling;
	return drinkFilling;
}

int PlayerObjectImplementation::getDrinkFillingMax() {
	// server/zone/objects/player/PlayerObject.idl(264):  return drinkFillingMax;
	return drinkFillingMax;
}

int PlayerObjectImplementation::getJediState() {
	// server/zone/objects/player/PlayerObject.idl(268):  return jediState;
	return jediState;
}

/*
 *	PlayerObjectAdapter
 */

PlayerObjectAdapter::PlayerObjectAdapter(PlayerObjectImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* PlayerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 9:
		addExperience(inv->getAsciiParameter(_param0_addExperience__String_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 10:
		removeExperience(inv->getAsciiParameter(_param0_removeExperience__String_bool_), inv->getBooleanParameter());
		break;
	case 11:
		addWaypoint(inv->getAsciiParameter(_param0_addWaypoint__String_float_float_bool_), inv->getFloatParameter(), inv->getFloatParameter(), inv->getBooleanParameter());
		break;
	case 12:
		resp->insertInt(getCharacterBitmask());
		break;
	case 13:
		resp->insertAscii(getTitle());
		break;
	case 14:
		resp->insertInt(getAdminLevel());
		break;
	case 15:
		setCharacterBitmask(inv->getUnsignedIntParameter());
		break;
	case 16:
		resp->insertBoolean(setCharacterBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 17:
		resp->insertBoolean(clearCharacterBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 18:
		setTitle(inv->getAsciiParameter(_param0_setTitle__String_));
		break;
	case 19:
		resp->insertSignedInt(getForcePower());
		break;
	case 20:
		resp->insertSignedInt(getForcePowerMax());
		break;
	case 21:
		resp->insertSignedInt(getFoodFilling());
		break;
	case 22:
		resp->insertSignedInt(getFoodFillingMax());
		break;
	case 23:
		resp->insertSignedInt(getDrinkFilling());
		break;
	case 24:
		resp->insertSignedInt(getDrinkFillingMax());
		break;
	case 25:
		resp->insertSignedInt(getJediState());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerObjectAdapter::initializeTransientMembers() {
	((PlayerObjectImplementation*) impl)->initializeTransientMembers();
}

void PlayerObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((PlayerObjectImplementation*) impl)->sendBaselinesTo(player);
}

void PlayerObjectAdapter::sendMessage(BasePacket* msg) {
	((PlayerObjectImplementation*) impl)->sendMessage(msg);
}

void PlayerObjectAdapter::addExperience(const String& xpType, int xp, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->addExperience(xpType, xp, notifyClient);
}

void PlayerObjectAdapter::removeExperience(const String& xpType, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->removeExperience(xpType, notifyClient);
}

void PlayerObjectAdapter::addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->addWaypoint(planet, positionX, positionY, notifyClient);
}

unsigned int PlayerObjectAdapter::getCharacterBitmask() {
	return ((PlayerObjectImplementation*) impl)->getCharacterBitmask();
}

String PlayerObjectAdapter::getTitle() {
	return ((PlayerObjectImplementation*) impl)->getTitle();
}

unsigned int PlayerObjectAdapter::getAdminLevel() {
	return ((PlayerObjectImplementation*) impl)->getAdminLevel();
}

void PlayerObjectAdapter::setCharacterBitmask(unsigned int bitmask) {
	((PlayerObjectImplementation*) impl)->setCharacterBitmask(bitmask);
}

bool PlayerObjectAdapter::setCharacterBit(unsigned int bit, bool notifyClient) {
	return ((PlayerObjectImplementation*) impl)->setCharacterBit(bit, notifyClient);
}

bool PlayerObjectAdapter::clearCharacterBit(unsigned int bit, bool notifyClient) {
	return ((PlayerObjectImplementation*) impl)->clearCharacterBit(bit, notifyClient);
}

void PlayerObjectAdapter::setTitle(const String& characterTitle) {
	((PlayerObjectImplementation*) impl)->setTitle(characterTitle);
}

int PlayerObjectAdapter::getForcePower() {
	return ((PlayerObjectImplementation*) impl)->getForcePower();
}

int PlayerObjectAdapter::getForcePowerMax() {
	return ((PlayerObjectImplementation*) impl)->getForcePowerMax();
}

int PlayerObjectAdapter::getFoodFilling() {
	return ((PlayerObjectImplementation*) impl)->getFoodFilling();
}

int PlayerObjectAdapter::getFoodFillingMax() {
	return ((PlayerObjectImplementation*) impl)->getFoodFillingMax();
}

int PlayerObjectAdapter::getDrinkFilling() {
	return ((PlayerObjectImplementation*) impl)->getDrinkFilling();
}

int PlayerObjectAdapter::getDrinkFillingMax() {
	return ((PlayerObjectImplementation*) impl)->getDrinkFillingMax();
}

int PlayerObjectAdapter::getJediState() {
	return ((PlayerObjectImplementation*) impl)->getJediState();
}

/*
 *	PlayerObjectHelper
 */

PlayerObjectHelper* PlayerObjectHelper::staticInitializer = PlayerObjectHelper::instance();

PlayerObjectHelper::PlayerObjectHelper() {
	className = "PlayerObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerObjectHelper::finalizeHelper() {
	PlayerObjectHelper::finalize();
}

DistributedObject* PlayerObjectHelper::instantiateObject() {
	return new PlayerObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerObjectHelper::instantiateServant() {
	return new PlayerObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerObjectAdapter((PlayerObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

