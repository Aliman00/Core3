/*
 *	server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiCharacterBuilderBox.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/player/sui/SuiCallback.h"

#include "server/zone/objects/player/sui/listbox/SuiListBoxMenuItem.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	SuiCharacterBuilderBoxStub
 */

enum {RPC_GENERATEMESSAGE__ = 6,RPC_ISCHARACTERBUILDERBOX__};

SuiCharacterBuilderBox::SuiCharacterBuilderBox(PlayerCreature* player, CharacterBuilderMenuNode* root) : SuiListBox(DummyConstructorParameter::instance()) {
	SuiCharacterBuilderBoxImplementation* _implementation = new SuiCharacterBuilderBoxImplementation(player, root);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

SuiCharacterBuilderBox::SuiCharacterBuilderBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

SuiCharacterBuilderBox::~SuiCharacterBuilderBox() {
}


BaseMessage* SuiCharacterBuilderBox::generateMessage() {
	SuiCharacterBuilderBoxImplementation* _implementation = (SuiCharacterBuilderBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return _implementation->generateMessage();
}

CharacterBuilderMenuNode* SuiCharacterBuilderBox::getCurrentNode() {
	SuiCharacterBuilderBoxImplementation* _implementation = (SuiCharacterBuilderBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCurrentNode();
}

void SuiCharacterBuilderBox::setCurrentNode(CharacterBuilderMenuNode* node) {
	SuiCharacterBuilderBoxImplementation* _implementation = (SuiCharacterBuilderBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setCurrentNode(node);
}

bool SuiCharacterBuilderBox::isCharacterBuilderBox() {
	SuiCharacterBuilderBoxImplementation* _implementation = (SuiCharacterBuilderBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCHARACTERBUILDERBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCharacterBuilderBox();
}

DistributedObjectServant* SuiCharacterBuilderBox::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void SuiCharacterBuilderBox::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<SuiCharacterBuilderBoxImplementation*>(servant));
}

/*
 *	SuiCharacterBuilderBoxImplementation
 */

SuiCharacterBuilderBoxImplementation::SuiCharacterBuilderBoxImplementation(DummyConstructorParameter* param) : SuiListBoxImplementation(param) {
	_initializeImplementation();
}


SuiCharacterBuilderBoxImplementation::~SuiCharacterBuilderBoxImplementation() {
}


void SuiCharacterBuilderBoxImplementation::finalize() {
}

void SuiCharacterBuilderBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiCharacterBuilderBoxHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SuiCharacterBuilderBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SuiCharacterBuilderBox*) stub;
	SuiListBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiCharacterBuilderBoxImplementation::_getStub() {
	return _this;
}

SuiCharacterBuilderBoxImplementation::operator const SuiCharacterBuilderBox*() {
	return _this;
}

Object* SuiCharacterBuilderBoxImplementation::clone() {
	return dynamic_cast<Object*>(new SuiCharacterBuilderBoxImplementation(*this));
}


void SuiCharacterBuilderBoxImplementation::lock(bool doLock) {
}

void SuiCharacterBuilderBoxImplementation::lock(ManagedObject* obj) {
}

void SuiCharacterBuilderBoxImplementation::rlock(bool doLock) {
}

void SuiCharacterBuilderBoxImplementation::wlock(bool doLock) {
}

void SuiCharacterBuilderBoxImplementation::wlock(ManagedObject* obj) {
}

void SuiCharacterBuilderBoxImplementation::unlock(bool doLock) {
}

void SuiCharacterBuilderBoxImplementation::runlock(bool doLock) {
}

void SuiCharacterBuilderBoxImplementation::_serializationHelperMethod() {
	SuiListBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiCharacterBuilderBox");

}

void SuiCharacterBuilderBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SuiCharacterBuilderBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiCharacterBuilderBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiListBoxImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void SuiCharacterBuilderBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiCharacterBuilderBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiCharacterBuilderBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + SuiListBoxImplementation::writeObjectMembers(stream);
}

SuiCharacterBuilderBoxImplementation::SuiCharacterBuilderBoxImplementation(PlayerCreature* player, CharacterBuilderMenuNode* root) : SuiListBoxImplementation(player, SuiWindowType::CHARACTER_BUILDER_LIST, 0) {
	_initializeImplementation();
	// server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.idl():  		Logger.setLoggingName("SuiCharacterBuilderBox");
	Logger::setLoggingName("SuiCharacterBuilderBox");
	// server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.idl():  		setPromptTitle("Character Builder");
	setPromptTitle("Character Builder");
	// server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.idl():  		setPromptText("Provided below are items which the developers feel are necessary to complete the current testing objectives. Please select only the items which you require.");
	setPromptText("Provided below are items which the developers feel are necessary to complete the current testing objectives. Please select only the items which you require.");
	// server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.idl():  		rootNode = root;
	rootNode = root;
	// server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.idl():  		currentNode = root;
	currentNode = root;
}

bool SuiCharacterBuilderBoxImplementation::isCharacterBuilderBox() {
	// server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.idl():  		return true;
	return true;
}

/*
 *	SuiCharacterBuilderBoxAdapter
 */

SuiCharacterBuilderBoxAdapter::SuiCharacterBuilderBoxAdapter(SuiCharacterBuilderBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* SuiCharacterBuilderBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GENERATEMESSAGE__:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	case RPC_ISCHARACTERBUILDERBOX__:
		resp->insertBoolean(isCharacterBuilderBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

BaseMessage* SuiCharacterBuilderBoxAdapter::generateMessage() {
	return ((SuiCharacterBuilderBoxImplementation*) impl)->generateMessage();
}

bool SuiCharacterBuilderBoxAdapter::isCharacterBuilderBox() {
	return ((SuiCharacterBuilderBoxImplementation*) impl)->isCharacterBuilderBox();
}

/*
 *	SuiCharacterBuilderBoxHelper
 */

SuiCharacterBuilderBoxHelper* SuiCharacterBuilderBoxHelper::staticInitializer = SuiCharacterBuilderBoxHelper::instance();

SuiCharacterBuilderBoxHelper::SuiCharacterBuilderBoxHelper() {
	className = "SuiCharacterBuilderBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiCharacterBuilderBoxHelper::finalizeHelper() {
	SuiCharacterBuilderBoxHelper::finalize();
}

DistributedObject* SuiCharacterBuilderBoxHelper::instantiateObject() {
	return new SuiCharacterBuilderBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiCharacterBuilderBoxHelper::instantiateServant() {
	return new SuiCharacterBuilderBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiCharacterBuilderBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiCharacterBuilderBoxAdapter((SuiCharacterBuilderBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

