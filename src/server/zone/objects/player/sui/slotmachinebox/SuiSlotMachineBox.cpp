/*
 *	server/zone/objects/player/sui/slotmachinebox/SuiSlotMachineBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiSlotMachineBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/sui/SuiBox.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/u3d/Quaternion.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/player/sui/SuiCallback.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/player/sui/listbox/SuiListBoxMenuItem.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	SuiSlotMachineBoxStub
 */

enum {RPC_GETPAYOUTBOXID__ = 6};

SuiSlotMachineBox::SuiSlotMachineBox(PlayerCreature* player, unsigned int windowType, unsigned int payoutBox, unsigned int listBoxType) : SuiListBox(DummyConstructorParameter::instance()) {
	SuiSlotMachineBoxImplementation* _implementation = new SuiSlotMachineBoxImplementation(player, windowType, payoutBox, listBoxType);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

SuiSlotMachineBox::SuiSlotMachineBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

SuiSlotMachineBox::~SuiSlotMachineBox() {
}


unsigned int SuiSlotMachineBox::getPayoutBoxID() {
	SuiSlotMachineBoxImplementation* _implementation = (SuiSlotMachineBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPAYOUTBOXID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPayoutBoxID();
}

DistributedObjectServant* SuiSlotMachineBox::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void SuiSlotMachineBox::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<SuiSlotMachineBoxImplementation*>(servant));
}

/*
 *	SuiSlotMachineBoxImplementation
 */

SuiSlotMachineBoxImplementation::SuiSlotMachineBoxImplementation(DummyConstructorParameter* param) : SuiListBoxImplementation(param) {
	_initializeImplementation();
}


SuiSlotMachineBoxImplementation::~SuiSlotMachineBoxImplementation() {
}


void SuiSlotMachineBoxImplementation::finalize() {
}

void SuiSlotMachineBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiSlotMachineBoxHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SuiSlotMachineBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SuiSlotMachineBox*) stub;
	SuiListBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiSlotMachineBoxImplementation::_getStub() {
	return _this;
}

SuiSlotMachineBoxImplementation::operator const SuiSlotMachineBox*() {
	return _this;
}

Object* SuiSlotMachineBoxImplementation::clone() {
	return dynamic_cast<Object*>(new SuiSlotMachineBoxImplementation(*this));
}


void SuiSlotMachineBoxImplementation::lock(bool doLock) {
}

void SuiSlotMachineBoxImplementation::lock(ManagedObject* obj) {
}

void SuiSlotMachineBoxImplementation::rlock(bool doLock) {
}

void SuiSlotMachineBoxImplementation::wlock(bool doLock) {
}

void SuiSlotMachineBoxImplementation::wlock(ManagedObject* obj) {
}

void SuiSlotMachineBoxImplementation::unlock(bool doLock) {
}

void SuiSlotMachineBoxImplementation::runlock(bool doLock) {
}

void SuiSlotMachineBoxImplementation::_serializationHelperMethod() {
	SuiListBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiSlotMachineBox");

}

void SuiSlotMachineBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SuiSlotMachineBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiSlotMachineBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiListBoxImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "payoutBoxID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&payoutBoxID, stream);
		return true;
	}


	return false;
}

void SuiSlotMachineBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiSlotMachineBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiSlotMachineBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "payoutBoxID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&payoutBoxID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + SuiListBoxImplementation::writeObjectMembers(stream);
}

SuiSlotMachineBoxImplementation::SuiSlotMachineBoxImplementation(PlayerCreature* player, unsigned int windowType, unsigned int payoutBox, unsigned int listBoxType) : SuiListBoxImplementation(player, windowType, listBoxType) {
	_initializeImplementation();
	// server/zone/objects/player/sui/slotmachinebox/SuiSlotMachineBox.idl():  		payoutBoxID = payoutBox;
	payoutBoxID = payoutBox;
}

unsigned int SuiSlotMachineBoxImplementation::getPayoutBoxID() {
	// server/zone/objects/player/sui/slotmachinebox/SuiSlotMachineBox.idl():  		return payoutBoxID;
	return payoutBoxID;
}

/*
 *	SuiSlotMachineBoxAdapter
 */

SuiSlotMachineBoxAdapter::SuiSlotMachineBoxAdapter(SuiSlotMachineBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* SuiSlotMachineBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GETPAYOUTBOXID__:
		resp->insertInt(getPayoutBoxID());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned int SuiSlotMachineBoxAdapter::getPayoutBoxID() {
	return ((SuiSlotMachineBoxImplementation*) impl)->getPayoutBoxID();
}

/*
 *	SuiSlotMachineBoxHelper
 */

SuiSlotMachineBoxHelper* SuiSlotMachineBoxHelper::staticInitializer = SuiSlotMachineBoxHelper::instance();

SuiSlotMachineBoxHelper::SuiSlotMachineBoxHelper() {
	className = "SuiSlotMachineBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiSlotMachineBoxHelper::finalizeHelper() {
	SuiSlotMachineBoxHelper::finalize();
}

DistributedObject* SuiSlotMachineBoxHelper::instantiateObject() {
	return new SuiSlotMachineBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiSlotMachineBoxHelper::instantiateServant() {
	return new SuiSlotMachineBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiSlotMachineBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiSlotMachineBoxAdapter((SuiSlotMachineBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

