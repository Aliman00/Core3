/*
 *	server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceDeedListBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/u3d/Quaternion.h"

#include "engine/service/Message.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/player/sui/SuiCallback.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/Task.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "system/lang/Time.h"

#include "server/zone/ZoneClientSession.h"

#include "engine/util/u3d/QuadTree.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/player/sui/listbox/SuiListBoxMenuItem.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

/*
 *	ResourceDeedListBoxStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ADDBOX__STRING_,RPC_GETBOXCOUNT__,RPC_GETBOX__INT_,RPC_REMOVEBOX__,RPC_GETCURRENTBOX__,RPC_GETPREVIOUSBOX__};

ResourceDeedListBox::ResourceDeedListBox(PlayerCreature* player, unsigned int windowType, unsigned int listBoxType) : SuiListBox(DummyConstructorParameter::instance()) {
	ResourceDeedListBoxImplementation* _implementation = new ResourceDeedListBoxImplementation(player, windowType, listBoxType);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

ResourceDeedListBox::ResourceDeedListBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

ResourceDeedListBox::~ResourceDeedListBox() {
}


void ResourceDeedListBox::initializeTransientMembers() {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void ResourceDeedListBox::addBox(const String& name) {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBOX__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->addBox(name);
}

int ResourceDeedListBox::getBoxCount() {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBOXCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBoxCount();
}

String ResourceDeedListBox::getBox(int index) {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBOX__INT_);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getBox);
		return _return_getBox;
	} else
		return _implementation->getBox(index);
}

void ResourceDeedListBox::removeBox() {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBOX__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeBox();
}

String ResourceDeedListBox::getCurrentBox() {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCURRENTBOX__);

		method.executeWithAsciiReturn(_return_getCurrentBox);
		return _return_getCurrentBox;
	} else
		return _implementation->getCurrentBox();
}

String ResourceDeedListBox::getPreviousBox() {
	ResourceDeedListBoxImplementation* _implementation = (ResourceDeedListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPREVIOUSBOX__);

		method.executeWithAsciiReturn(_return_getPreviousBox);
		return _return_getPreviousBox;
	} else
		return _implementation->getPreviousBox();
}

DistributedObjectServant* ResourceDeedListBox::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void ResourceDeedListBox::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<ResourceDeedListBoxImplementation*>(servant));
}

/*
 *	ResourceDeedListBoxImplementation
 */

ResourceDeedListBoxImplementation::ResourceDeedListBoxImplementation(DummyConstructorParameter* param) : SuiListBoxImplementation(param) {
	_initializeImplementation();
}


ResourceDeedListBoxImplementation::~ResourceDeedListBoxImplementation() {
	if (_this->isCurrentVersion(this))
	ResourceDeedListBoxImplementation::finalize();
}


void ResourceDeedListBoxImplementation::_initializeImplementation() {
	_setClassHelper(ResourceDeedListBoxHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ResourceDeedListBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceDeedListBox*) stub;
	SuiListBoxImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceDeedListBoxImplementation::_getStub() {
	return _this;
}

ResourceDeedListBoxImplementation::operator const ResourceDeedListBox*() {
	return _this;
}

Object* ResourceDeedListBoxImplementation::clone() {
	return dynamic_cast<Object*>(new ResourceDeedListBoxImplementation(*this));
}


void ResourceDeedListBoxImplementation::lock(bool doLock) {
}

void ResourceDeedListBoxImplementation::lock(ManagedObject* obj) {
}

void ResourceDeedListBoxImplementation::rlock(bool doLock) {
}

void ResourceDeedListBoxImplementation::wlock(bool doLock) {
}

void ResourceDeedListBoxImplementation::wlock(ManagedObject* obj) {
}

void ResourceDeedListBoxImplementation::unlock(bool doLock) {
}

void ResourceDeedListBoxImplementation::runlock(bool doLock) {
}

void ResourceDeedListBoxImplementation::_serializationHelperMethod() {
	SuiListBoxImplementation::_serializationHelperMethod();

	_setClassName("ResourceDeedListBox");

}

void ResourceDeedListBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ResourceDeedListBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ResourceDeedListBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiListBoxImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ResourceDeedListBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ResourceDeedListBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ResourceDeedListBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + SuiListBoxImplementation::writeObjectMembers(stream);
}

ResourceDeedListBoxImplementation::ResourceDeedListBoxImplementation(PlayerCreature* player, unsigned int windowType, unsigned int listBoxType) : SuiListBoxImplementation(player, windowType, SuiBox::LISTBOX) {
	_initializeImplementation();
}

void ResourceDeedListBoxImplementation::addBox(const String& name) {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl():  		boxes.add(name);
	(&boxes)->add(name);
}

int ResourceDeedListBoxImplementation::getBoxCount() {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl():  		return boxes.size();
	return (&boxes)->size();
}

String ResourceDeedListBoxImplementation::getBox(int index) {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl():  		return boxes.get(index);
	return (&boxes)->get(index);
}

String ResourceDeedListBoxImplementation::getCurrentBox() {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl():  		return boxes.get(boxes.size() - 1);
	return (&boxes)->get((&boxes)->size() - 1);
}

/*
 *	ResourceDeedListBoxAdapter
 */

ResourceDeedListBoxAdapter::ResourceDeedListBoxAdapter(ResourceDeedListBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* ResourceDeedListBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_ADDBOX__STRING_:
		addBox(inv->getAsciiParameter(_param0_addBox__String_));
		break;
	case RPC_GETBOXCOUNT__:
		resp->insertSignedInt(getBoxCount());
		break;
	case RPC_GETBOX__INT_:
		resp->insertAscii(getBox(inv->getSignedIntParameter()));
		break;
	case RPC_REMOVEBOX__:
		removeBox();
		break;
	case RPC_GETCURRENTBOX__:
		resp->insertAscii(getCurrentBox());
		break;
	case RPC_GETPREVIOUSBOX__:
		resp->insertAscii(getPreviousBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceDeedListBoxAdapter::finalize() {
	((ResourceDeedListBoxImplementation*) impl)->finalize();
}

void ResourceDeedListBoxAdapter::initializeTransientMembers() {
	((ResourceDeedListBoxImplementation*) impl)->initializeTransientMembers();
}

void ResourceDeedListBoxAdapter::addBox(const String& name) {
	((ResourceDeedListBoxImplementation*) impl)->addBox(name);
}

int ResourceDeedListBoxAdapter::getBoxCount() {
	return ((ResourceDeedListBoxImplementation*) impl)->getBoxCount();
}

String ResourceDeedListBoxAdapter::getBox(int index) {
	return ((ResourceDeedListBoxImplementation*) impl)->getBox(index);
}

void ResourceDeedListBoxAdapter::removeBox() {
	((ResourceDeedListBoxImplementation*) impl)->removeBox();
}

String ResourceDeedListBoxAdapter::getCurrentBox() {
	return ((ResourceDeedListBoxImplementation*) impl)->getCurrentBox();
}

String ResourceDeedListBoxAdapter::getPreviousBox() {
	return ((ResourceDeedListBoxImplementation*) impl)->getPreviousBox();
}

/*
 *	ResourceDeedListBoxHelper
 */

ResourceDeedListBoxHelper* ResourceDeedListBoxHelper::staticInitializer = ResourceDeedListBoxHelper::instance();

ResourceDeedListBoxHelper::ResourceDeedListBoxHelper() {
	className = "ResourceDeedListBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void ResourceDeedListBoxHelper::finalizeHelper() {
	ResourceDeedListBoxHelper::finalize();
}

DistributedObject* ResourceDeedListBoxHelper::instantiateObject() {
	return new ResourceDeedListBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceDeedListBoxHelper::instantiateServant() {
	return new ResourceDeedListBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceDeedListBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceDeedListBoxAdapter((ResourceDeedListBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

