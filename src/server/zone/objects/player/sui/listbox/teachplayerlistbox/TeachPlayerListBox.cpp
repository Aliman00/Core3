/*
 *	server/zone/objects/player/sui/listbox/teachplayerlistbox/TeachPlayerListBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "TeachPlayerListBox.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/player/sui/SuiCallback.h"

#include "server/zone/objects/player/sui/listbox/SuiListBoxMenuItem.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	TeachPlayerListBoxStub
 */

enum {RPC_SETSTUDENT__PLAYERCREATURE_,RPC_GENERATESKILLLIST__PLAYERCREATURE_PLAYERCREATURE_};

TeachPlayerListBox::TeachPlayerListBox(PlayerCreature* player) : SuiListBox(DummyConstructorParameter::instance()) {
	TeachPlayerListBoxImplementation* _implementation = new TeachPlayerListBoxImplementation(player);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

TeachPlayerListBox::TeachPlayerListBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

TeachPlayerListBox::~TeachPlayerListBox() {
}


void TeachPlayerListBox::setStudent(PlayerCreature* student) {
	TeachPlayerListBoxImplementation* _implementation = (TeachPlayerListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTUDENT__PLAYERCREATURE_);
		method.addObjectParameter(student);

		method.executeWithVoidReturn();
	} else
		_implementation->setStudent(student);
}

PlayerCreature* TeachPlayerListBox::getStudent() {
	TeachPlayerListBoxImplementation* _implementation = (TeachPlayerListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getStudent();
}

const String TeachPlayerListBox::getTeachingSkillOption(int index) {
	TeachPlayerListBoxImplementation* _implementation = (TeachPlayerListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getTeachingSkillOption(index);
}

bool TeachPlayerListBox::generateSkillList(PlayerCreature* teacher, PlayerCreature* student) {
	TeachPlayerListBoxImplementation* _implementation = (TeachPlayerListBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATESKILLLIST__PLAYERCREATURE_PLAYERCREATURE_);
		method.addObjectParameter(teacher);
		method.addObjectParameter(student);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->generateSkillList(teacher, student);
}

DistributedObjectServant* TeachPlayerListBox::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void TeachPlayerListBox::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<TeachPlayerListBoxImplementation*>(servant));
}

/*
 *	TeachPlayerListBoxImplementation
 */

TeachPlayerListBoxImplementation::TeachPlayerListBoxImplementation(DummyConstructorParameter* param) : SuiListBoxImplementation(param) {
	_initializeImplementation();
}


TeachPlayerListBoxImplementation::~TeachPlayerListBoxImplementation() {
}


void TeachPlayerListBoxImplementation::finalize() {
}

void TeachPlayerListBoxImplementation::_initializeImplementation() {
	_setClassHelper(TeachPlayerListBoxHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TeachPlayerListBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TeachPlayerListBox*) stub;
	SuiListBoxImplementation::_setStub(stub);
}

DistributedObjectStub* TeachPlayerListBoxImplementation::_getStub() {
	return _this;
}

TeachPlayerListBoxImplementation::operator const TeachPlayerListBox*() {
	return _this;
}

Object* TeachPlayerListBoxImplementation::clone() {
	return dynamic_cast<Object*>(new TeachPlayerListBoxImplementation(*this));
}


void TeachPlayerListBoxImplementation::lock(bool doLock) {
}

void TeachPlayerListBoxImplementation::lock(ManagedObject* obj) {
}

void TeachPlayerListBoxImplementation::rlock(bool doLock) {
}

void TeachPlayerListBoxImplementation::wlock(bool doLock) {
}

void TeachPlayerListBoxImplementation::wlock(ManagedObject* obj) {
}

void TeachPlayerListBoxImplementation::unlock(bool doLock) {
}

void TeachPlayerListBoxImplementation::runlock(bool doLock) {
}

void TeachPlayerListBoxImplementation::_serializationHelperMethod() {
	SuiListBoxImplementation::_serializationHelperMethod();

	_setClassName("TeachPlayerListBox");

}

void TeachPlayerListBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TeachPlayerListBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TeachPlayerListBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiListBoxImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "studentPlayer") {
		TypeInfo<ManagedReference<PlayerCreature* > >::parseFromBinaryStream(&studentPlayer, stream);
		return true;
	}

	if (_name == "teachingSkillOptions") {
		TypeInfo<Vector<SkillBox*> >::parseFromBinaryStream(&teachingSkillOptions, stream);
		return true;
	}


	return false;
}

void TeachPlayerListBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TeachPlayerListBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TeachPlayerListBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "studentPlayer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<PlayerCreature* > >::toBinaryStream(&studentPlayer, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "teachingSkillOptions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<SkillBox*> >::toBinaryStream(&teachingSkillOptions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 2 + SuiListBoxImplementation::writeObjectMembers(stream);
}

TeachPlayerListBoxImplementation::TeachPlayerListBoxImplementation(PlayerCreature* player) : SuiListBoxImplementation(player, 36, 0) {
	_initializeImplementation();
}

void TeachPlayerListBoxImplementation::setStudent(PlayerCreature* student) {
	// server/zone/objects/player/sui/listbox/teachplayerlistbox/TeachPlayerListBox.idl():   studentPlayer = student;
	studentPlayer = student;
}

PlayerCreature* TeachPlayerListBoxImplementation::getStudent() {
	// server/zone/objects/player/sui/listbox/teachplayerlistbox/TeachPlayerListBox.idl():   return studentPlayer;
	return studentPlayer;
}

const String TeachPlayerListBoxImplementation::getTeachingSkillOption(int index) {
	// server/zone/objects/player/sui/listbox/teachplayerlistbox/TeachPlayerListBox.idl():   return teachingSkillOptions.get(index).getName();
	return (&teachingSkillOptions)->get(index)->getName();
}

/*
 *	TeachPlayerListBoxAdapter
 */

TeachPlayerListBoxAdapter::TeachPlayerListBoxAdapter(TeachPlayerListBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* TeachPlayerListBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_SETSTUDENT__PLAYERCREATURE_:
		setStudent((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_GENERATESKILLLIST__PLAYERCREATURE_PLAYERCREATURE_:
		resp->insertBoolean(generateSkillList((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void TeachPlayerListBoxAdapter::setStudent(PlayerCreature* student) {
	((TeachPlayerListBoxImplementation*) impl)->setStudent(student);
}

bool TeachPlayerListBoxAdapter::generateSkillList(PlayerCreature* teacher, PlayerCreature* student) {
	return ((TeachPlayerListBoxImplementation*) impl)->generateSkillList(teacher, student);
}

/*
 *	TeachPlayerListBoxHelper
 */

TeachPlayerListBoxHelper* TeachPlayerListBoxHelper::staticInitializer = TeachPlayerListBoxHelper::instance();

TeachPlayerListBoxHelper::TeachPlayerListBoxHelper() {
	className = "TeachPlayerListBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void TeachPlayerListBoxHelper::finalizeHelper() {
	TeachPlayerListBoxHelper::finalize();
}

DistributedObject* TeachPlayerListBoxHelper::instantiateObject() {
	return new TeachPlayerListBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* TeachPlayerListBoxHelper::instantiateServant() {
	return new TeachPlayerListBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TeachPlayerListBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TeachPlayerListBoxAdapter((TeachPlayerListBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

