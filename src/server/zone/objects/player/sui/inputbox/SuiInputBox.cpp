/*
 *	server/zone/objects/player/sui/inputbox/SuiInputBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiInputBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/player/sui/SuiCallback.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	SuiInputBoxStub
 */

enum {RPC_GENERATEMESSAGE__ = 6,RPC_SETMAXINPUTSIZE__INT_,RPC_SETDEFAULTINPUT__STRING_,RPC_ISFILTERBOX__,RPC_ISINPUTBOX__};

SuiInputBox::SuiInputBox(PlayerCreature* player, unsigned int windowType, int inputtype) : SuiBox(DummyConstructorParameter::instance()) {
	SuiInputBoxImplementation* _implementation = new SuiInputBoxImplementation(player, windowType, inputtype);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

SuiInputBox::SuiInputBox(DummyConstructorParameter* param) : SuiBox(param) {
}

SuiInputBox::~SuiInputBox() {
}


BaseMessage* SuiInputBox::generateMessage() {
	SuiInputBoxImplementation* _implementation = (SuiInputBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return _implementation->generateMessage();
}

void SuiInputBox::setMaxInputSize(int size) {
	SuiInputBoxImplementation* _implementation = (SuiInputBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXINPUTSIZE__INT_);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxInputSize(size);
}

void SuiInputBox::setDefaultInput(const String& text) {
	SuiInputBoxImplementation* _implementation = (SuiInputBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEFAULTINPUT__STRING_);
		method.addAsciiParameter(text);

		method.executeWithVoidReturn();
	} else
		_implementation->setDefaultInput(text);
}

bool SuiInputBox::isFilterBox() {
	SuiInputBoxImplementation* _implementation = (SuiInputBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFILTERBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFilterBox();
}

bool SuiInputBox::isInputBox() {
	SuiInputBoxImplementation* _implementation = (SuiInputBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINPUTBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInputBox();
}

DistributedObjectServant* SuiInputBox::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void SuiInputBox::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<SuiInputBoxImplementation*>(servant));
}

/*
 *	SuiInputBoxImplementation
 */

SuiInputBoxImplementation::SuiInputBoxImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiInputBoxImplementation::~SuiInputBoxImplementation() {
}


void SuiInputBoxImplementation::finalize() {
}

void SuiInputBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiInputBoxHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SuiInputBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SuiInputBox*) stub;
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiInputBoxImplementation::_getStub() {
	return _this;
}

SuiInputBoxImplementation::operator const SuiInputBox*() {
	return _this;
}

Object* SuiInputBoxImplementation::clone() {
	return dynamic_cast<Object*>(new SuiInputBoxImplementation(*this));
}


void SuiInputBoxImplementation::lock(bool doLock) {
}

void SuiInputBoxImplementation::lock(ManagedObject* obj) {
}

void SuiInputBoxImplementation::rlock(bool doLock) {
}

void SuiInputBoxImplementation::wlock(bool doLock) {
}

void SuiInputBoxImplementation::wlock(ManagedObject* obj) {
}

void SuiInputBoxImplementation::unlock(bool doLock) {
}

void SuiInputBoxImplementation::runlock(bool doLock) {
}

void SuiInputBoxImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiInputBox");

}

void SuiInputBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SuiInputBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiInputBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiBoxImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "maxInputSize") {
		TypeInfo<int >::parseFromBinaryStream(&maxInputSize, stream);
		return true;
	}

	if (_name == "defaultInput") {
		TypeInfo<String >::parseFromBinaryStream(&defaultInput, stream);
		return true;
	}

	if (_name == "inputType") {
		TypeInfo<int >::parseFromBinaryStream(&inputType, stream);
		return true;
	}


	return false;
}

void SuiInputBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiInputBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiInputBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "maxInputSize";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&maxInputSize, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "defaultInput";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&defaultInput, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "inputType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&inputType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + SuiBoxImplementation::writeObjectMembers(stream);
}

SuiInputBoxImplementation::SuiInputBoxImplementation(PlayerCreature* player, unsigned int windowType, int inputtype) : SuiBoxImplementation(player, windowType, SuiBox::INPUTBOX) {
	_initializeImplementation();
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		maxInputSize = 25;
	maxInputSize = 25;
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		inputType = inputtype;
	inputType = inputtype;
}

void SuiInputBoxImplementation::setMaxInputSize(int size) {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		maxInputSize = size;
	maxInputSize = size;
}

void SuiInputBoxImplementation::setDefaultInput(const String& text) {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		defaultInput = text;
	defaultInput = text;
}

bool SuiInputBoxImplementation::isFilterBox() {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		return inputType == FILTER;
	return inputType == FILTER;
}

bool SuiInputBoxImplementation::isInputBox() {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		return true;
	return true;
}

/*
 *	SuiInputBoxAdapter
 */

SuiInputBoxAdapter::SuiInputBoxAdapter(SuiInputBoxImplementation* obj) : SuiBoxAdapter(obj) {
}

Packet* SuiInputBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GENERATEMESSAGE__:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	case RPC_SETMAXINPUTSIZE__INT_:
		setMaxInputSize(inv->getSignedIntParameter());
		break;
	case RPC_SETDEFAULTINPUT__STRING_:
		setDefaultInput(inv->getAsciiParameter(_param0_setDefaultInput__String_));
		break;
	case RPC_ISFILTERBOX__:
		resp->insertBoolean(isFilterBox());
		break;
	case RPC_ISINPUTBOX__:
		resp->insertBoolean(isInputBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

BaseMessage* SuiInputBoxAdapter::generateMessage() {
	return ((SuiInputBoxImplementation*) impl)->generateMessage();
}

void SuiInputBoxAdapter::setMaxInputSize(int size) {
	((SuiInputBoxImplementation*) impl)->setMaxInputSize(size);
}

void SuiInputBoxAdapter::setDefaultInput(const String& text) {
	((SuiInputBoxImplementation*) impl)->setDefaultInput(text);
}

bool SuiInputBoxAdapter::isFilterBox() {
	return ((SuiInputBoxImplementation*) impl)->isFilterBox();
}

bool SuiInputBoxAdapter::isInputBox() {
	return ((SuiInputBoxImplementation*) impl)->isInputBox();
}

/*
 *	SuiInputBoxHelper
 */

SuiInputBoxHelper* SuiInputBoxHelper::staticInitializer = SuiInputBoxHelper::instance();

SuiInputBoxHelper::SuiInputBoxHelper() {
	className = "SuiInputBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiInputBoxHelper::finalizeHelper() {
	SuiInputBoxHelper::finalize();
}

DistributedObject* SuiInputBoxHelper::instantiateObject() {
	return new SuiInputBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiInputBoxHelper::instantiateServant() {
	return new SuiInputBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiInputBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiInputBoxAdapter((SuiInputBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

