/*
 *	server/zone/objects/player/sessions/MigrateStatsSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "MigrateStatsSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"


// Imported class dependencies

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/ZonePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/Facade.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "engine/core/Task.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "system/net/Packet.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/templates/tangible/SharedWeaponObjectTemplate.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/net/Socket.h"

#include "system/util/Vector.h"

#include "engine/service/proto/BasePacket.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "system/io/ObjectOutputStream.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/service/Message.h"

#include "server/login/account/Account.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/chat/ChatManager.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/io/ObjectInputStream.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/guild/GuildManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "system/lang/Exception.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/ZoneClientSession.h"

#include "system/lang/Time.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/stm/TransactionalReference.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "system/net/SocketAddress.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

/*
 *	MigrateStatsSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 6,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_SETATTRIBUTETOMODIFY__INT_INT_,RPC_GETATTRIBTUETOMODIFY__INT_,RPC_MIGRATESTATS__};

MigrateStatsSession::MigrateStatsSession(CreatureObject* parent) : Facade(DummyConstructorParameter::instance()) {
	MigrateStatsSessionImplementation* _implementation = new MigrateStatsSessionImplementation(parent);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

MigrateStatsSession::MigrateStatsSession(DummyConstructorParameter* param) : Facade(param) {
}

MigrateStatsSession::~MigrateStatsSession() {
}


int MigrateStatsSession::initializeSession() {
	MigrateStatsSessionImplementation* _implementation = (MigrateStatsSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->initializeSession();
}

int MigrateStatsSession::cancelSession() {
	MigrateStatsSessionImplementation* _implementation = (MigrateStatsSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->cancelSession();
}

int MigrateStatsSession::clearSession() {
	MigrateStatsSessionImplementation* _implementation = (MigrateStatsSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->clearSession();
}

void MigrateStatsSession::setAttributeToModify(int attribute, int value) {
	MigrateStatsSessionImplementation* _implementation = (MigrateStatsSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETATTRIBUTETOMODIFY__INT_INT_);
		method.addSignedIntParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setAttributeToModify(attribute, value);
}

int MigrateStatsSession::getAttribtueToModify(int attribute) {
	MigrateStatsSessionImplementation* _implementation = (MigrateStatsSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTRIBTUETOMODIFY__INT_);
		method.addSignedIntParameter(attribute);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAttribtueToModify(attribute);
}

void MigrateStatsSession::migrateStats() {
	MigrateStatsSessionImplementation* _implementation = (MigrateStatsSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MIGRATESTATS__);

		method.executeWithVoidReturn();
	} else
		_implementation->migrateStats();
}

DistributedObjectServant* MigrateStatsSession::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void MigrateStatsSession::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<MigrateStatsSessionImplementation*>(servant));
}

/*
 *	MigrateStatsSessionImplementation
 */

MigrateStatsSessionImplementation::MigrateStatsSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


MigrateStatsSessionImplementation::~MigrateStatsSessionImplementation() {
}


void MigrateStatsSessionImplementation::finalize() {
}

void MigrateStatsSessionImplementation::_initializeImplementation() {
	_setClassHelper(MigrateStatsSessionHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void MigrateStatsSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MigrateStatsSession*) stub;
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* MigrateStatsSessionImplementation::_getStub() {
	return _this;
}

MigrateStatsSessionImplementation::operator const MigrateStatsSession*() {
	return _this;
}

Object* MigrateStatsSessionImplementation::clone() {
	return dynamic_cast<Object*>(new MigrateStatsSessionImplementation(*this));
}


void MigrateStatsSessionImplementation::lock(bool doLock) {
}

void MigrateStatsSessionImplementation::lock(ManagedObject* obj) {
}

void MigrateStatsSessionImplementation::rlock(bool doLock) {
}

void MigrateStatsSessionImplementation::wlock(bool doLock) {
}

void MigrateStatsSessionImplementation::wlock(ManagedObject* obj) {
}

void MigrateStatsSessionImplementation::unlock(bool doLock) {
}

void MigrateStatsSessionImplementation::runlock(bool doLock) {
}

void MigrateStatsSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("MigrateStatsSession");

}

void MigrateStatsSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(MigrateStatsSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MigrateStatsSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "creature") {
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&creature, stream);
		return true;
	}

	if (_name == "attributesToModify") {
		TypeInfo<Vector<int> >::parseFromBinaryStream(&attributesToModify, stream);
		return true;
	}


	return false;
}

void MigrateStatsSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MigrateStatsSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MigrateStatsSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "creature";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&creature, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "attributesToModify";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<int> >::toBinaryStream(&attributesToModify, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 2 + FacadeImplementation::writeObjectMembers(stream);
}

MigrateStatsSessionImplementation::MigrateStatsSessionImplementation(CreatureObject* parent) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		creature = parent;
	creature = parent;
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		Logger.setLoggingName("MigrateStatsSession");
	Logger::setLoggingName("MigrateStatsSession");
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		}
	for (	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		for (int i = 0;
	int i = 0;
	i < 9;
i = i + 1) {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			attributesToModify.add(0);
	(&attributesToModify)->add(0);
}
}

int MigrateStatsSessionImplementation::initializeSession() {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		return 0;
	return 0;
}

int MigrateStatsSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		}
	if (creature == NULL){
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			return 0;
	return 0;
}

	else {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			creature.dropActiveSession(SessionFacadeType.MIGRATESTATS);
	creature->dropActiveSession(SessionFacadeType::MIGRATESTATS);
}
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		return 0;
	return 0;
}

int MigrateStatsSessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		attributesToModify.removeAll();
	(&attributesToModify)->removeAll();
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		return 0;
	return 0;
}

void MigrateStatsSessionImplementation::setAttributeToModify(int attribute, int value) {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		attributesToModify.set(attribute, value);
	(&attributesToModify)->set(attribute, value);
}

int MigrateStatsSessionImplementation::getAttribtueToModify(int attribute) {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		return attributesToModify.get(attribute);
	return (&attributesToModify)->get(attribute);
}

void MigrateStatsSessionImplementation::migrateStats() {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		}
	for (	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		for (int i = 0;
	int i = 0;
	i < 9;
i = i + 1) {
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			int newValue = attributesToModify.get(i);
	int newValue = (&attributesToModify)->get(i);
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			int originalAmount = creature.getBaseHAM(i);
	int originalAmount = creature->getBaseHAM(i);
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			creature.setBaseHAM(i, newValue);
	creature->setBaseHAM(i, newValue);
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			creature.setHAM(i, creature.getHAM(i) + (newValue - originalAmount));
	creature->setHAM(i, creature->getHAM(i) + (newValue - originalAmount));
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  			creature.setMaxHAM(i, creature.getMaxHAM(i) + (newValue - originalAmount));
	creature->setMaxHAM(i, creature->getMaxHAM(i) + (newValue - originalAmount));
}
	// server/zone/objects/player/sessions/MigrateStatsSession.idl():  		cancelSession();
	cancelSession();
}

/*
 *	MigrateStatsSessionAdapter
 */

MigrateStatsSessionAdapter::MigrateStatsSessionAdapter(MigrateStatsSessionImplementation* obj) : FacadeAdapter(obj) {
}

Packet* MigrateStatsSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		resp->insertSignedInt(initializeSession());
		break;
	case RPC_CANCELSESSION__:
		resp->insertSignedInt(cancelSession());
		break;
	case RPC_CLEARSESSION__:
		resp->insertSignedInt(clearSession());
		break;
	case RPC_SETATTRIBUTETOMODIFY__INT_INT_:
		setAttributeToModify(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case RPC_GETATTRIBTUETOMODIFY__INT_:
		resp->insertSignedInt(getAttribtueToModify(inv->getSignedIntParameter()));
		break;
	case RPC_MIGRATESTATS__:
		migrateStats();
		break;
	default:
		return NULL;
	}

	return resp;
}

int MigrateStatsSessionAdapter::initializeSession() {
	return ((MigrateStatsSessionImplementation*) impl)->initializeSession();
}

int MigrateStatsSessionAdapter::cancelSession() {
	return ((MigrateStatsSessionImplementation*) impl)->cancelSession();
}

int MigrateStatsSessionAdapter::clearSession() {
	return ((MigrateStatsSessionImplementation*) impl)->clearSession();
}

void MigrateStatsSessionAdapter::setAttributeToModify(int attribute, int value) {
	((MigrateStatsSessionImplementation*) impl)->setAttributeToModify(attribute, value);
}

int MigrateStatsSessionAdapter::getAttribtueToModify(int attribute) {
	return ((MigrateStatsSessionImplementation*) impl)->getAttribtueToModify(attribute);
}

void MigrateStatsSessionAdapter::migrateStats() {
	((MigrateStatsSessionImplementation*) impl)->migrateStats();
}

/*
 *	MigrateStatsSessionHelper
 */

MigrateStatsSessionHelper* MigrateStatsSessionHelper::staticInitializer = MigrateStatsSessionHelper::instance();

MigrateStatsSessionHelper::MigrateStatsSessionHelper() {
	className = "MigrateStatsSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void MigrateStatsSessionHelper::finalizeHelper() {
	MigrateStatsSessionHelper::finalize();
}

DistributedObject* MigrateStatsSessionHelper::instantiateObject() {
	return new MigrateStatsSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* MigrateStatsSessionHelper::instantiateServant() {
	return new MigrateStatsSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MigrateStatsSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MigrateStatsSessionAdapter((MigrateStatsSessionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

