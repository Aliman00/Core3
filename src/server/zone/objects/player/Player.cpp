/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

/*
 *	server/zone/objects/player/Player.cpp generated by Engine3 IDL compiler 0.51
 */

#include "../../ZoneClient.h"

#include "../../Zone.h"

#include "../scene/SceneObject.h"

#include "../creature/CreatureObject.h"

#include "PlayerObject.h"

#include "../tangible/weapons/Weapon.h"

#include "../tangible/Datapad.h"

#include "../group/GroupObject.h"

#include "../guild/Guild.h"

#include "../waypoint/WaypointObject.h"

#include "../../../chat/room/ChatRoom.h"

#include "Player.h"

#include "PlayerImplementation.h"

/*
 *	PlayerStub
 */

Player::Player() : CreatureObject(NULL) {
}

Player::Player(ORBObjectServant* obj) : CreatureObject(obj) {
}

Player::Player(Player& ref) : CreatureObject(ref) {
}

Player::~Player() {
}

Player* Player::clone() {
	return new Player(*this);
}


Player* Player::create(ZoneClient* client) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 6);
		invocation.addObjectParameter(client);

		return (Player*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->create(client);
}

void Player::load(ZoneClient* client) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 7);
		invocation.addObjectParameter(client);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->load(client);
}

void Player::reload(ZoneClient* client) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 8);
		invocation.addObjectParameter(client);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->reload(client);
}

void Player::unload() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 9);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->unload();
}

void Player::disconnect(bool closeClient, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 10);
		invocation.addBooleanParameter(closeClient);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->disconnect(closeClient, doLock);
}

void Player::logout(bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 11);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->logout(doLock);
}

void Player::userLogout(int msgCounter) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 12);
		invocation.addSignedIntParameter(msgCounter);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->userLogout(msgCounter);
}

void Player::insertToZone(Zone* zone) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 13);
		invocation.addObjectParameter(zone);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->insertToZone(zone);
}

void Player::reinsertToZone(Zone* zone) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 14);
		invocation.addObjectParameter(zone);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->reinsertToZone(zone);
}

void Player::lightUpdateZone() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 15);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lightUpdateZone();
}

void Player::updateZone() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 16);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateZone();
}

void Player::updateZoneWithParent(unsigned long long cell) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 17);
		invocation.addUnsignedLongParameter(cell);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateZoneWithParent(cell);
}

void Player::lightUpdateZoneWithParent(unsigned long long cell) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 18);
		invocation.addUnsignedLongParameter(cell);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lightUpdateZoneWithParent(cell);
}

void Player::switchMap(int planetid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 19);
		invocation.addSignedIntParameter(planetid);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->switchMap(planetid);
}

void Player::doWarp(float x, float y, float z, bool doRandomize) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 20);
		invocation.addFloatParameter(x);
		invocation.addFloatParameter(y);
		invocation.addFloatParameter(z);
		invocation.addBooleanParameter(doRandomize);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doWarp(x, y, z, doRandomize);
}

void Player::bounceBack() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 21);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->bounceBack();
}

void Player::sendTo(Player* player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 22);
		invocation.addObjectParameter(player);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendTo(player);
}

void Player::notifySceneReady() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 23);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->notifySceneReady();
}

void Player::addDatapadItem(SceneObject* item) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 24);
		invocation.addObjectParameter(item);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDatapadItem(item);
}

SceneObject* Player::getDatapadItem(unsigned long long oid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 25);
		invocation.addUnsignedLongParameter(oid);

		return (SceneObject*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDatapadItem(oid);
}

void Player::removeDatapadItem(unsigned long long oid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 26);
		invocation.addUnsignedLongParameter(oid);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeDatapadItem(oid);
}

void Player::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 27);
		invocation.addUnsignedIntParameter(actioncntr);
		invocation.addFloatParameter(timer);
		invocation.addUnsignedIntParameter(tab1);
		invocation.addUnsignedIntParameter(tab2);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void Player::queueAction(Player* player, unsigned long long target, unsigned int actionCRC, unsigned int actionCntr) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 28);
		invocation.addObjectParameter(player);
		invocation.addUnsignedLongParameter(target);
		invocation.addUnsignedIntParameter(actionCRC);
		invocation.addUnsignedIntParameter(actionCntr);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->queueAction(player, target, actionCRC, actionCntr);
}

void Player::deleteQueueAction(unsigned int actioncntr) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 29);
		invocation.addUnsignedIntParameter(actioncntr);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->deleteQueueAction(actioncntr);
}

void Player::changePosture(int post) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 30);
		invocation.addSignedIntParameter(post);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changePosture(post);
}

void Player::doCenterOfBeing() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 31);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doCenterOfBeing();
}

void Player::removeCenterOfBeing() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 32);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeCenterOfBeing();
}

void Player::doPeace() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 33);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doPeace();
}

void Player::kill() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 34);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->kill();
}

void Player::lootCorpse() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 35);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lootCorpse();
}

void Player::changeCloth(unsigned long long itemid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 36);
		invocation.addUnsignedLongParameter(itemid);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeCloth(itemid);
}

void Player::changeWeapon(unsigned long long itemid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 37);
		invocation.addUnsignedLongParameter(itemid);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeWeapon(itemid);
}

void Player::setWeaponSkillMods(Weapon* weapon) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 38);
		invocation.addObjectParameter(weapon);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setWeaponSkillMods(weapon);
}

void Player::createItems() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 39);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createItems();
}

void Player::loadItems() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 40);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadItems();
}

void Player::createBaseStats() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 41);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createBaseStats();
}

void Player::saveProfessions() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 42);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->saveProfessions();
}

void Player::loadProfessions() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 43);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadProfessions();
}

bool Player::trainSkillBox(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 44);
		invocation.addAsciiParameter(name);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->trainSkillBox(name);
}

void Player::surrenderSkillBox(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 45);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->surrenderSkillBox(name);
}

void Player::resetSkillBoxesIterator() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 46);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->resetSkillBoxesIterator();
}

int Player::getSkillBoxesSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 47);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSkillBoxesSize();
}

string& Player::getNextSkillBox() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 48);

		invocation.executeWithAsciiReturn(_return_getNextSkillBox);
		return _return_getNextSkillBox;
	} else
		return ((PlayerImplementation*) _impl)->getNextSkillBox();
}

bool Player::hasNextSkillBox() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 49);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasNextSkillBox();
}

void Player::addWaypoint(WaypointObject* wp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 50);
		invocation.addObjectParameter(wp);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addWaypoint(wp);
}

void Player::removeWaypoint(WaypointObject* wp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 51);
		invocation.addObjectParameter(wp);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeWaypoint(wp);
}

WaypointObject* Player::getWaypoint(unsigned long long id) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 52);
		invocation.addUnsignedLongParameter(id);

		return (WaypointObject*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getWaypoint(id);
}

void Player::addXp(string& xpType, int xp, bool updateClient) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 53);
		invocation.addAsciiParameter(xpType);
		invocation.addSignedIntParameter(xp);
		invocation.addBooleanParameter(updateClient);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addXp(xpType, xp, updateClient);
}

void Player::removeXp(string& xpType, int xp, bool updateClient) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 54);
		invocation.addAsciiParameter(xpType);
		invocation.addSignedIntParameter(xp);
		invocation.addBooleanParameter(updateClient);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeXp(xpType, xp, updateClient);
}

void Player::removeFromDuelList(Player* targetPlayer) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 55);
		invocation.addObjectParameter(targetPlayer);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeFromDuelList(targetPlayer);
}

void Player::addToDuelList(Player* targetPlayer) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 56);
		invocation.addObjectParameter(targetPlayer);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addToDuelList(targetPlayer);
}

bool Player::isInDuelWith(Player* targetPlayer, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 57);
		invocation.addObjectParameter(targetPlayer);
		invocation.addBooleanParameter(doLock);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isInDuelWith(targetPlayer, doLock);
}

Player* Player::getDuelListObject(int index) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 58);
		invocation.addSignedIntParameter(index);

		return (Player*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDuelListObject(index);
}

bool Player::requestedDuelTo(Player* targetPlayer) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 59);
		invocation.addObjectParameter(targetPlayer);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->requestedDuelTo(targetPlayer);
}

bool Player::isDuelListEmpty() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 60);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isDuelListEmpty();
}

int Player::getDuelListSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 61);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDuelListSize();
}

bool Player::setGuild(unsigned int gid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 62);
		invocation.addUnsignedIntParameter(gid);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->setGuild(gid);
}

void Player::setGuild(Guild* gild) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 63);
		invocation.addObjectParameter(gild);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setGuild(gild);
}

bool Player::updateGuild(unsigned int gid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 64);
		invocation.addUnsignedIntParameter(gid);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->updateGuild(gid);
}

void Player::updateGuild(Guild* guild) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 65);
		invocation.addObjectParameter(guild);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateGuild(guild);
}

void Player::addChatRoom(ChatRoom* room) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 66);
		invocation.addObjectParameter(room);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addChatRoom(room);
}

void Player::removeChatRoom(ChatRoom* room) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 67);
		invocation.addObjectParameter(room);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeChatRoom(room);
}

void Player::sendSystemMessage(const string& msg) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 68);
		invocation.addAsciiParameter(msg);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(msg);
}

void Player::sendSystemMessage(unicode& msg) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 69);
		invocation.addUnicodeParameter(msg);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(msg);
}

void Player::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 70);
		invocation.addAsciiParameter(file);
		invocation.addAsciiParameter(str);
		invocation.addUnsignedLongParameter(targetid);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void Player::info(const string& message, bool forcedLog) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 71);
		invocation.addAsciiParameter(message);
		invocation.addBooleanParameter(forcedLog);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->info(message, forcedLog);
}

void Player::error(const string& message) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 72);
		invocation.addAsciiParameter(message);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->error(message);
}

void Player::setConversatingCreature(CreatureObject* conversator) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 73);
		invocation.addObjectParameter(conversator);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setConversatingCreature(conversator);
}

void Player::setFirstName(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 74);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFirstName(name);
}

void Player::setBiography(const string& bio) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 75);
		invocation.addAsciiParameter(bio);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setBiography(bio);
}

void Player::setBiography(unicode& bio) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 76);
		invocation.addUnicodeParameter(bio);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setBiography(bio);
}

void Player::setHairData(string& hair) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 77);
		invocation.addAsciiParameter(hair);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setHairData(hair);
}

bool Player::changeForceBar(int fp) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 78);
		invocation.addSignedIntParameter(fp);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->changeForceBar(fp);
}

void Player::setCharacterID(unsigned long long id) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 79);
		invocation.addUnsignedLongParameter(id);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCharacterID(id);
}

void Player::setStartingProfession(const string& prof) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 80);
		invocation.addAsciiParameter(prof);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setStartingProfession(prof);
}

void Player::setHairObject(const string& hair) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 81);
		invocation.addAsciiParameter(hair);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setHairObject(hair);
}

void Player::setPlayerObject(PlayerObject* obj) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 82);
		invocation.addObjectParameter(obj);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setPlayerObject(obj);
}

void Player::setOnline() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 83);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOnline();
}

void Player::setClient(ZoneClient* client) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 84);
		invocation.addObjectParameter(client);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setClient(client);
}

void Player::setOvert() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 85);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOvert();
}

void Player::setCovert() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 86);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCovert();
}

void Player::newChangeFactionEvent(unsigned int faction) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 87);
		invocation.addUnsignedIntParameter(faction);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->newChangeFactionEvent(faction);
}

void Player::setRaceFileName(string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 88);
		invocation.addAsciiParameter(name);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setRaceFileName(name);
}

void Player::setStartingLocation(string& loc) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 89);
		invocation.addAsciiParameter(loc);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setStartingLocation(loc);
}

void Player::setFactionRank(string& fac) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 90);
		invocation.addAsciiParameter(fac);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFactionRank(fac);
}

void Player::setItemShift(unsigned int shift) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 91);
		invocation.addUnsignedIntParameter(shift);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setItemShift(shift);
}

void Player::toggleCharacterBit(unsigned int bit) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 92);
		invocation.addUnsignedIntParameter(bit);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->toggleCharacterBit(bit);
}

bool Player::awardBadge(unsigned int badgeindex) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 93);
		invocation.addUnsignedIntParameter(badgeindex);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->awardBadge(badgeindex);
}

void Player::setLinkDead() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 94);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLinkDead();
}

void Player::setAdminLevel(int level) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 95);
		invocation.addSignedIntParameter(level);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setAdminLevel(level);
}

void Player::setLastTestPositionX(float pos) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 96);
		invocation.addFloatParameter(pos);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastTestPositionX(pos);
}

void Player::setLastTestPositionY(float pos) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 97);
		invocation.addFloatParameter(pos);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastTestPositionY(pos);
}

PlayerObject* Player::getPlayerObject() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 98);

		return (PlayerObject*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPlayerObject();
}

bool Player::isLinkDead() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 99);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLinkDead();
}

bool Player::isLoggingIn() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 100);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLoggingIn();
}

bool Player::isLoggingOut() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 101);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLoggingOut();
}

CreatureObject* Player::getConversatingCreature() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 102);

		return (CreatureObject*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getConversatingCreature();
}

string& Player::getFirstName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 103);

		invocation.executeWithAsciiReturn(_return_getFirstName);
		return _return_getFirstName;
	} else
		return ((PlayerImplementation*) _impl)->getFirstName();
}

string& Player::getRaceFileName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 104);

		invocation.executeWithAsciiReturn(_return_getRaceFileName);
		return _return_getRaceFileName;
	} else
		return ((PlayerImplementation*) _impl)->getRaceFileName();
}

unicode& Player::getBiography() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 105);

		invocation.executeWithUnicodeReturn(_return_getBiography);
		return _return_getBiography;
	} else
		return ((PlayerImplementation*) _impl)->getBiography();
}

string& Player::getHairData() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 106);

		invocation.executeWithAsciiReturn(_return_getHairData);
		return _return_getHairData;
	} else
		return ((PlayerImplementation*) _impl)->getHairData();
}

unsigned int Player::getForcePower() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 107);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getForcePower();
}

bool Player::isJedi() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 108);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isJedi();
}

void Player::sendMessage(Message* msg) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 109);
		invocation.addObjectParameter(msg);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMessage(msg);
}

void Player::sendMessage(StandaloneMessage* msg) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 110);
		invocation.addObjectParameter(msg);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMessage(msg);
}

unsigned long long Player::getCharacterID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 111);

		return invocation.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCharacterID();
}

string& Player::getStartingProfession() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 112);

		invocation.executeWithAsciiReturn(_return_getStartingProfession);
		return _return_getStartingProfession;
	} else
		return ((PlayerImplementation*) _impl)->getStartingProfession();
}

int Player::getZoneIndex() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 113);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getZoneIndex();
}

string& Player::getHairObject() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 114);

		invocation.executeWithAsciiReturn(_return_getHairObject);
		return _return_getHairObject;
	} else
		return ((PlayerImplementation*) _impl)->getHairObject();
}

bool Player::isOnline() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 115);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOnline();
}

ZoneClient* Player::getClient() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 116);

		return (ZoneClient*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getClient();
}

GroupObject* Player::getGroupObject() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 117);

		return (GroupObject*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getGroupObject();
}

string& Player::getFactionRank() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 118);

		invocation.executeWithAsciiReturn(_return_getFactionRank);
		return _return_getFactionRank;
	} else
		return ((PlayerImplementation*) _impl)->getFactionRank();
}

unsigned int Player::getRebelPoints() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 119);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getRebelPoints();
}

unsigned int Player::getImperialPoints() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 120);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getImperialPoints();
}

int Player::getPvpRating() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 121);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPvpRating();
}

void Player::getPlayersNearYou() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 122);

		invocation.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->getPlayersNearYou();
}

int Player::getRegionID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 123);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getRegionID();
}

int Player::getCertificationListSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 124);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCertificationListSize();
}

string& Player::getCertification(int idx) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 125);
		invocation.addSignedIntParameter(idx);

		invocation.executeWithAsciiReturn(_return_getCertification);
		return _return_getCertification;
	} else
		return ((PlayerImplementation*) _impl)->getCertification(idx);
}

bool Player::isChangingFaction() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 126);

		return invocation.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isChangingFaction();
}

Datapad* Player::getDatapad() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 127);

		return (Datapad*) invocation.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDatapad();
}

unsigned int Player::getNewItemID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 128);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getNewItemID();
}

unsigned int Player::getItemShift() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 129);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getItemShift();
}

float Player::getLastTestPositionX() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 130);

		return invocation.executeWithFloatReturn();
	} else
		return ((PlayerImplementation*) _impl)->getLastTestPositionX();
}

float Player::getLastTestPositionY() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 131);

		return invocation.executeWithFloatReturn();
	} else
		return ((PlayerImplementation*) _impl)->getLastTestPositionY();
}

/*
 *	PlayerAdapter
 */

PlayerAdapter::PlayerAdapter(PlayerImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* PlayerAdapter::invokeMethod(uint32 methid, ORBMethodInvocation* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(create((ZoneClient*) inv->getObjectParameter())->_getORBObjectID());
		break;
	case 7:
		load((ZoneClient*) inv->getObjectParameter());
		break;
	case 8:
		reload((ZoneClient*) inv->getObjectParameter());
		break;
	case 9:
		unload();
		break;
	case 10:
		disconnect(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 11:
		logout(inv->getBooleanParameter());
		break;
	case 12:
		userLogout(inv->getSignedIntParameter());
		break;
	case 13:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 14:
		reinsertToZone((Zone*) inv->getObjectParameter());
		break;
	case 15:
		lightUpdateZone();
		break;
	case 16:
		updateZone();
		break;
	case 17:
		updateZoneWithParent(inv->getUnsignedLongParameter());
		break;
	case 18:
		lightUpdateZoneWithParent(inv->getUnsignedLongParameter());
		break;
	case 19:
		switchMap(inv->getSignedIntParameter());
		break;
	case 20:
		doWarp(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getBooleanParameter());
		break;
	case 21:
		bounceBack();
		break;
	case 22:
		sendTo((Player*) inv->getObjectParameter());
		break;
	case 23:
		notifySceneReady();
		break;
	case 24:
		addDatapadItem((SceneObject*) inv->getObjectParameter());
		break;
	case 25:
		resp->insertLong(getDatapadItem(inv->getUnsignedLongParameter())->_getORBObjectID());
		break;
	case 26:
		removeDatapadItem(inv->getUnsignedLongParameter());
		break;
	case 27:
		clearQueueAction(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 28:
		queueAction((Player*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 29:
		deleteQueueAction(inv->getUnsignedIntParameter());
		break;
	case 30:
		changePosture(inv->getSignedIntParameter());
		break;
	case 31:
		doCenterOfBeing();
		break;
	case 32:
		removeCenterOfBeing();
		break;
	case 33:
		doPeace();
		break;
	case 34:
		kill();
		break;
	case 35:
		lootCorpse();
		break;
	case 36:
		changeCloth(inv->getUnsignedLongParameter());
		break;
	case 37:
		changeWeapon(inv->getUnsignedLongParameter());
		break;
	case 38:
		setWeaponSkillMods((Weapon*) inv->getObjectParameter());
		break;
	case 39:
		createItems();
		break;
	case 40:
		loadItems();
		break;
	case 41:
		createBaseStats();
		break;
	case 42:
		saveProfessions();
		break;
	case 43:
		loadProfessions();
		break;
	case 44:
		resp->insertBoolean(trainSkillBox(inv->getAsciiParameter(_param0_trainSkillBox__string_)));
		break;
	case 45:
		surrenderSkillBox(inv->getAsciiParameter(_param0_surrenderSkillBox__string_));
		break;
	case 46:
		resetSkillBoxesIterator();
		break;
	case 47:
		resp->insertSignedInt(getSkillBoxesSize());
		break;
	case 48:
		resp->insertAscii(getNextSkillBox());
		break;
	case 49:
		resp->insertBoolean(hasNextSkillBox());
		break;
	case 50:
		addWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 51:
		removeWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 52:
		resp->insertLong(getWaypoint(inv->getUnsignedLongParameter())->_getORBObjectID());
		break;
	case 53:
		addXp(inv->getAsciiParameter(_param0_addXp__string_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 54:
		removeXp(inv->getAsciiParameter(_param0_removeXp__string_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 55:
		removeFromDuelList((Player*) inv->getObjectParameter());
		break;
	case 56:
		addToDuelList((Player*) inv->getObjectParameter());
		break;
	case 57:
		resp->insertBoolean(isInDuelWith((Player*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 58:
		resp->insertLong(getDuelListObject(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 59:
		resp->insertBoolean(requestedDuelTo((Player*) inv->getObjectParameter()));
		break;
	case 60:
		resp->insertBoolean(isDuelListEmpty());
		break;
	case 61:
		resp->insertSignedInt(getDuelListSize());
		break;
	case 62:
		resp->insertBoolean(setGuild(inv->getUnsignedIntParameter()));
		break;
	case 63:
		setGuild((Guild*) inv->getObjectParameter());
		break;
	case 64:
		resp->insertBoolean(updateGuild(inv->getUnsignedIntParameter()));
		break;
	case 65:
		updateGuild((Guild*) inv->getObjectParameter());
		break;
	case 66:
		addChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 67:
		removeChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 68:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_));
		break;
	case 69:
		sendSystemMessage(inv->getUnicodeParameter(_param0_sendSystemMessage__unicode_));
		break;
	case 70:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_string_long_), inv->getAsciiParameter(_param1_sendSystemMessage__string_string_long_), inv->getUnsignedLongParameter());
		break;
	case 71:
		info(inv->getAsciiParameter(_param0_info__string_bool_), inv->getBooleanParameter());
		break;
	case 72:
		error(inv->getAsciiParameter(_param0_error__string_));
		break;
	case 73:
		setConversatingCreature((CreatureObject*) inv->getObjectParameter());
		break;
	case 74:
		setFirstName(inv->getAsciiParameter(_param0_setFirstName__string_));
		break;
	case 75:
		setBiography(inv->getAsciiParameter(_param0_setBiography__string_));
		break;
	case 76:
		setBiography(inv->getUnicodeParameter(_param0_setBiography__unicode_));
		break;
	case 77:
		setHairData(inv->getAsciiParameter(_param0_setHairData__string_));
		break;
	case 78:
		resp->insertBoolean(changeForceBar(inv->getSignedIntParameter()));
		break;
	case 79:
		setCharacterID(inv->getUnsignedLongParameter());
		break;
	case 80:
		setStartingProfession(inv->getAsciiParameter(_param0_setStartingProfession__string_));
		break;
	case 81:
		setHairObject(inv->getAsciiParameter(_param0_setHairObject__string_));
		break;
	case 82:
		setPlayerObject((PlayerObject*) inv->getObjectParameter());
		break;
	case 83:
		setOnline();
		break;
	case 84:
		setClient((ZoneClient*) inv->getObjectParameter());
		break;
	case 85:
		setOvert();
		break;
	case 86:
		setCovert();
		break;
	case 87:
		newChangeFactionEvent(inv->getUnsignedIntParameter());
		break;
	case 88:
		setRaceFileName(inv->getAsciiParameter(_param0_setRaceFileName__string_));
		break;
	case 89:
		setStartingLocation(inv->getAsciiParameter(_param0_setStartingLocation__string_));
		break;
	case 90:
		setFactionRank(inv->getAsciiParameter(_param0_setFactionRank__string_));
		break;
	case 91:
		setItemShift(inv->getUnsignedIntParameter());
		break;
	case 92:
		toggleCharacterBit(inv->getUnsignedIntParameter());
		break;
	case 93:
		resp->insertBoolean(awardBadge(inv->getUnsignedIntParameter()));
		break;
	case 94:
		setLinkDead();
		break;
	case 95:
		setAdminLevel(inv->getSignedIntParameter());
		break;
	case 96:
		setLastTestPositionX(inv->getFloatParameter());
		break;
	case 97:
		setLastTestPositionY(inv->getFloatParameter());
		break;
	case 98:
		resp->insertLong(getPlayerObject()->_getORBObjectID());
		break;
	case 99:
		resp->insertBoolean(isLinkDead());
		break;
	case 100:
		resp->insertBoolean(isLoggingIn());
		break;
	case 101:
		resp->insertBoolean(isLoggingOut());
		break;
	case 102:
		resp->insertLong(getConversatingCreature()->_getORBObjectID());
		break;
	case 103:
		resp->insertAscii(getFirstName());
		break;
	case 104:
		resp->insertAscii(getRaceFileName());
		break;
	case 105:
		resp->insertUnicode(getBiography());
		break;
	case 106:
		resp->insertAscii(getHairData());
		break;
	case 107:
		resp->insertInt(getForcePower());
		break;
	case 108:
		resp->insertBoolean(isJedi());
		break;
	case 109:
		sendMessage((Message*) inv->getObjectParameter());
		break;
	case 110:
		sendMessage((StandaloneMessage*) inv->getObjectParameter());
		break;
	case 111:
		resp->insertLong(getCharacterID());
		break;
	case 112:
		resp->insertAscii(getStartingProfession());
		break;
	case 113:
		resp->insertSignedInt(getZoneIndex());
		break;
	case 114:
		resp->insertAscii(getHairObject());
		break;
	case 115:
		resp->insertBoolean(isOnline());
		break;
	case 116:
		resp->insertLong(getClient()->_getORBObjectID());
		break;
	case 117:
		resp->insertLong(getGroupObject()->_getORBObjectID());
		break;
	case 118:
		resp->insertAscii(getFactionRank());
		break;
	case 119:
		resp->insertInt(getRebelPoints());
		break;
	case 120:
		resp->insertInt(getImperialPoints());
		break;
	case 121:
		resp->insertSignedInt(getPvpRating());
		break;
	case 122:
		getPlayersNearYou();
		break;
	case 123:
		resp->insertSignedInt(getRegionID());
		break;
	case 124:
		resp->insertSignedInt(getCertificationListSize());
		break;
	case 125:
		resp->insertAscii(getCertification(inv->getSignedIntParameter()));
		break;
	case 126:
		resp->insertBoolean(isChangingFaction());
		break;
	case 127:
		resp->insertLong(getDatapad()->_getORBObjectID());
		break;
	case 128:
		resp->insertInt(getNewItemID());
		break;
	case 129:
		resp->insertInt(getItemShift());
		break;
	case 130:
		resp->insertFloat(getLastTestPositionX());
		break;
	case 131:
		resp->insertFloat(getLastTestPositionY());
		break;
	default:
		return NULL;
	}

	return resp;
}

Player* PlayerAdapter::create(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->create(client);
}

void PlayerAdapter::load(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->load(client);
}

void PlayerAdapter::reload(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->reload(client);
}

void PlayerAdapter::unload() {
	return ((PlayerImplementation*) impl)->unload();
}

void PlayerAdapter::disconnect(bool closeClient, bool doLock) {
	return ((PlayerImplementation*) impl)->disconnect(closeClient, doLock);
}

void PlayerAdapter::logout(bool doLock) {
	return ((PlayerImplementation*) impl)->logout(doLock);
}

void PlayerAdapter::userLogout(int msgCounter) {
	return ((PlayerImplementation*) impl)->userLogout(msgCounter);
}

void PlayerAdapter::insertToZone(Zone* zone) {
	return ((PlayerImplementation*) impl)->insertToZone(zone);
}

void PlayerAdapter::reinsertToZone(Zone* zone) {
	return ((PlayerImplementation*) impl)->reinsertToZone(zone);
}

void PlayerAdapter::lightUpdateZone() {
	return ((PlayerImplementation*) impl)->lightUpdateZone();
}

void PlayerAdapter::updateZone() {
	return ((PlayerImplementation*) impl)->updateZone();
}

void PlayerAdapter::updateZoneWithParent(unsigned long long cell) {
	return ((PlayerImplementation*) impl)->updateZoneWithParent(cell);
}

void PlayerAdapter::lightUpdateZoneWithParent(unsigned long long cell) {
	return ((PlayerImplementation*) impl)->lightUpdateZoneWithParent(cell);
}

void PlayerAdapter::switchMap(int planetid) {
	return ((PlayerImplementation*) impl)->switchMap(planetid);
}

void PlayerAdapter::doWarp(float x, float y, float z, bool doRandomize) {
	return ((PlayerImplementation*) impl)->doWarp(x, y, z, doRandomize);
}

void PlayerAdapter::bounceBack() {
	return ((PlayerImplementation*) impl)->bounceBack();
}

void PlayerAdapter::sendTo(Player* player) {
	return ((PlayerImplementation*) impl)->sendTo(player);
}

void PlayerAdapter::notifySceneReady() {
	return ((PlayerImplementation*) impl)->notifySceneReady();
}

void PlayerAdapter::addDatapadItem(SceneObject* item) {
	return ((PlayerImplementation*) impl)->addDatapadItem(item);
}

SceneObject* PlayerAdapter::getDatapadItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->getDatapadItem(oid);
}

void PlayerAdapter::removeDatapadItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->removeDatapadItem(oid);
}

void PlayerAdapter::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	return ((PlayerImplementation*) impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void PlayerAdapter::queueAction(Player* player, unsigned long long target, unsigned int actionCRC, unsigned int actionCntr) {
	return ((PlayerImplementation*) impl)->queueAction(player, target, actionCRC, actionCntr);
}

void PlayerAdapter::deleteQueueAction(unsigned int actioncntr) {
	return ((PlayerImplementation*) impl)->deleteQueueAction(actioncntr);
}

void PlayerAdapter::changePosture(int post) {
	return ((PlayerImplementation*) impl)->changePosture(post);
}

void PlayerAdapter::doCenterOfBeing() {
	return ((PlayerImplementation*) impl)->doCenterOfBeing();
}

void PlayerAdapter::removeCenterOfBeing() {
	return ((PlayerImplementation*) impl)->removeCenterOfBeing();
}

void PlayerAdapter::doPeace() {
	return ((PlayerImplementation*) impl)->doPeace();
}

void PlayerAdapter::kill() {
	return ((PlayerImplementation*) impl)->kill();
}

void PlayerAdapter::lootCorpse() {
	return ((PlayerImplementation*) impl)->lootCorpse();
}

void PlayerAdapter::changeCloth(unsigned long long itemid) {
	return ((PlayerImplementation*) impl)->changeCloth(itemid);
}

void PlayerAdapter::changeWeapon(unsigned long long itemid) {
	return ((PlayerImplementation*) impl)->changeWeapon(itemid);
}

void PlayerAdapter::setWeaponSkillMods(Weapon* weapon) {
	return ((PlayerImplementation*) impl)->setWeaponSkillMods(weapon);
}

void PlayerAdapter::createItems() {
	return ((PlayerImplementation*) impl)->createItems();
}

void PlayerAdapter::loadItems() {
	return ((PlayerImplementation*) impl)->loadItems();
}

void PlayerAdapter::createBaseStats() {
	return ((PlayerImplementation*) impl)->createBaseStats();
}

void PlayerAdapter::saveProfessions() {
	return ((PlayerImplementation*) impl)->saveProfessions();
}

void PlayerAdapter::loadProfessions() {
	return ((PlayerImplementation*) impl)->loadProfessions();
}

bool PlayerAdapter::trainSkillBox(const string& name) {
	return ((PlayerImplementation*) impl)->trainSkillBox(name);
}

void PlayerAdapter::surrenderSkillBox(const string& name) {
	return ((PlayerImplementation*) impl)->surrenderSkillBox(name);
}

void PlayerAdapter::resetSkillBoxesIterator() {
	return ((PlayerImplementation*) impl)->resetSkillBoxesIterator();
}

int PlayerAdapter::getSkillBoxesSize() {
	return ((PlayerImplementation*) impl)->getSkillBoxesSize();
}

string& PlayerAdapter::getNextSkillBox() {
	return ((PlayerImplementation*) impl)->getNextSkillBox();
}

bool PlayerAdapter::hasNextSkillBox() {
	return ((PlayerImplementation*) impl)->hasNextSkillBox();
}

void PlayerAdapter::addWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->addWaypoint(wp);
}

void PlayerAdapter::removeWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->removeWaypoint(wp);
}

WaypointObject* PlayerAdapter::getWaypoint(unsigned long long id) {
	return ((PlayerImplementation*) impl)->getWaypoint(id);
}

void PlayerAdapter::addXp(string& xpType, int xp, bool updateClient) {
	return ((PlayerImplementation*) impl)->addXp(xpType, xp, updateClient);
}

void PlayerAdapter::removeXp(string& xpType, int xp, bool updateClient) {
	return ((PlayerImplementation*) impl)->removeXp(xpType, xp, updateClient);
}

void PlayerAdapter::removeFromDuelList(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->removeFromDuelList(targetPlayer);
}

void PlayerAdapter::addToDuelList(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->addToDuelList(targetPlayer);
}

bool PlayerAdapter::isInDuelWith(Player* targetPlayer, bool doLock) {
	return ((PlayerImplementation*) impl)->isInDuelWith(targetPlayer, doLock);
}

Player* PlayerAdapter::getDuelListObject(int index) {
	return ((PlayerImplementation*) impl)->getDuelListObject(index);
}

bool PlayerAdapter::requestedDuelTo(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->requestedDuelTo(targetPlayer);
}

bool PlayerAdapter::isDuelListEmpty() {
	return ((PlayerImplementation*) impl)->isDuelListEmpty();
}

int PlayerAdapter::getDuelListSize() {
	return ((PlayerImplementation*) impl)->getDuelListSize();
}

bool PlayerAdapter::setGuild(unsigned int gid) {
	return ((PlayerImplementation*) impl)->setGuild(gid);
}

void PlayerAdapter::setGuild(Guild* gild) {
	return ((PlayerImplementation*) impl)->setGuild(gild);
}

bool PlayerAdapter::updateGuild(unsigned int gid) {
	return ((PlayerImplementation*) impl)->updateGuild(gid);
}

void PlayerAdapter::updateGuild(Guild* guild) {
	return ((PlayerImplementation*) impl)->updateGuild(guild);
}

void PlayerAdapter::addChatRoom(ChatRoom* room) {
	return ((PlayerImplementation*) impl)->addChatRoom(room);
}

void PlayerAdapter::removeChatRoom(ChatRoom* room) {
	return ((PlayerImplementation*) impl)->removeChatRoom(room);
}

void PlayerAdapter::sendSystemMessage(const string& msg) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(msg);
}

void PlayerAdapter::sendSystemMessage(unicode& msg) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(msg);
}

void PlayerAdapter::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void PlayerAdapter::info(const string& message, bool forcedLog) {
	return ((PlayerImplementation*) impl)->info(message, forcedLog);
}

void PlayerAdapter::error(const string& message) {
	return ((PlayerImplementation*) impl)->error(message);
}

void PlayerAdapter::setConversatingCreature(CreatureObject* conversator) {
	return ((PlayerImplementation*) impl)->setConversatingCreature(conversator);
}

void PlayerAdapter::setFirstName(const string& name) {
	return ((PlayerImplementation*) impl)->setFirstName(name);
}

void PlayerAdapter::setBiography(const string& bio) {
	return ((PlayerImplementation*) impl)->setBiography(bio);
}

void PlayerAdapter::setBiography(unicode& bio) {
	return ((PlayerImplementation*) impl)->setBiography(bio);
}

void PlayerAdapter::setHairData(string& hair) {
	return ((PlayerImplementation*) impl)->setHairData(hair);
}

bool PlayerAdapter::changeForceBar(int fp) {
	return ((PlayerImplementation*) impl)->changeForceBar(fp);
}

void PlayerAdapter::setCharacterID(unsigned long long id) {
	return ((PlayerImplementation*) impl)->setCharacterID(id);
}

void PlayerAdapter::setStartingProfession(const string& prof) {
	return ((PlayerImplementation*) impl)->setStartingProfession(prof);
}

void PlayerAdapter::setHairObject(const string& hair) {
	return ((PlayerImplementation*) impl)->setHairObject(hair);
}

void PlayerAdapter::setPlayerObject(PlayerObject* obj) {
	return ((PlayerImplementation*) impl)->setPlayerObject(obj);
}

void PlayerAdapter::setOnline() {
	return ((PlayerImplementation*) impl)->setOnline();
}

void PlayerAdapter::setClient(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->setClient(client);
}

void PlayerAdapter::setOvert() {
	return ((PlayerImplementation*) impl)->setOvert();
}

void PlayerAdapter::setCovert() {
	return ((PlayerImplementation*) impl)->setCovert();
}

void PlayerAdapter::newChangeFactionEvent(unsigned int faction) {
	return ((PlayerImplementation*) impl)->newChangeFactionEvent(faction);
}

void PlayerAdapter::setRaceFileName(string& name) {
	return ((PlayerImplementation*) impl)->setRaceFileName(name);
}

void PlayerAdapter::setStartingLocation(string& loc) {
	return ((PlayerImplementation*) impl)->setStartingLocation(loc);
}

void PlayerAdapter::setFactionRank(string& fac) {
	return ((PlayerImplementation*) impl)->setFactionRank(fac);
}

void PlayerAdapter::setItemShift(unsigned int shift) {
	return ((PlayerImplementation*) impl)->setItemShift(shift);
}

void PlayerAdapter::toggleCharacterBit(unsigned int bit) {
	return ((PlayerImplementation*) impl)->toggleCharacterBit(bit);
}

bool PlayerAdapter::awardBadge(unsigned int badgeindex) {
	return ((PlayerImplementation*) impl)->awardBadge(badgeindex);
}

void PlayerAdapter::setLinkDead() {
	return ((PlayerImplementation*) impl)->setLinkDead();
}

void PlayerAdapter::setAdminLevel(int level) {
	return ((PlayerImplementation*) impl)->setAdminLevel(level);
}

void PlayerAdapter::setLastTestPositionX(float pos) {
	return ((PlayerImplementation*) impl)->setLastTestPositionX(pos);
}

void PlayerAdapter::setLastTestPositionY(float pos) {
	return ((PlayerImplementation*) impl)->setLastTestPositionY(pos);
}

PlayerObject* PlayerAdapter::getPlayerObject() {
	return ((PlayerImplementation*) impl)->getPlayerObject();
}

bool PlayerAdapter::isLinkDead() {
	return ((PlayerImplementation*) impl)->isLinkDead();
}

bool PlayerAdapter::isLoggingIn() {
	return ((PlayerImplementation*) impl)->isLoggingIn();
}

bool PlayerAdapter::isLoggingOut() {
	return ((PlayerImplementation*) impl)->isLoggingOut();
}

CreatureObject* PlayerAdapter::getConversatingCreature() {
	return ((PlayerImplementation*) impl)->getConversatingCreature();
}

string& PlayerAdapter::getFirstName() {
	return ((PlayerImplementation*) impl)->getFirstName();
}

string& PlayerAdapter::getRaceFileName() {
	return ((PlayerImplementation*) impl)->getRaceFileName();
}

unicode& PlayerAdapter::getBiography() {
	return ((PlayerImplementation*) impl)->getBiography();
}

string& PlayerAdapter::getHairData() {
	return ((PlayerImplementation*) impl)->getHairData();
}

unsigned int PlayerAdapter::getForcePower() {
	return ((PlayerImplementation*) impl)->getForcePower();
}

bool PlayerAdapter::isJedi() {
	return ((PlayerImplementation*) impl)->isJedi();
}

void PlayerAdapter::sendMessage(Message* msg) {
	return ((PlayerImplementation*) impl)->sendMessage(msg);
}

void PlayerAdapter::sendMessage(StandaloneMessage* msg) {
	return ((PlayerImplementation*) impl)->sendMessage(msg);
}

unsigned long long PlayerAdapter::getCharacterID() {
	return ((PlayerImplementation*) impl)->getCharacterID();
}

string& PlayerAdapter::getStartingProfession() {
	return ((PlayerImplementation*) impl)->getStartingProfession();
}

int PlayerAdapter::getZoneIndex() {
	return ((PlayerImplementation*) impl)->getZoneIndex();
}

string& PlayerAdapter::getHairObject() {
	return ((PlayerImplementation*) impl)->getHairObject();
}

bool PlayerAdapter::isOnline() {
	return ((PlayerImplementation*) impl)->isOnline();
}

ZoneClient* PlayerAdapter::getClient() {
	return ((PlayerImplementation*) impl)->getClient();
}

GroupObject* PlayerAdapter::getGroupObject() {
	return ((PlayerImplementation*) impl)->getGroupObject();
}

string& PlayerAdapter::getFactionRank() {
	return ((PlayerImplementation*) impl)->getFactionRank();
}

unsigned int PlayerAdapter::getRebelPoints() {
	return ((PlayerImplementation*) impl)->getRebelPoints();
}

unsigned int PlayerAdapter::getImperialPoints() {
	return ((PlayerImplementation*) impl)->getImperialPoints();
}

int PlayerAdapter::getPvpRating() {
	return ((PlayerImplementation*) impl)->getPvpRating();
}

void PlayerAdapter::getPlayersNearYou() {
	return ((PlayerImplementation*) impl)->getPlayersNearYou();
}

int PlayerAdapter::getRegionID() {
	return ((PlayerImplementation*) impl)->getRegionID();
}

int PlayerAdapter::getCertificationListSize() {
	return ((PlayerImplementation*) impl)->getCertificationListSize();
}

string& PlayerAdapter::getCertification(int idx) {
	return ((PlayerImplementation*) impl)->getCertification(idx);
}

bool PlayerAdapter::isChangingFaction() {
	return ((PlayerImplementation*) impl)->isChangingFaction();
}

Datapad* PlayerAdapter::getDatapad() {
	return ((PlayerImplementation*) impl)->getDatapad();
}

unsigned int PlayerAdapter::getNewItemID() {
	return ((PlayerImplementation*) impl)->getNewItemID();
}

unsigned int PlayerAdapter::getItemShift() {
	return ((PlayerImplementation*) impl)->getItemShift();
}

float PlayerAdapter::getLastTestPositionX() {
	return ((PlayerImplementation*) impl)->getLastTestPositionX();
}

float PlayerAdapter::getLastTestPositionY() {
	return ((PlayerImplementation*) impl)->getLastTestPositionY();
}

/*
 *	PlayerHelper
 */

ORBClassHelper* PlayerHelper::instance = new PlayerHelper();

PlayerHelper::PlayerHelper() {
	className = "Player";

	ObjectRequestBroker::instance()->registerClass(className, this);
}

ORBClassHelper* PlayerHelper::getInstance() {
	if (instance == NULL)
		return instance = new PlayerHelper();
	else
		return instance;
}

ORBObject* PlayerHelper::instantiateObject() {
	return new Player();
}

ORBObjectAdapter* PlayerHelper::createAdapter(ORBObjectServant* obj) {
	ORBObjectAdapter* adapter = new PlayerAdapter((PlayerImplementation*)obj);

	ORBObjectStub* stub = new Player(obj);
	stub->_setORBClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	PlayerServant
 */

PlayerServant::PlayerServant(unsigned long long oid) : CreatureObjectImplementation(oid) {
	_classHelper = PlayerHelper::getInstance();
}

PlayerServant::~PlayerServant() {
}
void PlayerServant::_setStub(ORBObjectStub* stub) {
	_this = (Player*) stub;
	CreatureObjectServant::_setStub(stub);
}

ORBObjectStub* PlayerServant::_getStub() {
	return _this;
}

