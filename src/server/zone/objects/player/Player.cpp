/*
 *	server/zone/objects/player/Player.cpp generated by engine3 IDL compiler 0.55
 */

#include "../../ZoneClient.h"

#include "../../Zone.h"

#include "../scene/SceneObject.h"

#include "../creature/CreatureObject.h"

#include "../creature/Creature.h"

#include "../tangible/TangibleObject.h"

#include "PlayerObject.h"

#include "../tangible/weapons/Weapon.h"

#include "../tangible/wearables/Armor.h"

#include "../tangible/attachment/Attachment.h"

#include "../tangible/powerup/Powerup.h"

#include "../tangible/Datapad.h"

#include "../tangible/surveytool/SurveyTool.h"

#include "../group/GroupObject.h"

#include "../guild/Guild.h"

#include "../waypoint/WaypointObject.h"

#include "../../../chat/room/ChatRoom.h"

#include "sui/SuiBox.h"

#include "../draftschematic/DraftSchematic.h"

#include "../tangible/crafting/CraftingTool.h"

#include "../tangible/resource/ResourceContainer.h"

#include "../building/BuildingObject.h"

#include "Player.h"

#include "PlayerImplementation.h"

/*
 *	PlayerStub
 */

Player::Player() : CreatureObject(NULL) {
}

Player::Player(DistributedObjectServant* obj) : CreatureObject(obj) {
}

Player::Player(Player& ref) : CreatureObject(ref) {
}

Player::~Player() {
}

Player* Player::clone() {
	return new Player(*this);
}


Player* Player::create(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 6);
		method.addObjectParameter(client);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->create(client);
}

void Player::load(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 7);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->load(client);
}

void Player::reload(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 8);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->reload(client);
}

void Player::unload() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->unload();
}

void Player::disconnect(bool closeClient, bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 10);
		method.addBooleanParameter(closeClient);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->disconnect(closeClient, doLock);
}

void Player::logout(bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 11);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->logout(doLock);
}

void Player::userLogout(int msgCounter) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 12);
		method.addSignedIntParameter(msgCounter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->userLogout(msgCounter);
}

void Player::clearLogoutEvent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearLogoutEvent();
}

void Player::insertToZone(Zone* zone) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 14);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->insertToZone(zone);
}

void Player::reinsertToZone(Zone* zone) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 15);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->reinsertToZone(zone);
}

void Player::updateZone(bool lightUpdate) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 16);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateZone(lightUpdate);
}

void Player::updateZoneWithParent(unsigned long long cell, bool lightUpdate) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 17);
		method.addUnsignedLongParameter(cell);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateZoneWithParent(cell, lightUpdate);
}

void Player::switchMap(int planetid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 18);
		method.addSignedIntParameter(planetid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->switchMap(planetid);
}

void Player::doWarp(float x, float y, float z, float randomizeDistance, unsigned long long parentID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 19);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addFloatParameter(randomizeDistance);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doWarp(x, y, z, randomizeDistance, parentID);
}

void Player::bounceBack() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 20);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->bounceBack();
}

void Player::sendTo(Player* player) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendTo(player);
}

void Player::notifySceneReady() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->notifySceneReady();
}

void Player::addDatapadItem(SceneObject* item) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 23);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDatapadItem(item);
}

SceneObject* Player::getDatapadItem(unsigned long long oid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 24);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDatapadItem(oid);
}

void Player::removeDatapadItem(unsigned long long oid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 25);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeDatapadItem(oid);
}

SceneObject* Player::getPlayerItem(unsigned long long oid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 26);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPlayerItem(oid);
}

void Player::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 27);
		method.addUnsignedIntParameter(actioncntr);
		method.addFloatParameter(timer);
		method.addUnsignedIntParameter(tab1);
		method.addUnsignedIntParameter(tab2);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void Player::queueAction(Player* player, unsigned long long target, unsigned int actionCRC, unsigned int actionCntr, const string& actionModifier) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 28);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(target);
		method.addUnsignedIntParameter(actionCRC);
		method.addUnsignedIntParameter(actionCntr);
		method.addAsciiParameter(actionModifier);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->queueAction(player, target, actionCRC, actionCntr, actionModifier);
}

void Player::deleteQueueAction(unsigned int actioncntr) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 29);
		method.addUnsignedIntParameter(actioncntr);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->deleteQueueAction(actioncntr);
}

void Player::changePosture(int post) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 30);
		method.addSignedIntParameter(post);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changePosture(post);
}

void Player::doCenterOfBeing() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 31);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doCenterOfBeing();
}

void Player::removeCenterOfBeing() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 32);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeCenterOfBeing();
}

void Player::doPeace() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 33);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doPeace();
}

void Player::kill() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 34);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->kill();
}

void Player::lootCorpse(bool lootAll) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 35);
		method.addBooleanParameter(lootAll);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lootCorpse(lootAll);
}

void Player::lootObject(Creature* creature, SceneObject* object) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 36);
		method.addObjectParameter(creature);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lootObject(creature, object);
}

void Player::addTradeItem(TangibleObject* item) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 37);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addTradeItem(item);
}

void Player::clearTradeItems() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 38);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearTradeItems();
}

int Player::getTradeSize() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTradeSize();
}

TangibleObject* Player::getTradeItem(int idx) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 40);
		method.addSignedIntParameter(idx);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTradeItem(idx);
}

void Player::setAcceptedTrade(bool val) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 41);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setAcceptedTrade(val);
}

bool Player::hasAcceptedTrade() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasAcceptedTrade();
}

void Player::setVerifiedTrade(bool val) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 43);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setVerifiedTrade(val);
}

bool Player::hasVerifiedTrade() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 44);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasVerifiedTrade();
}

void Player::setMoneyToTrade(unsigned int value) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 45);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setMoneyToTrade(value);
}

unsigned int Player::getMoneyToTrade() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 46);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMoneyToTrade();
}

void Player::changeCloth(unsigned long long itemid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 47);
		method.addUnsignedLongParameter(itemid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeCloth(itemid);
}

void Player::changeWeapon(unsigned long long itemid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 48);
		method.addUnsignedLongParameter(itemid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeWeapon(itemid);
}

void Player::changeArmor(unsigned long long itemid, bool forced) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 49);
		method.addUnsignedLongParameter(itemid);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeArmor(itemid, forced);
}

void Player::setWeaponSkillMods(Weapon* weapon) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 50);
		method.addObjectParameter(weapon);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setWeaponSkillMods(weapon);
}

void Player::setArmorSkillMods(Armor* armor) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 51);
		method.addObjectParameter(armor);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setArmorSkillMods(armor);
}

bool Player::setArmorEncumbrance(Armor* armor, bool forced) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 52);
		method.addObjectParameter(armor);
		method.addBooleanParameter(forced);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->setArmorEncumbrance(armor, forced);
}

void Player::applyAttachment(unsigned long long attachmentID, unsigned long long targetID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 53);
		method.addUnsignedLongParameter(attachmentID);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->applyAttachment(attachmentID, targetID);
}

void Player::applyPowerup(unsigned long long powerupID, unsigned long long targetID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 54);
		method.addUnsignedLongParameter(powerupID);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->applyPowerup(powerupID, targetID);
}

void Player::createItems() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 55);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createItems();
}

void Player::loadItems() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 56);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadItems();
}

void Player::createBaseStats() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 57);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createBaseStats();
}

void Player::decayInventory() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 58);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->decayInventory();
}

void Player::addInventoryItem(TangibleObject* item) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 59);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addInventoryItem(item);
}

void Player::equipPlayerItem(TangibleObject* item) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 60);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->equipPlayerItem(item);
}

void Player::saveProfessions() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 61);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->saveProfessions();
}

void Player::loadProfessions() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 62);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadProfessions();
}

void Player::trainStartingProfession() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 63);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->trainStartingProfession();
}

bool Player::trainSkillBox(const string& name) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 64);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->trainSkillBox(name);
}

void Player::surrenderSkillBox(const string& name) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 65);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->surrenderSkillBox(name);
}

void Player::resetSkillBoxesIterator() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 66);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->resetSkillBoxesIterator();
}

int Player::getSkillBoxesSize() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 67);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSkillBoxesSize();
}

string& Player::getNextSkillBox() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 68);

		method.executeWithAsciiReturn(_return_getNextSkillBox);
		return _return_getNextSkillBox;
	} else
		return ((PlayerImplementation*) _impl)->getNextSkillBox();
}

bool Player::hasNextSkillBox() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 69);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasNextSkillBox();
}

bool Player::hasSkillBox(string& skillBox) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 70);
		method.addAsciiParameter(skillBox);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasSkillBox(skillBox);
}

void Player::addWaypoint(WaypointObject* wp) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 71);
		method.addObjectParameter(wp);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addWaypoint(wp);
}

bool Player::removeWaypoint(WaypointObject* wp) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 72);
		method.addObjectParameter(wp);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->removeWaypoint(wp);
}

WaypointObject* Player::getWaypoint(unsigned long long id) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 73);
		method.addUnsignedLongParameter(id);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getWaypoint(id);
}

void Player::updateWaypoint(WaypointObject* wp) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 74);
		method.addObjectParameter(wp);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateWaypoint(wp);
}

void Player::addXp(string& xpType, int xp, bool updateClient) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 75);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addXp(xpType, xp, updateClient);
}

void Player::removeXp(string& xpType, int xp, bool updateClient) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 76);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeXp(xpType, xp, updateClient);
}

void Player::removeFromDuelList(Player* targetPlayer) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 77);
		method.addObjectParameter(targetPlayer);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeFromDuelList(targetPlayer);
}

void Player::addToDuelList(Player* targetPlayer) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 78);
		method.addObjectParameter(targetPlayer);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addToDuelList(targetPlayer);
}

bool Player::isInDuelWith(Player* targetPlayer, bool doLock) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 79);
		method.addObjectParameter(targetPlayer);
		method.addBooleanParameter(doLock);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isInDuelWith(targetPlayer, doLock);
}

Player* Player::getDuelListObject(int index) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 80);
		method.addSignedIntParameter(index);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDuelListObject(index);
}

bool Player::requestedDuelTo(Player* targetPlayer) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 81);
		method.addObjectParameter(targetPlayer);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->requestedDuelTo(targetPlayer);
}

bool Player::isDuelListEmpty() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 82);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isDuelListEmpty();
}

int Player::getDuelListSize() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 83);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDuelListSize();
}

bool Player::setGuild(unsigned int gid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 84);
		method.addUnsignedIntParameter(gid);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->setGuild(gid);
}

void Player::setGuild(Guild* gild) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 85);
		method.addObjectParameter(gild);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setGuild(gild);
}

bool Player::updateGuild(unsigned int gid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 86);
		method.addUnsignedIntParameter(gid);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->updateGuild(gid);
}

void Player::updateGuild(Guild* guild) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 87);
		method.addObjectParameter(guild);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateGuild(guild);
}

void Player::addChatRoom(ChatRoom* room) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 88);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addChatRoom(room);
}

void Player::removeChatRoom(ChatRoom* room) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 89);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeChatRoom(room);
}

void Player::sendSystemMessage(const string& msg) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 90);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(msg);
}

void Player::sendSystemMessage(unicode& msg) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 91);
		method.addUnicodeParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(msg);
}

void Player::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 92);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addUnsignedLongParameter(targetid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void Player::setConversatingCreature(CreatureObject* conversator) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 93);
		method.addObjectParameter(conversator);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setConversatingCreature(conversator);
}

void Player::setFirstName(const string& name) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 94);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFirstName(name);
}

void Player::setLastName(const string& name) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 95);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastName(name);
}

void Player::setBiography(const string& bio) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 96);
		method.addAsciiParameter(bio);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setBiography(bio);
}

void Player::setBiography(unicode& bio) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 97);
		method.addUnicodeParameter(bio);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setBiography(bio);
}

void Player::setHairData(string& hair) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 98);
		method.addAsciiParameter(hair);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setHairData(hair);
}

bool Player::changeForceBar(int fp) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 99);
		method.addSignedIntParameter(fp);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->changeForceBar(fp);
}

void Player::setCharacterID(unsigned long long id) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 100);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCharacterID(id);
}

void Player::setStartingProfession(const string& prof) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 101);
		method.addAsciiParameter(prof);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setStartingProfession(prof);
}

void Player::setHairObject(const string& hair) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 102);
		method.addAsciiParameter(hair);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setHairObject(hair);
}

void Player::setPlayerObject(PlayerObject* obj) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 103);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setPlayerObject(obj);
}

void Player::setOnline() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 104);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOnline();
}

void Player::clearDisconnectEvent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 105);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearDisconnectEvent();
}

void Player::setClient(ZoneClient* client) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 106);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setClient(client);
}

void Player::setOvert() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 107);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOvert();
}

void Player::setCovert() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 108);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCovert();
}

void Player::newChangeFactionEvent(unsigned int faction) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 109);
		method.addUnsignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->newChangeFactionEvent(faction);
}

void Player::setRaceFileName(string& name) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 110);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setRaceFileName(name);
}

void Player::setStartingLocation(string& loc) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 111);
		method.addAsciiParameter(loc);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setStartingLocation(loc);
}

void Player::setFactionRank(string& fac) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 112);
		method.addAsciiParameter(fac);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFactionRank(fac);
}

void Player::setItemShift(unsigned int shift) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 113);
		method.addUnsignedIntParameter(shift);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setItemShift(shift);
}

void Player::toggleCharacterBit(unsigned int bit) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 114);
		method.addUnsignedIntParameter(bit);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->toggleCharacterBit(bit);
}

bool Player::awardBadge(unsigned int badgeindex) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 115);
		method.addUnsignedIntParameter(badgeindex);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->awardBadge(badgeindex);
}

void Player::setLinkDead() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 116);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLinkDead();
}

void Player::setLoggingIn() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 117);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLoggingIn();
}

void Player::setAdminLevel(int level) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 118);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setAdminLevel(level);
}

void Player::setLastTestPositionX(float pos) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 119);
		method.addFloatParameter(pos);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastTestPositionX(pos);
}

void Player::setLastTestPositionY(float pos) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 120);
		method.addFloatParameter(pos);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastTestPositionY(pos);
}

void Player::setTradeRequestedPlayer(unsigned long long ID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 121);
		method.addUnsignedLongParameter(ID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTradeRequestedPlayer(ID);
}

unsigned long long Player::getTradeRequestedPlayer() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 122);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTradeRequestedPlayer();
}

void Player::launchFirework() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 123);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->launchFirework();
}

void Player::sendMessage(BaseMessage* msg) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 124);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMessage(msg);
}

void Player::sendMessage(StandaloneBaseMessage* msg) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 125);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMessage(msg);
}

bool Player::isJedi() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 126);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isJedi();
}

bool Player::hasSuiBox(unsigned int boxID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 127);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasSuiBox(boxID);
}

void Player::removeSuiBox(unsigned int boxID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 128);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeSuiBox(boxID);
}

SuiBox* Player::getSuiBox(unsigned int boxID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 129);
		method.addUnsignedIntParameter(boxID);

		return (SuiBox*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSuiBox(boxID);
}

void Player::addSuiBox(SuiBox* sui) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 130);
		method.addObjectParameter(sui);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addSuiBox(sui);
}

unsigned int Player::getNewSuiBoxID(unsigned int type) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 131);
		method.addUnsignedIntParameter(type);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getNewSuiBoxID(type);
}

bool Player::isOnline() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 132);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOnline();
}

bool Player::isOffline() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 133);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOffline();
}

bool Player::isLinkDead() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 134);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLinkDead();
}

bool Player::isLoggingIn() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 135);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLoggingIn();
}

bool Player::isLoggingOut() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 136);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLoggingOut();
}

PlayerObject* Player::getPlayerObject() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 137);

		return (PlayerObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPlayerObject();
}

CreatureObject* Player::getConversatingCreature() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 138);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getConversatingCreature();
}

string& Player::getFirstName() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 139);

		method.executeWithAsciiReturn(_return_getFirstName);
		return _return_getFirstName;
	} else
		return ((PlayerImplementation*) _impl)->getFirstName();
}

string& Player::getLastName() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 140);

		method.executeWithAsciiReturn(_return_getLastName);
		return _return_getLastName;
	} else
		return ((PlayerImplementation*) _impl)->getLastName();
}

string& Player::getRaceFileName() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 141);

		method.executeWithAsciiReturn(_return_getRaceFileName);
		return _return_getRaceFileName;
	} else
		return ((PlayerImplementation*) _impl)->getRaceFileName();
}

unicode& Player::getBiography() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 142);

		method.executeWithUnicodeReturn(_return_getBiography);
		return _return_getBiography;
	} else
		return ((PlayerImplementation*) _impl)->getBiography();
}

string& Player::getHairData() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 143);

		method.executeWithAsciiReturn(_return_getHairData);
		return _return_getHairData;
	} else
		return ((PlayerImplementation*) _impl)->getHairData();
}

unsigned long long Player::getCharacterID() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 144);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCharacterID();
}

string& Player::getStartingProfession() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 145);

		method.executeWithAsciiReturn(_return_getStartingProfession);
		return _return_getStartingProfession;
	} else
		return ((PlayerImplementation*) _impl)->getStartingProfession();
}

int Player::getZoneIndex() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 146);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getZoneIndex();
}

string& Player::getHairObject() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 147);

		method.executeWithAsciiReturn(_return_getHairObject);
		return _return_getHairObject;
	} else
		return ((PlayerImplementation*) _impl)->getHairObject();
}

ZoneClient* Player::getClient() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 148);

		return (ZoneClient*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getClient();
}

GroupObject* Player::getGroupObject() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 149);

		return (GroupObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getGroupObject();
}

string& Player::getFactionRank() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 150);

		method.executeWithAsciiReturn(_return_getFactionRank);
		return _return_getFactionRank;
	} else
		return ((PlayerImplementation*) _impl)->getFactionRank();
}

unsigned int Player::getRebelPoints() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 151);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getRebelPoints();
}

unsigned int Player::getImperialPoints() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 152);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getImperialPoints();
}

int Player::getPvpRating() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 153);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPvpRating();
}

void Player::getPlayersNearYou() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 154);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->getPlayersNearYou();
}

int Player::getRegionID() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 155);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getRegionID();
}

int Player::getCertificationListSize() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 156);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCertificationListSize();
}

string& Player::getCertification(int idx) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 157);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getCertification);
		return _return_getCertification;
	} else
		return ((PlayerImplementation*) _impl)->getCertification(idx);
}

bool Player::checkCertification(string& certification) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 158);
		method.addAsciiParameter(certification);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->checkCertification(certification);
}

int Player::getSlicingAbility() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 159);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSlicingAbility();
}

CraftingTool* Player::getCurrentCraftingTool() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 160);

		return (CraftingTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCurrentCraftingTool();
}

void Player::setCurrentCraftingTool(CraftingTool* ct) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 161);
		method.addObjectParameter(ct);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCurrentCraftingTool(ct);
}

void Player::clearCurrentCraftingTool() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 162);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearCurrentCraftingTool();
}

void Player::prepareCraftingSession(CraftingTool* ct, DraftSchematic* ds) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 163);
		method.addObjectParameter(ct);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->prepareCraftingSession(ct, ds);
}

void Player::addResourceToCraft(ResourceContainer* rnco, int slot, int counter) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 164);
		method.addObjectParameter(rnco);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addResourceToCraft(rnco, slot, counter);
}

void Player::removeResourceFromCraft(unsigned long long resID, int slot, int counter) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 165);
		method.addUnsignedLongParameter(resID);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeResourceFromCraft(resID, slot, counter);
}

void Player::nextCraftingStage(string& test) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 166);
		method.addAsciiParameter(test);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->nextCraftingStage(test);
}

void Player::craftingCustomization(string& name, int condition) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 167);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(condition);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->craftingCustomization(name, condition);
}

void Player::createPrototype(string& test) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 168);
		method.addAsciiParameter(test);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createPrototype(test);
}

void Player::sendDraftSchematics() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 169);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendDraftSchematics();
}

void Player::addDraftSchematicsFromGroupName(const string& schematicGroupName) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 170);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDraftSchematicsFromGroupName(schematicGroupName);
}

void Player::subtractDraftSchematicsFromGroupName(const string& schematicGroupName) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 171);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->subtractDraftSchematicsFromGroupName(schematicGroupName);
}

void Player::addDraftSchematic(DraftSchematic* ds) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 172);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDraftSchematic(ds);
}

void Player::subtractDraftSchematic(DraftSchematic* ds) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 173);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->subtractDraftSchematic(ds);
}

unsigned int Player::getDraftSchematicListSize() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 174);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematicListSize();
}

unsigned int Player::getDraftSchematicUpdateCount(unsigned int count) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 175);
		method.addUnsignedIntParameter(count);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematicUpdateCount(count);
}

DraftSchematic* Player::getDraftSchematic(unsigned int schematicID) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 176);
		method.addUnsignedIntParameter(schematicID);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematic(schematicID);
}

DraftSchematic* Player::getDraftSchematic(int index) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 177);
		method.addSignedIntParameter(index);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematic(index);
}

bool Player::isChangingFaction() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 178);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isChangingFaction();
}

Datapad* Player::getDatapad() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 179);

		return (Datapad*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDatapad();
}

unsigned long long Player::getNewItemID() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 180);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getNewItemID();
}

unsigned int Player::getItemShift() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 181);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getItemShift();
}

float Player::getLastTestPositionX() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 182);

		return method.executeWithFloatReturn();
	} else
		return ((PlayerImplementation*) _impl)->getLastTestPositionX();
}

float Player::getLastTestPositionY() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 183);

		return method.executeWithFloatReturn();
	} else
		return ((PlayerImplementation*) _impl)->getLastTestPositionY();
}

unsigned int Player::getForcePower() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 184);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getForcePower();
}

SurveyTool* Player::getSurveyTool() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 185);

		return (SurveyTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSurveyTool();
}

void Player::setSurveyTool(SurveyTool* sTool) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 186);
		method.addObjectParameter(sTool);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyTool(sTool);
}

void Player::setSurveyWaypoint(WaypointObject* id) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 187);
		method.addObjectParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyWaypoint(id);
}

WaypointObject* Player::getSurveyWaypoint() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 188);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSurveyWaypoint();
}

bool Player::getCanSurvey() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 189);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCanSurvey();
}

bool Player::getCanSample() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 190);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCanSample();
}

void Player::setCanSurvey() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 191);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCanSurvey();
}

void Player::setCanSample() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 192);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCanSample();
}

void Player::setSurveyEvent(string& resourcename) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 193);
		method.addAsciiParameter(resourcename);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyEvent(resourcename);
}

void Player::setSampleEvent(string& resourcename, bool firstTime) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 194);
		method.addAsciiParameter(resourcename);
		method.addBooleanParameter(firstTime);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSampleEvent(resourcename, firstTime);
}

void Player::setCancelSample(bool val) {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 195);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCancelSample(val);
}

bool Player::getCancelSample() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 196);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCancelSample();
}

void Player::sendSampleTimeRemaining() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 197);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSampleTimeRemaining();
}

void Player::setSurveyErrorMessage() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 198);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyErrorMessage();
}

void Player::setSampleErrorMessage() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 199);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSampleErrorMessage();
}

bool Player::getSurveyErrorMessage() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 200);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSurveyErrorMessage();
}

bool Player::getSampleErrorMessage() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 201);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSampleErrorMessage();
}

bool Player::isInBuilding() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 202);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isInBuilding();
}

int Player::getBuildingType() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 203);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getBuildingType();
}

void Player::setEntertainerEvent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 204);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setEntertainerEvent();
}

void Player::clearEntertainerEvent() {
	if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		DistributedMethod method(this, 205);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearEntertainerEvent();
}

/*
 *	PlayerAdapter
 */

PlayerAdapter::PlayerAdapter(PlayerImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* PlayerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(create((ZoneClient*) inv->getObjectParameter())->_getObjectID());
		break;
	case 7:
		load((ZoneClient*) inv->getObjectParameter());
		break;
	case 8:
		reload((ZoneClient*) inv->getObjectParameter());
		break;
	case 9:
		unload();
		break;
	case 10:
		disconnect(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 11:
		logout(inv->getBooleanParameter());
		break;
	case 12:
		userLogout(inv->getSignedIntParameter());
		break;
	case 13:
		clearLogoutEvent();
		break;
	case 14:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 15:
		reinsertToZone((Zone*) inv->getObjectParameter());
		break;
	case 16:
		updateZone(inv->getBooleanParameter());
		break;
	case 17:
		updateZoneWithParent(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 18:
		switchMap(inv->getSignedIntParameter());
		break;
	case 19:
		doWarp(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 20:
		bounceBack();
		break;
	case 21:
		sendTo((Player*) inv->getObjectParameter());
		break;
	case 22:
		notifySceneReady();
		break;
	case 23:
		addDatapadItem((SceneObject*) inv->getObjectParameter());
		break;
	case 24:
		resp->insertLong(getDatapadItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 25:
		removeDatapadItem(inv->getUnsignedLongParameter());
		break;
	case 26:
		resp->insertLong(getPlayerItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 27:
		clearQueueAction(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 28:
		queueAction((Player*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param4_queueAction__Player_long_int_int_string_));
		break;
	case 29:
		deleteQueueAction(inv->getUnsignedIntParameter());
		break;
	case 30:
		changePosture(inv->getSignedIntParameter());
		break;
	case 31:
		doCenterOfBeing();
		break;
	case 32:
		removeCenterOfBeing();
		break;
	case 33:
		doPeace();
		break;
	case 34:
		kill();
		break;
	case 35:
		lootCorpse(inv->getBooleanParameter());
		break;
	case 36:
		lootObject((Creature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 37:
		addTradeItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 38:
		clearTradeItems();
		break;
	case 39:
		resp->insertSignedInt(getTradeSize());
		break;
	case 40:
		resp->insertLong(getTradeItem(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 41:
		setAcceptedTrade(inv->getBooleanParameter());
		break;
	case 42:
		resp->insertBoolean(hasAcceptedTrade());
		break;
	case 43:
		setVerifiedTrade(inv->getBooleanParameter());
		break;
	case 44:
		resp->insertBoolean(hasVerifiedTrade());
		break;
	case 45:
		setMoneyToTrade(inv->getUnsignedIntParameter());
		break;
	case 46:
		resp->insertInt(getMoneyToTrade());
		break;
	case 47:
		changeCloth(inv->getUnsignedLongParameter());
		break;
	case 48:
		changeWeapon(inv->getUnsignedLongParameter());
		break;
	case 49:
		changeArmor(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 50:
		setWeaponSkillMods((Weapon*) inv->getObjectParameter());
		break;
	case 51:
		setArmorSkillMods((Armor*) inv->getObjectParameter());
		break;
	case 52:
		resp->insertBoolean(setArmorEncumbrance((Armor*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 53:
		applyAttachment(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		break;
	case 54:
		applyPowerup(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		break;
	case 55:
		createItems();
		break;
	case 56:
		loadItems();
		break;
	case 57:
		createBaseStats();
		break;
	case 58:
		decayInventory();
		break;
	case 59:
		addInventoryItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 60:
		equipPlayerItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 61:
		saveProfessions();
		break;
	case 62:
		loadProfessions();
		break;
	case 63:
		trainStartingProfession();
		break;
	case 64:
		resp->insertBoolean(trainSkillBox(inv->getAsciiParameter(_param0_trainSkillBox__string_)));
		break;
	case 65:
		surrenderSkillBox(inv->getAsciiParameter(_param0_surrenderSkillBox__string_));
		break;
	case 66:
		resetSkillBoxesIterator();
		break;
	case 67:
		resp->insertSignedInt(getSkillBoxesSize());
		break;
	case 68:
		resp->insertAscii(getNextSkillBox());
		break;
	case 69:
		resp->insertBoolean(hasNextSkillBox());
		break;
	case 70:
		resp->insertBoolean(hasSkillBox(inv->getAsciiParameter(_param0_hasSkillBox__string_)));
		break;
	case 71:
		addWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 72:
		resp->insertBoolean(removeWaypoint((WaypointObject*) inv->getObjectParameter()));
		break;
	case 73:
		resp->insertLong(getWaypoint(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 74:
		updateWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 75:
		addXp(inv->getAsciiParameter(_param0_addXp__string_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 76:
		removeXp(inv->getAsciiParameter(_param0_removeXp__string_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 77:
		removeFromDuelList((Player*) inv->getObjectParameter());
		break;
	case 78:
		addToDuelList((Player*) inv->getObjectParameter());
		break;
	case 79:
		resp->insertBoolean(isInDuelWith((Player*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 80:
		resp->insertLong(getDuelListObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 81:
		resp->insertBoolean(requestedDuelTo((Player*) inv->getObjectParameter()));
		break;
	case 82:
		resp->insertBoolean(isDuelListEmpty());
		break;
	case 83:
		resp->insertSignedInt(getDuelListSize());
		break;
	case 84:
		resp->insertBoolean(setGuild(inv->getUnsignedIntParameter()));
		break;
	case 85:
		setGuild((Guild*) inv->getObjectParameter());
		break;
	case 86:
		resp->insertBoolean(updateGuild(inv->getUnsignedIntParameter()));
		break;
	case 87:
		updateGuild((Guild*) inv->getObjectParameter());
		break;
	case 88:
		addChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 89:
		removeChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 90:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_));
		break;
	case 91:
		sendSystemMessage(inv->getUnicodeParameter(_param0_sendSystemMessage__unicode_));
		break;
	case 92:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__string_string_long_), inv->getAsciiParameter(_param1_sendSystemMessage__string_string_long_), inv->getUnsignedLongParameter());
		break;
	case 93:
		setConversatingCreature((CreatureObject*) inv->getObjectParameter());
		break;
	case 94:
		setFirstName(inv->getAsciiParameter(_param0_setFirstName__string_));
		break;
	case 95:
		setLastName(inv->getAsciiParameter(_param0_setLastName__string_));
		break;
	case 96:
		setBiography(inv->getAsciiParameter(_param0_setBiography__string_));
		break;
	case 97:
		setBiography(inv->getUnicodeParameter(_param0_setBiography__unicode_));
		break;
	case 98:
		setHairData(inv->getAsciiParameter(_param0_setHairData__string_));
		break;
	case 99:
		resp->insertBoolean(changeForceBar(inv->getSignedIntParameter()));
		break;
	case 100:
		setCharacterID(inv->getUnsignedLongParameter());
		break;
	case 101:
		setStartingProfession(inv->getAsciiParameter(_param0_setStartingProfession__string_));
		break;
	case 102:
		setHairObject(inv->getAsciiParameter(_param0_setHairObject__string_));
		break;
	case 103:
		setPlayerObject((PlayerObject*) inv->getObjectParameter());
		break;
	case 104:
		setOnline();
		break;
	case 105:
		clearDisconnectEvent();
		break;
	case 106:
		setClient((ZoneClient*) inv->getObjectParameter());
		break;
	case 107:
		setOvert();
		break;
	case 108:
		setCovert();
		break;
	case 109:
		newChangeFactionEvent(inv->getUnsignedIntParameter());
		break;
	case 110:
		setRaceFileName(inv->getAsciiParameter(_param0_setRaceFileName__string_));
		break;
	case 111:
		setStartingLocation(inv->getAsciiParameter(_param0_setStartingLocation__string_));
		break;
	case 112:
		setFactionRank(inv->getAsciiParameter(_param0_setFactionRank__string_));
		break;
	case 113:
		setItemShift(inv->getUnsignedIntParameter());
		break;
	case 114:
		toggleCharacterBit(inv->getUnsignedIntParameter());
		break;
	case 115:
		resp->insertBoolean(awardBadge(inv->getUnsignedIntParameter()));
		break;
	case 116:
		setLinkDead();
		break;
	case 117:
		setLoggingIn();
		break;
	case 118:
		setAdminLevel(inv->getSignedIntParameter());
		break;
	case 119:
		setLastTestPositionX(inv->getFloatParameter());
		break;
	case 120:
		setLastTestPositionY(inv->getFloatParameter());
		break;
	case 121:
		setTradeRequestedPlayer(inv->getUnsignedLongParameter());
		break;
	case 122:
		resp->insertLong(getTradeRequestedPlayer());
		break;
	case 123:
		launchFirework();
		break;
	case 124:
		sendMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 125:
		sendMessage((StandaloneBaseMessage*) inv->getObjectParameter());
		break;
	case 126:
		resp->insertBoolean(isJedi());
		break;
	case 127:
		resp->insertBoolean(hasSuiBox(inv->getUnsignedIntParameter()));
		break;
	case 128:
		removeSuiBox(inv->getUnsignedIntParameter());
		break;
	case 129:
		resp->insertLong(getSuiBox(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 130:
		addSuiBox((SuiBox*) inv->getObjectParameter());
		break;
	case 131:
		resp->insertInt(getNewSuiBoxID(inv->getUnsignedIntParameter()));
		break;
	case 132:
		resp->insertBoolean(isOnline());
		break;
	case 133:
		resp->insertBoolean(isOffline());
		break;
	case 134:
		resp->insertBoolean(isLinkDead());
		break;
	case 135:
		resp->insertBoolean(isLoggingIn());
		break;
	case 136:
		resp->insertBoolean(isLoggingOut());
		break;
	case 137:
		resp->insertLong(getPlayerObject()->_getObjectID());
		break;
	case 138:
		resp->insertLong(getConversatingCreature()->_getObjectID());
		break;
	case 139:
		resp->insertAscii(getFirstName());
		break;
	case 140:
		resp->insertAscii(getLastName());
		break;
	case 141:
		resp->insertAscii(getRaceFileName());
		break;
	case 142:
		resp->insertUnicode(getBiography());
		break;
	case 143:
		resp->insertAscii(getHairData());
		break;
	case 144:
		resp->insertLong(getCharacterID());
		break;
	case 145:
		resp->insertAscii(getStartingProfession());
		break;
	case 146:
		resp->insertSignedInt(getZoneIndex());
		break;
	case 147:
		resp->insertAscii(getHairObject());
		break;
	case 148:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 149:
		resp->insertLong(getGroupObject()->_getObjectID());
		break;
	case 150:
		resp->insertAscii(getFactionRank());
		break;
	case 151:
		resp->insertInt(getRebelPoints());
		break;
	case 152:
		resp->insertInt(getImperialPoints());
		break;
	case 153:
		resp->insertSignedInt(getPvpRating());
		break;
	case 154:
		getPlayersNearYou();
		break;
	case 155:
		resp->insertSignedInt(getRegionID());
		break;
	case 156:
		resp->insertSignedInt(getCertificationListSize());
		break;
	case 157:
		resp->insertAscii(getCertification(inv->getSignedIntParameter()));
		break;
	case 158:
		resp->insertBoolean(checkCertification(inv->getAsciiParameter(_param0_checkCertification__string_)));
		break;
	case 159:
		resp->insertSignedInt(getSlicingAbility());
		break;
	case 160:
		resp->insertLong(getCurrentCraftingTool()->_getObjectID());
		break;
	case 161:
		setCurrentCraftingTool((CraftingTool*) inv->getObjectParameter());
		break;
	case 162:
		clearCurrentCraftingTool();
		break;
	case 163:
		prepareCraftingSession((CraftingTool*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter());
		break;
	case 164:
		addResourceToCraft((ResourceContainer*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 165:
		removeResourceFromCraft(inv->getUnsignedLongParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 166:
		nextCraftingStage(inv->getAsciiParameter(_param0_nextCraftingStage__string_));
		break;
	case 167:
		craftingCustomization(inv->getAsciiParameter(_param0_craftingCustomization__string_int_), inv->getSignedIntParameter());
		break;
	case 168:
		createPrototype(inv->getAsciiParameter(_param0_createPrototype__string_));
		break;
	case 169:
		sendDraftSchematics();
		break;
	case 170:
		addDraftSchematicsFromGroupName(inv->getAsciiParameter(_param0_addDraftSchematicsFromGroupName__string_));
		break;
	case 171:
		subtractDraftSchematicsFromGroupName(inv->getAsciiParameter(_param0_subtractDraftSchematicsFromGroupName__string_));
		break;
	case 172:
		addDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 173:
		subtractDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 174:
		resp->insertInt(getDraftSchematicListSize());
		break;
	case 175:
		resp->insertInt(getDraftSchematicUpdateCount(inv->getUnsignedIntParameter()));
		break;
	case 176:
		resp->insertLong(getDraftSchematic(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 177:
		resp->insertLong(getDraftSchematic(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 178:
		resp->insertBoolean(isChangingFaction());
		break;
	case 179:
		resp->insertLong(getDatapad()->_getObjectID());
		break;
	case 180:
		resp->insertLong(getNewItemID());
		break;
	case 181:
		resp->insertInt(getItemShift());
		break;
	case 182:
		resp->insertFloat(getLastTestPositionX());
		break;
	case 183:
		resp->insertFloat(getLastTestPositionY());
		break;
	case 184:
		resp->insertInt(getForcePower());
		break;
	case 185:
		resp->insertLong(getSurveyTool()->_getObjectID());
		break;
	case 186:
		setSurveyTool((SurveyTool*) inv->getObjectParameter());
		break;
	case 187:
		setSurveyWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 188:
		resp->insertLong(getSurveyWaypoint()->_getObjectID());
		break;
	case 189:
		resp->insertBoolean(getCanSurvey());
		break;
	case 190:
		resp->insertBoolean(getCanSample());
		break;
	case 191:
		setCanSurvey();
		break;
	case 192:
		setCanSample();
		break;
	case 193:
		setSurveyEvent(inv->getAsciiParameter(_param0_setSurveyEvent__string_));
		break;
	case 194:
		setSampleEvent(inv->getAsciiParameter(_param0_setSampleEvent__string_bool_), inv->getBooleanParameter());
		break;
	case 195:
		setCancelSample(inv->getBooleanParameter());
		break;
	case 196:
		resp->insertBoolean(getCancelSample());
		break;
	case 197:
		sendSampleTimeRemaining();
		break;
	case 198:
		setSurveyErrorMessage();
		break;
	case 199:
		setSampleErrorMessage();
		break;
	case 200:
		resp->insertBoolean(getSurveyErrorMessage());
		break;
	case 201:
		resp->insertBoolean(getSampleErrorMessage());
		break;
	case 202:
		resp->insertBoolean(isInBuilding());
		break;
	case 203:
		resp->insertSignedInt(getBuildingType());
		break;
	case 204:
		setEntertainerEvent();
		break;
	case 205:
		clearEntertainerEvent();
		break;
	default:
		return NULL;
	}

	return resp;
}

Player* PlayerAdapter::create(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->create(client);
}

void PlayerAdapter::load(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->load(client);
}

void PlayerAdapter::reload(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->reload(client);
}

void PlayerAdapter::unload() {
	return ((PlayerImplementation*) impl)->unload();
}

void PlayerAdapter::disconnect(bool closeClient, bool doLock) {
	return ((PlayerImplementation*) impl)->disconnect(closeClient, doLock);
}

void PlayerAdapter::logout(bool doLock) {
	return ((PlayerImplementation*) impl)->logout(doLock);
}

void PlayerAdapter::userLogout(int msgCounter) {
	return ((PlayerImplementation*) impl)->userLogout(msgCounter);
}

void PlayerAdapter::clearLogoutEvent() {
	return ((PlayerImplementation*) impl)->clearLogoutEvent();
}

void PlayerAdapter::insertToZone(Zone* zone) {
	return ((PlayerImplementation*) impl)->insertToZone(zone);
}

void PlayerAdapter::reinsertToZone(Zone* zone) {
	return ((PlayerImplementation*) impl)->reinsertToZone(zone);
}

void PlayerAdapter::updateZone(bool lightUpdate) {
	return ((PlayerImplementation*) impl)->updateZone(lightUpdate);
}

void PlayerAdapter::updateZoneWithParent(unsigned long long cell, bool lightUpdate) {
	return ((PlayerImplementation*) impl)->updateZoneWithParent(cell, lightUpdate);
}

void PlayerAdapter::switchMap(int planetid) {
	return ((PlayerImplementation*) impl)->switchMap(planetid);
}

void PlayerAdapter::doWarp(float x, float y, float z, float randomizeDistance, unsigned long long parentID) {
	return ((PlayerImplementation*) impl)->doWarp(x, y, z, randomizeDistance, parentID);
}

void PlayerAdapter::bounceBack() {
	return ((PlayerImplementation*) impl)->bounceBack();
}

void PlayerAdapter::sendTo(Player* player) {
	return ((PlayerImplementation*) impl)->sendTo(player);
}

void PlayerAdapter::notifySceneReady() {
	return ((PlayerImplementation*) impl)->notifySceneReady();
}

void PlayerAdapter::addDatapadItem(SceneObject* item) {
	return ((PlayerImplementation*) impl)->addDatapadItem(item);
}

SceneObject* PlayerAdapter::getDatapadItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->getDatapadItem(oid);
}

void PlayerAdapter::removeDatapadItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->removeDatapadItem(oid);
}

SceneObject* PlayerAdapter::getPlayerItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->getPlayerItem(oid);
}

void PlayerAdapter::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	return ((PlayerImplementation*) impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void PlayerAdapter::queueAction(Player* player, unsigned long long target, unsigned int actionCRC, unsigned int actionCntr, const string& actionModifier) {
	return ((PlayerImplementation*) impl)->queueAction(player, target, actionCRC, actionCntr, actionModifier);
}

void PlayerAdapter::deleteQueueAction(unsigned int actioncntr) {
	return ((PlayerImplementation*) impl)->deleteQueueAction(actioncntr);
}

void PlayerAdapter::changePosture(int post) {
	return ((PlayerImplementation*) impl)->changePosture(post);
}

void PlayerAdapter::doCenterOfBeing() {
	return ((PlayerImplementation*) impl)->doCenterOfBeing();
}

void PlayerAdapter::removeCenterOfBeing() {
	return ((PlayerImplementation*) impl)->removeCenterOfBeing();
}

void PlayerAdapter::doPeace() {
	return ((PlayerImplementation*) impl)->doPeace();
}

void PlayerAdapter::kill() {
	return ((PlayerImplementation*) impl)->kill();
}

void PlayerAdapter::lootCorpse(bool lootAll) {
	return ((PlayerImplementation*) impl)->lootCorpse(lootAll);
}

void PlayerAdapter::lootObject(Creature* creature, SceneObject* object) {
	return ((PlayerImplementation*) impl)->lootObject(creature, object);
}

void PlayerAdapter::addTradeItem(TangibleObject* item) {
	return ((PlayerImplementation*) impl)->addTradeItem(item);
}

void PlayerAdapter::clearTradeItems() {
	return ((PlayerImplementation*) impl)->clearTradeItems();
}

int PlayerAdapter::getTradeSize() {
	return ((PlayerImplementation*) impl)->getTradeSize();
}

TangibleObject* PlayerAdapter::getTradeItem(int idx) {
	return ((PlayerImplementation*) impl)->getTradeItem(idx);
}

void PlayerAdapter::setAcceptedTrade(bool val) {
	return ((PlayerImplementation*) impl)->setAcceptedTrade(val);
}

bool PlayerAdapter::hasAcceptedTrade() {
	return ((PlayerImplementation*) impl)->hasAcceptedTrade();
}

void PlayerAdapter::setVerifiedTrade(bool val) {
	return ((PlayerImplementation*) impl)->setVerifiedTrade(val);
}

bool PlayerAdapter::hasVerifiedTrade() {
	return ((PlayerImplementation*) impl)->hasVerifiedTrade();
}

void PlayerAdapter::setMoneyToTrade(unsigned int value) {
	return ((PlayerImplementation*) impl)->setMoneyToTrade(value);
}

unsigned int PlayerAdapter::getMoneyToTrade() {
	return ((PlayerImplementation*) impl)->getMoneyToTrade();
}

void PlayerAdapter::changeCloth(unsigned long long itemid) {
	return ((PlayerImplementation*) impl)->changeCloth(itemid);
}

void PlayerAdapter::changeWeapon(unsigned long long itemid) {
	return ((PlayerImplementation*) impl)->changeWeapon(itemid);
}

void PlayerAdapter::changeArmor(unsigned long long itemid, bool forced) {
	return ((PlayerImplementation*) impl)->changeArmor(itemid, forced);
}

void PlayerAdapter::setWeaponSkillMods(Weapon* weapon) {
	return ((PlayerImplementation*) impl)->setWeaponSkillMods(weapon);
}

void PlayerAdapter::setArmorSkillMods(Armor* armor) {
	return ((PlayerImplementation*) impl)->setArmorSkillMods(armor);
}

bool PlayerAdapter::setArmorEncumbrance(Armor* armor, bool forced) {
	return ((PlayerImplementation*) impl)->setArmorEncumbrance(armor, forced);
}

void PlayerAdapter::applyAttachment(unsigned long long attachmentID, unsigned long long targetID) {
	return ((PlayerImplementation*) impl)->applyAttachment(attachmentID, targetID);
}

void PlayerAdapter::applyPowerup(unsigned long long powerupID, unsigned long long targetID) {
	return ((PlayerImplementation*) impl)->applyPowerup(powerupID, targetID);
}

void PlayerAdapter::createItems() {
	return ((PlayerImplementation*) impl)->createItems();
}

void PlayerAdapter::loadItems() {
	return ((PlayerImplementation*) impl)->loadItems();
}

void PlayerAdapter::createBaseStats() {
	return ((PlayerImplementation*) impl)->createBaseStats();
}

void PlayerAdapter::decayInventory() {
	return ((PlayerImplementation*) impl)->decayInventory();
}

void PlayerAdapter::addInventoryItem(TangibleObject* item) {
	return ((PlayerImplementation*) impl)->addInventoryItem(item);
}

void PlayerAdapter::equipPlayerItem(TangibleObject* item) {
	return ((PlayerImplementation*) impl)->equipPlayerItem(item);
}

void PlayerAdapter::saveProfessions() {
	return ((PlayerImplementation*) impl)->saveProfessions();
}

void PlayerAdapter::loadProfessions() {
	return ((PlayerImplementation*) impl)->loadProfessions();
}

void PlayerAdapter::trainStartingProfession() {
	return ((PlayerImplementation*) impl)->trainStartingProfession();
}

bool PlayerAdapter::trainSkillBox(const string& name) {
	return ((PlayerImplementation*) impl)->trainSkillBox(name);
}

void PlayerAdapter::surrenderSkillBox(const string& name) {
	return ((PlayerImplementation*) impl)->surrenderSkillBox(name);
}

void PlayerAdapter::resetSkillBoxesIterator() {
	return ((PlayerImplementation*) impl)->resetSkillBoxesIterator();
}

int PlayerAdapter::getSkillBoxesSize() {
	return ((PlayerImplementation*) impl)->getSkillBoxesSize();
}

string& PlayerAdapter::getNextSkillBox() {
	return ((PlayerImplementation*) impl)->getNextSkillBox();
}

bool PlayerAdapter::hasNextSkillBox() {
	return ((PlayerImplementation*) impl)->hasNextSkillBox();
}

bool PlayerAdapter::hasSkillBox(string& skillBox) {
	return ((PlayerImplementation*) impl)->hasSkillBox(skillBox);
}

void PlayerAdapter::addWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->addWaypoint(wp);
}

bool PlayerAdapter::removeWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->removeWaypoint(wp);
}

WaypointObject* PlayerAdapter::getWaypoint(unsigned long long id) {
	return ((PlayerImplementation*) impl)->getWaypoint(id);
}

void PlayerAdapter::updateWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->updateWaypoint(wp);
}

void PlayerAdapter::addXp(string& xpType, int xp, bool updateClient) {
	return ((PlayerImplementation*) impl)->addXp(xpType, xp, updateClient);
}

void PlayerAdapter::removeXp(string& xpType, int xp, bool updateClient) {
	return ((PlayerImplementation*) impl)->removeXp(xpType, xp, updateClient);
}

void PlayerAdapter::removeFromDuelList(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->removeFromDuelList(targetPlayer);
}

void PlayerAdapter::addToDuelList(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->addToDuelList(targetPlayer);
}

bool PlayerAdapter::isInDuelWith(Player* targetPlayer, bool doLock) {
	return ((PlayerImplementation*) impl)->isInDuelWith(targetPlayer, doLock);
}

Player* PlayerAdapter::getDuelListObject(int index) {
	return ((PlayerImplementation*) impl)->getDuelListObject(index);
}

bool PlayerAdapter::requestedDuelTo(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->requestedDuelTo(targetPlayer);
}

bool PlayerAdapter::isDuelListEmpty() {
	return ((PlayerImplementation*) impl)->isDuelListEmpty();
}

int PlayerAdapter::getDuelListSize() {
	return ((PlayerImplementation*) impl)->getDuelListSize();
}

bool PlayerAdapter::setGuild(unsigned int gid) {
	return ((PlayerImplementation*) impl)->setGuild(gid);
}

void PlayerAdapter::setGuild(Guild* gild) {
	return ((PlayerImplementation*) impl)->setGuild(gild);
}

bool PlayerAdapter::updateGuild(unsigned int gid) {
	return ((PlayerImplementation*) impl)->updateGuild(gid);
}

void PlayerAdapter::updateGuild(Guild* guild) {
	return ((PlayerImplementation*) impl)->updateGuild(guild);
}

void PlayerAdapter::addChatRoom(ChatRoom* room) {
	return ((PlayerImplementation*) impl)->addChatRoom(room);
}

void PlayerAdapter::removeChatRoom(ChatRoom* room) {
	return ((PlayerImplementation*) impl)->removeChatRoom(room);
}

void PlayerAdapter::sendSystemMessage(const string& msg) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(msg);
}

void PlayerAdapter::sendSystemMessage(unicode& msg) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(msg);
}

void PlayerAdapter::sendSystemMessage(const string& file, const string& str, unsigned long long targetid) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void PlayerAdapter::setConversatingCreature(CreatureObject* conversator) {
	return ((PlayerImplementation*) impl)->setConversatingCreature(conversator);
}

void PlayerAdapter::setFirstName(const string& name) {
	return ((PlayerImplementation*) impl)->setFirstName(name);
}

void PlayerAdapter::setLastName(const string& name) {
	return ((PlayerImplementation*) impl)->setLastName(name);
}

void PlayerAdapter::setBiography(const string& bio) {
	return ((PlayerImplementation*) impl)->setBiography(bio);
}

void PlayerAdapter::setBiography(unicode& bio) {
	return ((PlayerImplementation*) impl)->setBiography(bio);
}

void PlayerAdapter::setHairData(string& hair) {
	return ((PlayerImplementation*) impl)->setHairData(hair);
}

bool PlayerAdapter::changeForceBar(int fp) {
	return ((PlayerImplementation*) impl)->changeForceBar(fp);
}

void PlayerAdapter::setCharacterID(unsigned long long id) {
	return ((PlayerImplementation*) impl)->setCharacterID(id);
}

void PlayerAdapter::setStartingProfession(const string& prof) {
	return ((PlayerImplementation*) impl)->setStartingProfession(prof);
}

void PlayerAdapter::setHairObject(const string& hair) {
	return ((PlayerImplementation*) impl)->setHairObject(hair);
}

void PlayerAdapter::setPlayerObject(PlayerObject* obj) {
	return ((PlayerImplementation*) impl)->setPlayerObject(obj);
}

void PlayerAdapter::setOnline() {
	return ((PlayerImplementation*) impl)->setOnline();
}

void PlayerAdapter::clearDisconnectEvent() {
	return ((PlayerImplementation*) impl)->clearDisconnectEvent();
}

void PlayerAdapter::setClient(ZoneClient* client) {
	return ((PlayerImplementation*) impl)->setClient(client);
}

void PlayerAdapter::setOvert() {
	return ((PlayerImplementation*) impl)->setOvert();
}

void PlayerAdapter::setCovert() {
	return ((PlayerImplementation*) impl)->setCovert();
}

void PlayerAdapter::newChangeFactionEvent(unsigned int faction) {
	return ((PlayerImplementation*) impl)->newChangeFactionEvent(faction);
}

void PlayerAdapter::setRaceFileName(string& name) {
	return ((PlayerImplementation*) impl)->setRaceFileName(name);
}

void PlayerAdapter::setStartingLocation(string& loc) {
	return ((PlayerImplementation*) impl)->setStartingLocation(loc);
}

void PlayerAdapter::setFactionRank(string& fac) {
	return ((PlayerImplementation*) impl)->setFactionRank(fac);
}

void PlayerAdapter::setItemShift(unsigned int shift) {
	return ((PlayerImplementation*) impl)->setItemShift(shift);
}

void PlayerAdapter::toggleCharacterBit(unsigned int bit) {
	return ((PlayerImplementation*) impl)->toggleCharacterBit(bit);
}

bool PlayerAdapter::awardBadge(unsigned int badgeindex) {
	return ((PlayerImplementation*) impl)->awardBadge(badgeindex);
}

void PlayerAdapter::setLinkDead() {
	return ((PlayerImplementation*) impl)->setLinkDead();
}

void PlayerAdapter::setLoggingIn() {
	return ((PlayerImplementation*) impl)->setLoggingIn();
}

void PlayerAdapter::setAdminLevel(int level) {
	return ((PlayerImplementation*) impl)->setAdminLevel(level);
}

void PlayerAdapter::setLastTestPositionX(float pos) {
	return ((PlayerImplementation*) impl)->setLastTestPositionX(pos);
}

void PlayerAdapter::setLastTestPositionY(float pos) {
	return ((PlayerImplementation*) impl)->setLastTestPositionY(pos);
}

void PlayerAdapter::setTradeRequestedPlayer(unsigned long long ID) {
	return ((PlayerImplementation*) impl)->setTradeRequestedPlayer(ID);
}

unsigned long long PlayerAdapter::getTradeRequestedPlayer() {
	return ((PlayerImplementation*) impl)->getTradeRequestedPlayer();
}

void PlayerAdapter::launchFirework() {
	return ((PlayerImplementation*) impl)->launchFirework();
}

void PlayerAdapter::sendMessage(BaseMessage* msg) {
	return ((PlayerImplementation*) impl)->sendMessage(msg);
}

void PlayerAdapter::sendMessage(StandaloneBaseMessage* msg) {
	return ((PlayerImplementation*) impl)->sendMessage(msg);
}

bool PlayerAdapter::isJedi() {
	return ((PlayerImplementation*) impl)->isJedi();
}

bool PlayerAdapter::hasSuiBox(unsigned int boxID) {
	return ((PlayerImplementation*) impl)->hasSuiBox(boxID);
}

void PlayerAdapter::removeSuiBox(unsigned int boxID) {
	return ((PlayerImplementation*) impl)->removeSuiBox(boxID);
}

SuiBox* PlayerAdapter::getSuiBox(unsigned int boxID) {
	return ((PlayerImplementation*) impl)->getSuiBox(boxID);
}

void PlayerAdapter::addSuiBox(SuiBox* sui) {
	return ((PlayerImplementation*) impl)->addSuiBox(sui);
}

unsigned int PlayerAdapter::getNewSuiBoxID(unsigned int type) {
	return ((PlayerImplementation*) impl)->getNewSuiBoxID(type);
}

bool PlayerAdapter::isOnline() {
	return ((PlayerImplementation*) impl)->isOnline();
}

bool PlayerAdapter::isOffline() {
	return ((PlayerImplementation*) impl)->isOffline();
}

bool PlayerAdapter::isLinkDead() {
	return ((PlayerImplementation*) impl)->isLinkDead();
}

bool PlayerAdapter::isLoggingIn() {
	return ((PlayerImplementation*) impl)->isLoggingIn();
}

bool PlayerAdapter::isLoggingOut() {
	return ((PlayerImplementation*) impl)->isLoggingOut();
}

PlayerObject* PlayerAdapter::getPlayerObject() {
	return ((PlayerImplementation*) impl)->getPlayerObject();
}

CreatureObject* PlayerAdapter::getConversatingCreature() {
	return ((PlayerImplementation*) impl)->getConversatingCreature();
}

string& PlayerAdapter::getFirstName() {
	return ((PlayerImplementation*) impl)->getFirstName();
}

string& PlayerAdapter::getLastName() {
	return ((PlayerImplementation*) impl)->getLastName();
}

string& PlayerAdapter::getRaceFileName() {
	return ((PlayerImplementation*) impl)->getRaceFileName();
}

unicode& PlayerAdapter::getBiography() {
	return ((PlayerImplementation*) impl)->getBiography();
}

string& PlayerAdapter::getHairData() {
	return ((PlayerImplementation*) impl)->getHairData();
}

unsigned long long PlayerAdapter::getCharacterID() {
	return ((PlayerImplementation*) impl)->getCharacterID();
}

string& PlayerAdapter::getStartingProfession() {
	return ((PlayerImplementation*) impl)->getStartingProfession();
}

int PlayerAdapter::getZoneIndex() {
	return ((PlayerImplementation*) impl)->getZoneIndex();
}

string& PlayerAdapter::getHairObject() {
	return ((PlayerImplementation*) impl)->getHairObject();
}

ZoneClient* PlayerAdapter::getClient() {
	return ((PlayerImplementation*) impl)->getClient();
}

GroupObject* PlayerAdapter::getGroupObject() {
	return ((PlayerImplementation*) impl)->getGroupObject();
}

string& PlayerAdapter::getFactionRank() {
	return ((PlayerImplementation*) impl)->getFactionRank();
}

unsigned int PlayerAdapter::getRebelPoints() {
	return ((PlayerImplementation*) impl)->getRebelPoints();
}

unsigned int PlayerAdapter::getImperialPoints() {
	return ((PlayerImplementation*) impl)->getImperialPoints();
}

int PlayerAdapter::getPvpRating() {
	return ((PlayerImplementation*) impl)->getPvpRating();
}

void PlayerAdapter::getPlayersNearYou() {
	return ((PlayerImplementation*) impl)->getPlayersNearYou();
}

int PlayerAdapter::getRegionID() {
	return ((PlayerImplementation*) impl)->getRegionID();
}

int PlayerAdapter::getCertificationListSize() {
	return ((PlayerImplementation*) impl)->getCertificationListSize();
}

string& PlayerAdapter::getCertification(int idx) {
	return ((PlayerImplementation*) impl)->getCertification(idx);
}

bool PlayerAdapter::checkCertification(string& certification) {
	return ((PlayerImplementation*) impl)->checkCertification(certification);
}

int PlayerAdapter::getSlicingAbility() {
	return ((PlayerImplementation*) impl)->getSlicingAbility();
}

CraftingTool* PlayerAdapter::getCurrentCraftingTool() {
	return ((PlayerImplementation*) impl)->getCurrentCraftingTool();
}

void PlayerAdapter::setCurrentCraftingTool(CraftingTool* ct) {
	return ((PlayerImplementation*) impl)->setCurrentCraftingTool(ct);
}

void PlayerAdapter::clearCurrentCraftingTool() {
	return ((PlayerImplementation*) impl)->clearCurrentCraftingTool();
}

void PlayerAdapter::prepareCraftingSession(CraftingTool* ct, DraftSchematic* ds) {
	return ((PlayerImplementation*) impl)->prepareCraftingSession(ct, ds);
}

void PlayerAdapter::addResourceToCraft(ResourceContainer* rnco, int slot, int counter) {
	return ((PlayerImplementation*) impl)->addResourceToCraft(rnco, slot, counter);
}

void PlayerAdapter::removeResourceFromCraft(unsigned long long resID, int slot, int counter) {
	return ((PlayerImplementation*) impl)->removeResourceFromCraft(resID, slot, counter);
}

void PlayerAdapter::nextCraftingStage(string& test) {
	return ((PlayerImplementation*) impl)->nextCraftingStage(test);
}

void PlayerAdapter::craftingCustomization(string& name, int condition) {
	return ((PlayerImplementation*) impl)->craftingCustomization(name, condition);
}

void PlayerAdapter::createPrototype(string& test) {
	return ((PlayerImplementation*) impl)->createPrototype(test);
}

void PlayerAdapter::sendDraftSchematics() {
	return ((PlayerImplementation*) impl)->sendDraftSchematics();
}

void PlayerAdapter::addDraftSchematicsFromGroupName(const string& schematicGroupName) {
	return ((PlayerImplementation*) impl)->addDraftSchematicsFromGroupName(schematicGroupName);
}

void PlayerAdapter::subtractDraftSchematicsFromGroupName(const string& schematicGroupName) {
	return ((PlayerImplementation*) impl)->subtractDraftSchematicsFromGroupName(schematicGroupName);
}

void PlayerAdapter::addDraftSchematic(DraftSchematic* ds) {
	return ((PlayerImplementation*) impl)->addDraftSchematic(ds);
}

void PlayerAdapter::subtractDraftSchematic(DraftSchematic* ds) {
	return ((PlayerImplementation*) impl)->subtractDraftSchematic(ds);
}

unsigned int PlayerAdapter::getDraftSchematicListSize() {
	return ((PlayerImplementation*) impl)->getDraftSchematicListSize();
}

unsigned int PlayerAdapter::getDraftSchematicUpdateCount(unsigned int count) {
	return ((PlayerImplementation*) impl)->getDraftSchematicUpdateCount(count);
}

DraftSchematic* PlayerAdapter::getDraftSchematic(unsigned int schematicID) {
	return ((PlayerImplementation*) impl)->getDraftSchematic(schematicID);
}

DraftSchematic* PlayerAdapter::getDraftSchematic(int index) {
	return ((PlayerImplementation*) impl)->getDraftSchematic(index);
}

bool PlayerAdapter::isChangingFaction() {
	return ((PlayerImplementation*) impl)->isChangingFaction();
}

Datapad* PlayerAdapter::getDatapad() {
	return ((PlayerImplementation*) impl)->getDatapad();
}

unsigned long long PlayerAdapter::getNewItemID() {
	return ((PlayerImplementation*) impl)->getNewItemID();
}

unsigned int PlayerAdapter::getItemShift() {
	return ((PlayerImplementation*) impl)->getItemShift();
}

float PlayerAdapter::getLastTestPositionX() {
	return ((PlayerImplementation*) impl)->getLastTestPositionX();
}

float PlayerAdapter::getLastTestPositionY() {
	return ((PlayerImplementation*) impl)->getLastTestPositionY();
}

unsigned int PlayerAdapter::getForcePower() {
	return ((PlayerImplementation*) impl)->getForcePower();
}

SurveyTool* PlayerAdapter::getSurveyTool() {
	return ((PlayerImplementation*) impl)->getSurveyTool();
}

void PlayerAdapter::setSurveyTool(SurveyTool* sTool) {
	return ((PlayerImplementation*) impl)->setSurveyTool(sTool);
}

void PlayerAdapter::setSurveyWaypoint(WaypointObject* id) {
	return ((PlayerImplementation*) impl)->setSurveyWaypoint(id);
}

WaypointObject* PlayerAdapter::getSurveyWaypoint() {
	return ((PlayerImplementation*) impl)->getSurveyWaypoint();
}

bool PlayerAdapter::getCanSurvey() {
	return ((PlayerImplementation*) impl)->getCanSurvey();
}

bool PlayerAdapter::getCanSample() {
	return ((PlayerImplementation*) impl)->getCanSample();
}

void PlayerAdapter::setCanSurvey() {
	return ((PlayerImplementation*) impl)->setCanSurvey();
}

void PlayerAdapter::setCanSample() {
	return ((PlayerImplementation*) impl)->setCanSample();
}

void PlayerAdapter::setSurveyEvent(string& resourcename) {
	return ((PlayerImplementation*) impl)->setSurveyEvent(resourcename);
}

void PlayerAdapter::setSampleEvent(string& resourcename, bool firstTime) {
	return ((PlayerImplementation*) impl)->setSampleEvent(resourcename, firstTime);
}

void PlayerAdapter::setCancelSample(bool val) {
	return ((PlayerImplementation*) impl)->setCancelSample(val);
}

bool PlayerAdapter::getCancelSample() {
	return ((PlayerImplementation*) impl)->getCancelSample();
}

void PlayerAdapter::sendSampleTimeRemaining() {
	return ((PlayerImplementation*) impl)->sendSampleTimeRemaining();
}

void PlayerAdapter::setSurveyErrorMessage() {
	return ((PlayerImplementation*) impl)->setSurveyErrorMessage();
}

void PlayerAdapter::setSampleErrorMessage() {
	return ((PlayerImplementation*) impl)->setSampleErrorMessage();
}

bool PlayerAdapter::getSurveyErrorMessage() {
	return ((PlayerImplementation*) impl)->getSurveyErrorMessage();
}

bool PlayerAdapter::getSampleErrorMessage() {
	return ((PlayerImplementation*) impl)->getSampleErrorMessage();
}

bool PlayerAdapter::isInBuilding() {
	return ((PlayerImplementation*) impl)->isInBuilding();
}

int PlayerAdapter::getBuildingType() {
	return ((PlayerImplementation*) impl)->getBuildingType();
}

void PlayerAdapter::setEntertainerEvent() {
	return ((PlayerImplementation*) impl)->setEntertainerEvent();
}

void PlayerAdapter::clearEntertainerEvent() {
	return ((PlayerImplementation*) impl)->clearEntertainerEvent();
}

/*
 *	PlayerHelper
 */

PlayerHelper::PlayerHelper() {
	className = "Player";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerHelper::finalizeHelper() {
	PlayerHelper::finalize();
}

DistributedObject* PlayerHelper::instantiateObject() {
	return new Player();
}

DistributedObjectAdapter* PlayerHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new PlayerAdapter((PlayerImplementation*) obj);

	DistributedObjectStub* stub = new Player(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	PlayerServant
 */

PlayerServant::PlayerServant(unsigned long long oid) : CreatureObjectImplementation(oid) {
	_classHelper = PlayerHelper::instance();
}

PlayerServant::~PlayerServant() {
}

void PlayerServant::_setStub(DistributedObjectStub* stub) {
	_this = (Player*) stub;
	CreatureObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerServant::_getStub() {
	return _this;
}

