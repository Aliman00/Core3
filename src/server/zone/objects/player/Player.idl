/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

include "engine/service/Message";
include "engine/service/StandaloneMessage";

import "../../ZoneClient";
import "../../Zone";

import "../scene/SceneObject";

import "../creature/CreatureObject";

import "../tangible/TangibleObject";

import "PlayerObject";

import "../tangible/weapons/Weapon";
import "../tangible/Datapad";

import "../group/GroupObject";

import "../guild/Guild";

import "../waypoint/WaypointObject";

import "../../../chat/room/ChatRoom";

interface Player implements CreatureObject {
	Player(unsigned long oid);

	Player create(ZoneClient client);

	void load(ZoneClient client);
	void reload(ZoneClient client);
	void unload();
	
	void disconnect(boolean closeClient = true, boolean doLock = true);

	void logout(boolean doLock = true);
	void userLogout(int msgCounter = 3);

	void clearLogoutEvent();

	// Spatial indexing
	void insertToZone(Zone zone);
	void reinsertToZone(Zone zone);
	
	void lightUpdateZone();
	void updateZone();
	
	void updateZoneWithParent(unsigned long cell);
	void lightUpdateZoneWithParent(unsigned long cell);
	
	void switchMap(int planetid);
	void doWarp(float x, float y, float z = 0, boolean doRandomize = false);
	
	void bounceBack();
	
	void sendTo(Player player);
	
	void notifySceneReady();
	
	// Datapad
	void addDatapadItem(SceneObject item);
	SceneObject getDatapadItem(unsigned long oid);
	void removeDatapadItem(unsigned long oid);
	
	// Combat
	void clearQueueAction(unsigned int actioncntr, float timer = 0, unsigned int tab1 = 0, unsigned int tab2 = 0);
	void queueAction(Player player, unsigned long target, unsigned int actionCRC, unsigned int actionCntr);
	void deleteQueueAction(unsigned int actioncntr);
	
	void changePosture(int post);
	
	void doCenterOfBeing();
	void removeCenterOfBeing();
	
	void doPeace();
	
	void kill();
	
	void lootCorpse();
	
	// trade
	void addTradeItem(TangibleObject item);
	void clearTradeItems();
	int getTradeSize();
	TangibleObject getTradeItem(int idx);
	
	void setAcceptedTrade(boolean val);
	boolean hasAcceptedTrade();
	
	void setVerifiedTrade(boolean val);
	boolean hasVerifiedTrade();
	
	void setMoneyToTrade(unsigned int value);

	unsigned int getMoneyToTrade();
	
	//boolean isChangingFaction();
	
	// Item manipulation methods
	void changeCloth(unsigned long itemid);
	void changeWeapon(unsigned long itemid);
	
	void setWeaponSkillMods(Weapon weapon);
	
	void createItems();
	void loadItems();

	void createBaseStats();
	
	// Profession
	void saveProfessions();
	void loadProfessions();
	
	boolean trainSkillBox(const string name);
	void surrenderSkillBox(const string name);
	
	void resetSkillBoxesIterator();
	int getSkillBoxesSize();
	string getNextSkillBox();
	boolean hasNextSkillBox();

	// Waypoint
	void addWaypoint(WaypointObject wp);
	
	void removeWaypoint(WaypointObject wp);
	WaypointObject getWaypoint(unsigned long id);
	
	// Experience
	void addXp(string xpType, int xp, boolean updateClient);
	void removeXp(string xpType, int xp, boolean updateClient);

	//DuelList manipulation methods
	void removeFromDuelList(Player targetPlayer);
	void addToDuelList(Player targetPlayer);
	
	boolean isInDuelWith(Player targetPlayer, boolean doLock = true);
	
	Player getDuelListObject(int index);
	boolean requestedDuelTo(Player targetPlayer);
	boolean isDuelListEmpty();
	
	int getDuelListSize();
	
	// Guilds
	boolean setGuild(unsigned int gid);
	void setGuild(Guild gild);

	boolean updateGuild(unsigned int gid);
	void updateGuild(Guild guild);
	
	// Chat
	void addChatRoom(ChatRoom room);
	void removeChatRoom(ChatRoom room);

	// Client Methods
	void sendSystemMessage(const string msg);
	void sendSystemMessage(unicode msg);
		
	void sendSystemMessage(const string file, const string str, unsigned long targetid = 0);

	// logger methods
	void info(const string message, boolean forcedLog = false);
	void error(const string message);

	// setters
	void setConversatingCreature(CreatureObject conversator);
	void setFirstName(const string name);
	
	void setBiography(const string bio);
	void setBiography(unicode bio);
	
	void setHairData(string hair);
	
	boolean changeForceBar(int fp);
	
	void setCharacterID(unsigned long id);
	
	void setStartingProfession(const string prof);
	
	void setHairObject(const string hair);
		
	void setPlayerObject(PlayerObject obj);
	
	void setOnline();
	
	void setClient(ZoneClient client);
	
	void setOvert();
	void setCovert();
	
	void newChangeFactionEvent(unsigned int faction);
	
	void setRaceFileName(string name);
	void setStartingLocation(string loc);
	
	void setFactionRank(string fac);
	
	void setItemShift(unsigned int shift);
	
	void toggleCharacterBit(unsigned int bit);
	
	boolean awardBadge(unsigned int badgeindex);
	
	//void addBadgeBitmask(unsigned int bitmask);
	
	void setLinkDead();
	
	void setAdminLevel(int level);
	
	void setLastTestPositionX(float pos);
	void setLastTestPositionY(float pos);
	
	void setTradeRequestedPlayer(unsigned long ID);

	// getters
	PlayerObject getPlayerObject();
	
	boolean isLinkDead();
	
	boolean isLoggingIn();
	
	boolean isLoggingOut();
	
	CreatureObject getConversatingCreature();
	
	string getFirstName();
	string getRaceFileName();
	
	unicode getBiography();
	string getHairData();

	unsigned int getForcePower();
	boolean isJedi();
	
	void sendMessage(Message msg);
	void sendMessage(StandaloneMessage msg);
	
	unsigned long getCharacterID();
	
	string getStartingProfession();
	
	int getZoneIndex();
		
	string getHairObject();
	
	boolean isOnline();
	
	ZoneClient getClient();
	
	GroupObject getGroupObject();
	
	string getFactionRank();
	
	unsigned int getRebelPoints();
		
	unsigned int getImperialPoints();
	
	int getPvpRating();
	
	void getPlayersNearYou();
	
	int getRegionID();
	
	int getCertificationListSize();
		
	string getCertification(int idx);
	
	boolean isChangingFaction();
	
	Datapad getDatapad();
	
	unsigned int getNewItemID();

	unsigned int getItemShift();
	
	float getLastTestPositionX();
	float getLastTestPositionY();
	
	unsigned long getTradeRequestedPlayer();
	
	void launchFirework();
}
