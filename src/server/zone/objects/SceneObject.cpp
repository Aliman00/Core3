/*
 *	server/zone/objects/SceneObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "SceneObject.h"

#include "SceneObjectImplementation.h"

/*
 *	SceneObjectStub
 */

SceneObject::SceneObject(DummyConstructorParameter* param) : ManagedObject(param) {
}

SceneObject::~SceneObject() {
}

void SceneObject::info(const String& message, bool forcedLog) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(message);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->info(message, forcedLog);
}

void SceneObject::error(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->error(message);
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case 7:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void SceneObjectAdapter::info(const String& message, bool forcedLog) {
	return ((SceneObjectImplementation*) impl)->info(message, forcedLog);
}

void SceneObjectAdapter::error(const String& message) {
	return ((SceneObjectImplementation*) impl)->error(message);
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SceneObjectServant
 */

SceneObjectServant::SceneObjectServant() : ManagedObjectImplementation() {
	_classHelper = SceneObjectHelper::instance();
}

SceneObjectServant::~SceneObjectServant() {
}

void SceneObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	ManagedObjectServant::_setStub(stub);
}

DistributedObjectStub* SceneObjectServant::_getStub() {
	return _this;
}

