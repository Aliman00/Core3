/*
 *	server/zone/objects/mission/SurveyMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "SurveyMissionObjective.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/resource/ResourceSpawn.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObjective.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

#include "server/zone/objects/resource/SpawnMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/templates/TemplateReference.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	SurveyMissionObjectiveStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ACTIVATE__,RPC_ABORT__,RPC_COMPLETE__,RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_SETSPAWN__RESOURCESPAWN_,RPC_SETMISSIONGIVER__SCENEOBJECT_,RPC_SETEFFICIENCY__INT_};

SurveyMissionObjective::SurveyMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	SurveyMissionObjectiveImplementation* _implementation = new SurveyMissionObjectiveImplementation(mission);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

SurveyMissionObjective::SurveyMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
}

SurveyMissionObjective::~SurveyMissionObjective() {
}


void SurveyMissionObjective::initializeTransientMembers() {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void SurveyMissionObjective::activate() {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void SurveyMissionObjective::abort() {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ABORT__);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void SurveyMissionObjective::complete() {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETE__);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

int SurveyMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void SurveyMissionObjective::setSpawn(ResourceSpawn* sp) {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWN__RESOURCESPAWN_);
		method.addObjectParameter(sp);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawn(sp);
}

void SurveyMissionObjective::setMissionGiver(SceneObject* object) {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONGIVER__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionGiver(object);
}

void SurveyMissionObjective::setEfficiency(unsigned int eff) {
	SurveyMissionObjectiveImplementation* _implementation = (SurveyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEFFICIENCY__INT_);
		method.addUnsignedIntParameter(eff);

		method.executeWithVoidReturn();
	} else
		_implementation->setEfficiency(eff);
}

DistributedObjectServant* SurveyMissionObjective::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void SurveyMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<SurveyMissionObjectiveImplementation*>(servant));
}

/*
 *	SurveyMissionObjectiveImplementation
 */

SurveyMissionObjectiveImplementation::SurveyMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


SurveyMissionObjectiveImplementation::~SurveyMissionObjectiveImplementation() {
	if (_this->isCurrentVersion(this))
	SurveyMissionObjectiveImplementation::finalize();
}


void SurveyMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(SurveyMissionObjectiveHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SurveyMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SurveyMissionObjective*) stub;
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* SurveyMissionObjectiveImplementation::_getStub() {
	return _this;
}

SurveyMissionObjectiveImplementation::operator const SurveyMissionObjective*() {
	return _this;
}

Object* SurveyMissionObjectiveImplementation::clone() {
	return dynamic_cast<Object*>(new SurveyMissionObjectiveImplementation(*this));
}


void SurveyMissionObjectiveImplementation::lock(bool doLock) {
}

void SurveyMissionObjectiveImplementation::lock(ManagedObject* obj) {
}

void SurveyMissionObjectiveImplementation::rlock(bool doLock) {
}

void SurveyMissionObjectiveImplementation::wlock(bool doLock) {
}

void SurveyMissionObjectiveImplementation::wlock(ManagedObject* obj) {
}

void SurveyMissionObjectiveImplementation::unlock(bool doLock) {
}

void SurveyMissionObjectiveImplementation::runlock(bool doLock) {
}

void SurveyMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("SurveyMissionObjective");

}

void SurveyMissionObjectiveImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SurveyMissionObjectiveImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SurveyMissionObjectiveImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (MissionObjectiveImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "spawn") {
		TypeInfo<ManagedReference<ResourceSpawn* > >::parseFromBinaryStream(&spawn, stream);
		return true;
	}

	if (_name == "efficiency") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&efficiency, stream);
		return true;
	}

	if (_name == "missionGiver") {
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&missionGiver, stream);
		return true;
	}


	return false;
}

void SurveyMissionObjectiveImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SurveyMissionObjectiveImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SurveyMissionObjectiveImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "spawn";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ResourceSpawn* > >::toBinaryStream(&spawn, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "efficiency";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&efficiency, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionGiver";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&missionGiver, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + MissionObjectiveImplementation::writeObjectMembers(stream);
}

SurveyMissionObjectiveImplementation::SurveyMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		Logger.setLoggingName("SurveyMissionObjective");
	Logger::setLoggingName("SurveyMissionObjective");
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		efficiency = 0;
	efficiency = 0;
}

void SurveyMissionObjectiveImplementation::finalize() {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		Logger.info("deleting from memory", true);
	Logger::info("deleting from memory", true);
}

void SurveyMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		activate();
	activate();
}

void SurveyMissionObjectiveImplementation::setSpawn(ResourceSpawn* sp) {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		spawn = sp;
	spawn = sp;
}

void SurveyMissionObjectiveImplementation::setMissionGiver(SceneObject* object) {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		missionGiver = object;
	missionGiver = object;
}

void SurveyMissionObjectiveImplementation::setEfficiency(unsigned int eff) {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		efficiency = eff;
	efficiency = eff;
}

/*
 *	SurveyMissionObjectiveAdapter
 */

SurveyMissionObjectiveAdapter::SurveyMissionObjectiveAdapter(SurveyMissionObjectiveImplementation* obj) : MissionObjectiveAdapter(obj) {
}

Packet* SurveyMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_ACTIVATE__:
		activate();
		break;
	case RPC_ABORT__:
		abort();
		break;
	case RPC_COMPLETE__:
		complete();
		break;
	case RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent((MissionObserver*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case RPC_SETSPAWN__RESOURCESPAWN_:
		setSpawn((ResourceSpawn*) inv->getObjectParameter());
		break;
	case RPC_SETMISSIONGIVER__SCENEOBJECT_:
		setMissionGiver((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETEFFICIENCY__INT_:
		setEfficiency(inv->getUnsignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SurveyMissionObjectiveAdapter::finalize() {
	((SurveyMissionObjectiveImplementation*) impl)->finalize();
}

void SurveyMissionObjectiveAdapter::initializeTransientMembers() {
	((SurveyMissionObjectiveImplementation*) impl)->initializeTransientMembers();
}

void SurveyMissionObjectiveAdapter::activate() {
	((SurveyMissionObjectiveImplementation*) impl)->activate();
}

void SurveyMissionObjectiveAdapter::abort() {
	((SurveyMissionObjectiveImplementation*) impl)->abort();
}

void SurveyMissionObjectiveAdapter::complete() {
	((SurveyMissionObjectiveImplementation*) impl)->complete();
}

int SurveyMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((SurveyMissionObjectiveImplementation*) impl)->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void SurveyMissionObjectiveAdapter::setSpawn(ResourceSpawn* sp) {
	((SurveyMissionObjectiveImplementation*) impl)->setSpawn(sp);
}

void SurveyMissionObjectiveAdapter::setMissionGiver(SceneObject* object) {
	((SurveyMissionObjectiveImplementation*) impl)->setMissionGiver(object);
}

void SurveyMissionObjectiveAdapter::setEfficiency(unsigned int eff) {
	((SurveyMissionObjectiveImplementation*) impl)->setEfficiency(eff);
}

/*
 *	SurveyMissionObjectiveHelper
 */

SurveyMissionObjectiveHelper* SurveyMissionObjectiveHelper::staticInitializer = SurveyMissionObjectiveHelper::instance();

SurveyMissionObjectiveHelper::SurveyMissionObjectiveHelper() {
	className = "SurveyMissionObjective";

	Core::getObjectBroker()->registerClass(className, this);
}

void SurveyMissionObjectiveHelper::finalizeHelper() {
	SurveyMissionObjectiveHelper::finalize();
}

DistributedObject* SurveyMissionObjectiveHelper::instantiateObject() {
	return new SurveyMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* SurveyMissionObjectiveHelper::instantiateServant() {
	return new SurveyMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SurveyMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SurveyMissionObjectiveAdapter((SurveyMissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

