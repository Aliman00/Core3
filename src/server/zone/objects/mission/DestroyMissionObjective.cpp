/*
 *	server/zone/objects/mission/DestroyMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "DestroyMissionObjective.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/area/MissionSpawnActiveArea.h"

#include "server/zone/objects/tangible/lair/LairObject.h"


// Imported class dependencies

#include "engine/core/ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "engine/core/Task.h"

#include "engine/service/proto/BaseClientProxy.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/stm/TransactionalReference.h"

#include "engine/util/Facade.h"

#include "engine/util/Observable.h"

#include "engine/util/Observer.h"

#include "engine/util/ObserverEventMap.h"

#include "engine/util/u3d/Coordinate.h"

#include "engine/util/u3d/QuadTree.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "engine/util/u3d/Quaternion.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/chat/room/ChatRoom.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZonePacketHandler.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/holocron/HolocronManager.h"

#include "server/zone/managers/name/NameManager.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/sui/SuiManager.h"

#include "server/zone/managers/vendor/VendorManager.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/SpeedMultiplierModChanges.h"

#include "server/zone/objects/creature/buffs/Buff.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/creature/variables/CommandQueueAction.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/manufactureschematic/IngredientSlots.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/mission/DestroyMissionObjective.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObjective.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/tangible/DamageMap.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/lair/HealLairEvent.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/templates/TemplateReference.h"

#include "server/zone/templates/tangible/LairObjectTemplate.h"

#include "system/io/ObjectInputStream.h"

#include "system/io/ObjectOutputStream.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

/*
 *	DestroyMissionObjectiveStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ACTIVATE__,RPC_ABORT__,RPC_COMPLETE__,RPC_SPAWNLAIR__,RPC_DESTROYOBJECTFROMDATABASE__,RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_,};

DestroyMissionObjective::DestroyMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	DestroyMissionObjectiveImplementation* _implementation = new DestroyMissionObjectiveImplementation(mission);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

DestroyMissionObjective::DestroyMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
}

DestroyMissionObjective::~DestroyMissionObjective() {
}


void DestroyMissionObjective::initializeTransientMembers() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void DestroyMissionObjective::activate() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void DestroyMissionObjective::abort() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ABORT__);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void DestroyMissionObjective::complete() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETE__);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

void DestroyMissionObjective::spawnLair() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPAWNLAIR__);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnLair();
}

void DestroyMissionObjective::destroyObjectFromDatabase() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase();
}

int DestroyMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void DestroyMissionObjective::setLairTemplateToSpawn(SharedObjectTemplate* sp) {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setLairTemplateToSpawn(sp);
}

DistributedObjectServant* DestroyMissionObjective::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void DestroyMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<DestroyMissionObjectiveImplementation*>(servant));
}

/*
 *	DestroyMissionObjectiveImplementation
 */

DestroyMissionObjectiveImplementation::DestroyMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


DestroyMissionObjectiveImplementation::~DestroyMissionObjectiveImplementation() {
	if (_this->isCurrentVersion(this))
	DestroyMissionObjectiveImplementation::finalize();
}


void DestroyMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(DestroyMissionObjectiveHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void DestroyMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (DestroyMissionObjective*) stub;
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* DestroyMissionObjectiveImplementation::_getStub() {
	return _this;
}

DestroyMissionObjectiveImplementation::operator const DestroyMissionObjective*() {
	return _this;
}

Object* DestroyMissionObjectiveImplementation::clone() {
	return dynamic_cast<Object*>(new DestroyMissionObjectiveImplementation(*this));
}


void DestroyMissionObjectiveImplementation::lock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::lock(ManagedObject* obj) {
}

void DestroyMissionObjectiveImplementation::rlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::wlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::wlock(ManagedObject* obj) {
}

void DestroyMissionObjectiveImplementation::unlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::runlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("DestroyMissionObjective");

}

void DestroyMissionObjectiveImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(DestroyMissionObjectiveImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DestroyMissionObjectiveImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (MissionObjectiveImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "lairTemplateToSpawn") {
		TypeInfo<TemplateReference<SharedObjectTemplate*> >::parseFromBinaryStream(&lairTemplateToSpawn, stream);
		return true;
	}

	if (_name == "spawnActiveArea") {
		TypeInfo<ManagedReference<MissionSpawnActiveArea* > >::parseFromBinaryStream(&spawnActiveArea, stream);
		return true;
	}

	if (_name == "lairObject") {
		TypeInfo<ManagedReference<LairObject* > >::parseFromBinaryStream(&lairObject, stream);
		return true;
	}


	return false;
}

void DestroyMissionObjectiveImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DestroyMissionObjectiveImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DestroyMissionObjectiveImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "lairTemplateToSpawn";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<TemplateReference<SharedObjectTemplate*> >::toBinaryStream(&lairTemplateToSpawn, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnActiveArea";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<MissionSpawnActiveArea* > >::toBinaryStream(&spawnActiveArea, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lairObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<LairObject* > >::toBinaryStream(&lairObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + MissionObjectiveImplementation::writeObjectMembers(stream);
}

DestroyMissionObjectiveImplementation::DestroyMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		Logger.setLoggingName("DestroyMissionObjective");
	Logger::setLoggingName("DestroyMissionObjective");
}

void DestroyMissionObjectiveImplementation::finalize() {
}

void DestroyMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		activate();
	activate();
}

/*
 *	DestroyMissionObjectiveAdapter
 */

DestroyMissionObjectiveAdapter::DestroyMissionObjectiveAdapter(DestroyMissionObjectiveImplementation* obj) : MissionObjectiveAdapter(obj) {
}

Packet* DestroyMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_ACTIVATE__:
		activate();
		break;
	case RPC_ABORT__:
		abort();
		break;
	case RPC_COMPLETE__:
		complete();
		break;
	case RPC_SPAWNLAIR__:
		spawnLair();
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__:
		destroyObjectFromDatabase();
		break;
	case RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent((MissionObserver*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void DestroyMissionObjectiveAdapter::finalize() {
	((DestroyMissionObjectiveImplementation*) impl)->finalize();
}

void DestroyMissionObjectiveAdapter::initializeTransientMembers() {
	((DestroyMissionObjectiveImplementation*) impl)->initializeTransientMembers();
}

void DestroyMissionObjectiveAdapter::activate() {
	((DestroyMissionObjectiveImplementation*) impl)->activate();
}

void DestroyMissionObjectiveAdapter::abort() {
	((DestroyMissionObjectiveImplementation*) impl)->abort();
}

void DestroyMissionObjectiveAdapter::complete() {
	((DestroyMissionObjectiveImplementation*) impl)->complete();
}

void DestroyMissionObjectiveAdapter::spawnLair() {
	((DestroyMissionObjectiveImplementation*) impl)->spawnLair();
}

void DestroyMissionObjectiveAdapter::destroyObjectFromDatabase() {
	((DestroyMissionObjectiveImplementation*) impl)->destroyObjectFromDatabase();
}

int DestroyMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((DestroyMissionObjectiveImplementation*) impl)->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

/*
 *	DestroyMissionObjectiveHelper
 */

DestroyMissionObjectiveHelper* DestroyMissionObjectiveHelper::staticInitializer = DestroyMissionObjectiveHelper::instance();

DestroyMissionObjectiveHelper::DestroyMissionObjectiveHelper() {
	className = "DestroyMissionObjective";

	Core::getObjectBroker()->registerClass(className, this);
}

void DestroyMissionObjectiveHelper::finalizeHelper() {
	DestroyMissionObjectiveHelper::finalize();
}

DistributedObject* DestroyMissionObjectiveHelper::instantiateObject() {
	return new DestroyMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* DestroyMissionObjectiveHelper::instantiateServant() {
	return new DestroyMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DestroyMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DestroyMissionObjectiveAdapter((DestroyMissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

