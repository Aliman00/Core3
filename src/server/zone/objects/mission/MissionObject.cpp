/*
 *	server/zone/objects/mission/MissionObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "../scene/SceneObject.h"

#include "MissionObject.h"

#include "MissionObjectImplementation.h"

/*
 *	MissionObjectStub
 */

MissionObject::MissionObject() : SceneObject(NULL) {
}

MissionObject::MissionObject(DistributedObjectServant* obj) : SceneObject(obj) {
}

MissionObject::MissionObject(MissionObject& ref) : SceneObject(ref) {
}

MissionObject::~MissionObject() {
}

MissionObject* MissionObject::clone() {
	return new MissionObject(*this);
}


/*
 *	MissionObjectAdapter
 */

MissionObjectAdapter::MissionObjectAdapter(MissionObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* MissionObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	MissionObjectHelper
 */

MissionObjectHelper* MissionObjectHelper::staticInitializer = MissionObjectHelper::instance();

MissionObjectHelper::MissionObjectHelper() {
	className = "MissionObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MissionObjectHelper::finalizeHelper() {
	MissionObjectHelper::finalize();
}

DistributedObject* MissionObjectHelper::instantiateObject() {
	return new MissionObject();
}

DistributedObjectAdapter* MissionObjectHelper::createAdapter(DistributedObjectServant* obj) {
	DistributedObjectAdapter* adapter = new MissionObjectAdapter((MissionObjectImplementation*) obj);

	DistributedObjectStub* stub = new MissionObject(obj);
	stub->_setClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	MissionObjectServant
 */

MissionObjectServant::MissionObjectServant(unsigned long long oid) : SceneObjectImplementation(oid) {
	_classHelper = MissionObjectHelper::instance();
}

MissionObjectServant::~MissionObjectServant() {
}

void MissionObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (MissionObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* MissionObjectServant::_getStub() {
	return _this;
}

