/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

include "engine/service/proto/BaseMessage";
include "engine/service/proto/StandaloneBaseMessage";
include "engine/util/QuadTreeEntry";
include "../ZoneProcessServerImplementation";

import "../Zone";
import "cell/CellObject";
import "tangible/creature/player/PlayerObject";

interface SceneObject implements ManagedObject {
	//Container Methods
	boolean hasChild(unsigned long objid, boolean recursive = false);
	int getContainerSize(boolean recursive = false);
	boolean appendChild(SceneObject obj);
	boolean removeChild(unsigned long objid);

	//Logger methods
	void info(const String message, boolean forcedLog = false);
	void error(const String message);
	
	//ORB Methods
	native boolean destroy();
	void scheduleUndeploy();
	void undeploy();
	void redeploy();
	void removeUndeploymentEvent();
	void setObjectKeeping(boolean keeping);
	void clearUndeploymentEvent();
	boolean isUndeploymentScheduled();
	
	//QuadTree methods
	boolean isInRange(SceneObject obj, float range);
	boolean isInRange(float x, float y, float range);
	int inRangeObjectCount();
	QuadTreeEntry getInRangeObject(int idx);
	void addInRangeObject(QuadTreeEntry obj, boolean notifyUpdate = true);
	void removeInRangeObject(QuadTreeEntry obj);
	boolean isInQuadTree();
	QuadTreeEntry getQuadTreeEntry();
	
	//Zone Insertion
	void insertToZone(Zone zne);
	void insertToCell(CellObject cell);
	
	//Sending of Packets
	void broadcastMessage(BaseMessage msg, int range = 128, boolean dolock = true, boolean sendself = true);
	void broadcastMessage(StandaloneBaseMessage msg, int range = 128, boolean dolock = true);
	void sendTo(PlayerObject player);
	
	//Event handlers
	void onDragDrop(PlayerObject player, SceneObject target);
	
	//Setters
	void setParent(SceneObject obj, unsigned int linktype = 0x04);
	local void setZoneProcessServer(ZoneProcessServerImplementation srv);
	void setZone(Zone zne);
	void setDirection(float x, float y, float z, float w);
	void setPosition(float x, float y, float z);
	void setPositionX(float x);
	void setPositionY(float y);
	void setPositionZ(float z);
	void setCustomName(const UnicodeString customname);
	void setObjectID(unsigned long objectid);
	void setObjectCRC(unsigned int crc);
	void setObjectType(unsigned int type);
	void setStfFile(const String stffile);
	void setStfName(const String stfname);
	
	//Getters
	SceneObject getParent();
	unsigned int getLinkType();
	local ZoneProcessServerImplementation getZoneProcessServer();
	Zone getZone();
	unsigned int getZoneID();
	float getDirectionX();
	float getDirectionY();
	float getDirectionZ();
	float getDirectionW();
	float getPositionX();
	float getPositionY();
	float getPositionZ();
	String getStfFile();
	String getStfName();
	UnicodeString getCustomName();
	unsigned long getObjectID();
	unsigned int getObjectCRC();
	unsigned int getObjectType();
	float getComplexity();
	unsigned int getVolume();
	
	boolean isObjectType(int type, boolean similar = false);
	boolean isPlayer();
}
