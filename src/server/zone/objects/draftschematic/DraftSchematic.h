/*
 *	server/zone/objects/draftschematic/DraftSchematic.h generated by engine3 IDL compiler 0.55
 */

#ifndef DRAFTSCHEMATIC_H_
#define DRAFTSCHEMATIC_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class Player;

class DraftSchematicIngredient;

class DraftSchematicExpPropGroup;

class ObjectControllerMessage;

class DraftSchematic : public DistributedObjectStub {
protected:
	DraftSchematic();
	DraftSchematic(DistributedObjectServant* obj);
	DraftSchematic(DraftSchematic& ref);

	virtual ~DraftSchematic();

public:
	DraftSchematic* clone();

	DraftSchematic* dsClone(DraftSchematic* ds);

	void addIngredient(const string& ingredientTemplateName, const string& ingredientTitleName, bool optional, const string& resourceType, unsigned int resourceQuantity);

	void sendIngredientsToPlayer(Player* player);

	void helperSendIngredientsToPlayer(ObjectControllerMessage* objMsg);

	void addExperimentalProperty(unsigned int groupNumber, const string& experimentalProperty, unsigned int weight);

	void sendExperimentalPropertiesToPlayer(Player* player);

	DraftSchematicIngredient* getIngredient(int index);

	int getIngredientListSize();

	void addExpPropTitle(const string& title);

	int getExpPropTitlesListSize();

	string& getExpPropTitle(int index);

	int getExpPropGroupListSize();

	DraftSchematicExpPropGroup* getExpPropGroup(int index);

	void setPersistent(bool status);

	void setObjectID(unsigned long long objID);

	void setTanoAttributes(string& attributes);

	unsigned int getSchematicID();

	unsigned int getSchematicCRC();

	string& getName();

	string& getGroupName();

	unsigned int getComplexity();

	unsigned int getSchematicSize();

	unsigned int getObjectID();

	string& getTanoAttributes();

	int getCraftingToolTab();

protected:
	string _return_getExpPropTitle;

	string _return_getGroupName;

	string _return_getName;

	string _return_getTanoAttributes;


	friend class DraftSchematicHelper;
};

class DraftSchematicImplementation;

class DraftSchematicAdapter : public DistributedObjectAdapter {
public:
	DraftSchematicAdapter(DraftSchematicImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	DraftSchematic* dsClone(DraftSchematic* ds);

	void addIngredient(const string& ingredientTemplateName, const string& ingredientTitleName, bool optional, const string& resourceType, unsigned int resourceQuantity);

	void sendIngredientsToPlayer(Player* player);

	void helperSendIngredientsToPlayer(ObjectControllerMessage* objMsg);

	void addExperimentalProperty(unsigned int groupNumber, const string& experimentalProperty, unsigned int weight);

	void sendExperimentalPropertiesToPlayer(Player* player);

	DraftSchematicIngredient* getIngredient(int index);

	int getIngredientListSize();

	void addExpPropTitle(const string& title);

	int getExpPropTitlesListSize();

	string& getExpPropTitle(int index);

	int getExpPropGroupListSize();

	DraftSchematicExpPropGroup* getExpPropGroup(int index);

	void setPersistent(bool status);

	void setObjectID(unsigned long long objID);

	void setTanoAttributes(string& attributes);

	unsigned int getSchematicID();

	unsigned int getSchematicCRC();

	string& getName();

	string& getGroupName();

	unsigned int getComplexity();

	unsigned int getSchematicSize();

	unsigned int getObjectID();

	string& getTanoAttributes();

	int getCraftingToolTab();

protected:
	string _param0_addIngredient__string_string_bool_string_int_;
	string _param1_addIngredient__string_string_bool_string_int_;
	string _param3_addIngredient__string_string_bool_string_int_;
	string _param1_addExperimentalProperty__int_string_int_;
	string _param0_addExpPropTitle__string_;
	string _param0_setTanoAttributes__string_;
};

class DraftSchematicHelper : public DistributedObjectClassHelper, public Singleton<DraftSchematicHelper> {
	static DraftSchematicHelper* staticInitializer;

public:
	DraftSchematicHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<DraftSchematicHelper>;
};

class DraftSchematicServant : public DistributedObjectServant {
public:
	DraftSchematic* _this;

public:
	DraftSchematicServant();
	virtual ~DraftSchematicServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*DRAFTSCHEMATIC_H_*/
