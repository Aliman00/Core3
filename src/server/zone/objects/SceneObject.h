/*
 *	server/zone/objects/SceneObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef SCENEOBJECT_H_
#define SCENEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/StandaloneBaseMessage.h"

#include "engine/util/QuadTreeEntry.h"

#include "../ZoneProcessServerImplementation.h"

class Zone;

class PlayerObject;

#include "engine/core/ManagedObject.h"

class SceneObject : public ManagedObject {
public:
	bool hasChild(unsigned long long objid, bool recursive = false);

	int getContainerSize(bool recursive = false);

	void info(const String& message, bool forcedLog = false);

	void error(const String& message);

	bool destroy();

	void deploy();

	void scheduleUndeploy();

	void undeploy();

	void redeploy();

	void removeUndeploymentEvent();

	void setObjectKeeping(bool keeping);

	void clearUndeploymentEvent();

	bool isUndeploymentScheduled();

	bool isInRange(SceneObject* obj, float range);

	bool isInRange(float x, float y, float range);

	int inRangeObjectCount();

	QuadTreeEntry* getInRangeObject(int idx);

	void addInRangeObject(QuadTreeEntry* obj, bool notifyUpdate = true);

	void removeInRangeObject(QuadTreeEntry* obj);

	bool isInQuadTree();

	QuadTreeEntry* getQuadTreeEntry();

	void broadcastMessage(BaseMessage* msg, int range = 128, bool dolock = true, bool sendself = true);

	void broadcastMessage(StandaloneBaseMessage* msg, int range = 128, bool dolock = true);

	void onDragDrop(PlayerObject* player, SceneObject* target);

	void setParent(SceneObject* obj, unsigned int linktype = 04);

	void setZoneProcessServer(ZoneProcessServerImplementation* srv);

	void setZone(Zone* zne);

	void setDirection(float x, float y, float z, float w);

	void setPosition(float x, float y, float z);

	void setPositionX(float x);

	void setPositionY(float y);

	void setPositionZ(float z);

	void setCustomName(const UnicodeString& customname);

	void setStfFile(const String& stffile);

	void setStfName(const String& stfname);

	SceneObject* getParent();

	unsigned int getLinkType();

	ZoneProcessServerImplementation* getZoneProcessServer();

	Zone* getZone();

	unsigned int getZoneID();

	float getDirectionX();

	float getDirectionY();

	float getDirectionZ();

	float getDirectionW();

	float getPositionX();

	float getPositionY();

	float getPositionZ();

	String& getStfFile();

	String& getStfName();

	UnicodeString& getCustomName();

	unsigned long long getObjectID();

	unsigned int getObjectCRC();

	unsigned int getObjectType();

	float getComplexity();

	unsigned int getVolume();

	bool isObjectType(int type, bool similar = false);

	bool isPlayer();

protected:
	SceneObject(DummyConstructorParameter* param);

	virtual ~SceneObject();

	String _return_getStfFile;
	String _return_getStfName;

	UnicodeString _return_getCustomName;

	friend class SceneObjectHelper;
};

class SceneObjectImplementation;

class SceneObjectAdapter : public ManagedObjectAdapter {
public:
	SceneObjectAdapter(SceneObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool hasChild(unsigned long long objid, bool recursive);

	int getContainerSize(bool recursive);

	void info(const String& message, bool forcedLog);

	void error(const String& message);

	bool destroy();

	void deploy();

	void scheduleUndeploy();

	void undeploy();

	void redeploy();

	void removeUndeploymentEvent();

	void setObjectKeeping(bool keeping);

	void clearUndeploymentEvent();

	bool isUndeploymentScheduled();

	bool isInRange(SceneObject* obj, float range);

	bool isInRange(float x, float y, float range);

	int inRangeObjectCount();

	QuadTreeEntry* getInRangeObject(int idx);

	void addInRangeObject(QuadTreeEntry* obj, bool notifyUpdate);

	void removeInRangeObject(QuadTreeEntry* obj);

	bool isInQuadTree();

	QuadTreeEntry* getQuadTreeEntry();

	void broadcastMessage(BaseMessage* msg, int range, bool dolock, bool sendself);

	void broadcastMessage(StandaloneBaseMessage* msg, int range, bool dolock);

	void onDragDrop(PlayerObject* player, SceneObject* target);

	void setParent(SceneObject* obj, unsigned int linktype);

	void setZone(Zone* zne);

	void setDirection(float x, float y, float z, float w);

	void setPosition(float x, float y, float z);

	void setPositionX(float x);

	void setPositionY(float y);

	void setPositionZ(float z);

	void setCustomName(const UnicodeString& customname);

	void setStfFile(const String& stffile);

	void setStfName(const String& stfname);

	SceneObject* getParent();

	unsigned int getLinkType();

	Zone* getZone();

	unsigned int getZoneID();

	float getDirectionX();

	float getDirectionY();

	float getDirectionZ();

	float getDirectionW();

	float getPositionX();

	float getPositionY();

	float getPositionZ();

	String& getStfFile();

	String& getStfName();

	UnicodeString& getCustomName();

	unsigned long long getObjectID();

	unsigned int getObjectCRC();

	unsigned int getObjectType();

	float getComplexity();

	unsigned int getVolume();

	bool isObjectType(int type, bool similar);

	bool isPlayer();

protected:
	String _param0_info__String_bool_;
	String _param0_error__String_;
	UnicodeString _param0_setCustomName__UnicodeString_;
	String _param0_setStfFile__String_;
	String _param0_setStfName__String_;
};

class SceneObjectHelper : public DistributedObjectClassHelper, public Singleton<SceneObjectHelper> {
	static SceneObjectHelper* staticInitializer;

public:
	SceneObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<SceneObjectHelper>;
};

#include "engine/core/ManagedObjectImplementation.h"

class SceneObjectServant : public ManagedObjectImplementation {
public:
	SceneObject* _this;

public:
	SceneObjectServant();
	virtual ~SceneObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*SCENEOBJECT_H_*/
