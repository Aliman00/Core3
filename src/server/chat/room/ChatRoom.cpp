/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

/*
 *	server/chat/room/ChatRoom.cpp generated by Engine3 IDL compiler 0.51
 */

#include "../../zone/ZoneServer.h"

#include "../../zone/objects/player/Player.h"

#include "ChatRoom.h"

#include "ChatRoomImplementation.h"

/*
 *	ChatRoomStub
 */

ChatRoom::ChatRoom() : ORBObjectStub(NULL) {
}

ChatRoom::ChatRoom(ORBObjectServant* obj) : ORBObjectStub(obj) {
}

ChatRoom::ChatRoom(ChatRoom& ref) : ORBObjectStub(ref) {
}

ChatRoom::~ChatRoom() {
}

ChatRoom* ChatRoom::clone() {
	return new ChatRoom(*this);
}


void ChatRoom::sendTo(Player* player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 6);
		invocation.addObjectParameter(player);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->sendTo(player);
}

void ChatRoom::sendDestroyTo(Player* player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 7);
		invocation.addObjectParameter(player);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->sendDestroyTo(player);
}

void ChatRoom::addSubRoom(ChatRoom* channel) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 8);
		invocation.addObjectParameter(channel);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->addSubRoom(channel);
}

void ChatRoom::removeSubRoom(ChatRoom* channel) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 9);
		invocation.addObjectParameter(channel);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removeSubRoom(channel);
}

ChatRoom* ChatRoom::getSubRoom(int i) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 10);
		invocation.addSignedIntParameter(i);

		return (ChatRoom*) invocation.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getSubRoom(i);
}

ChatRoom* ChatRoom::getSubRoom(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 11);
		invocation.addAsciiParameter(name);

		return (ChatRoom*) invocation.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getSubRoom(name);
}

void ChatRoom::addPlayer(Player* player, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 12);
		invocation.addObjectParameter(player);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->addPlayer(player, doLock);
}

void ChatRoom::removePlayer(Player* player, bool doLock) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 13);
		invocation.addObjectParameter(player);
		invocation.addBooleanParameter(doLock);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removePlayer(player, doLock);
}

void ChatRoom::removePlayer(const string& player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 14);
		invocation.addAsciiParameter(player);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removePlayer(player);
}

void ChatRoom::broadcastMessage(BaseMessage* msg) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 15);
		invocation.addObjectParameter(msg);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->broadcastMessage(msg);
}

bool ChatRoom::hasPlayer(Player* player) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 16);
		invocation.addObjectParameter(player);

		return invocation.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->hasPlayer(player);
}

bool ChatRoom::hasPlayer(const string& name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 17);
		invocation.addAsciiParameter(name);

		return invocation.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->hasPlayer(name);
}

void ChatRoom::removeAllPlayers() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 18);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removeAllPlayers();
}

void ChatRoom::setPrivate() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 19);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setPrivate();
}

void ChatRoom::setPublic() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 20);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setPublic();
}

bool ChatRoom::isPublic() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 21);

		return invocation.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->isPublic();
}

bool ChatRoom::isPrivate() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 22);

		return invocation.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->isPrivate();
}

Player* ChatRoom::getPlayer(int idx) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 23);
		invocation.addSignedIntParameter(idx);

		return (Player*) invocation.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getPlayer(idx);
}

int ChatRoom::getPlayerSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 24);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getPlayerSize();
}

void ChatRoom::setName(const string& Name) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 25);
		invocation.addAsciiParameter(Name);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setName(Name);
}

string& ChatRoom::getName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 26);

		invocation.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ChatRoomImplementation*) _impl)->getName();
}

string& ChatRoom::getFullPath() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 27);

		invocation.executeWithAsciiReturn(_return_getFullPath);
		return _return_getFullPath;
	} else
		return ((ChatRoomImplementation*) _impl)->getFullPath();
}

string& ChatRoom::getOwner() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 28);

		invocation.executeWithAsciiReturn(_return_getOwner);
		return _return_getOwner;
	} else
		return ((ChatRoomImplementation*) _impl)->getOwner();
}

string& ChatRoom::getCreator() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 29);

		invocation.executeWithAsciiReturn(_return_getCreator);
		return _return_getCreator;
	} else
		return ((ChatRoomImplementation*) _impl)->getCreator();
}

unicode& ChatRoom::getTitle() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 30);

		invocation.executeWithUnicodeReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return ((ChatRoomImplementation*) _impl)->getTitle();
}

string& ChatRoom::getServerName() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 31);

		invocation.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return ((ChatRoomImplementation*) _impl)->getServerName();
}

void ChatRoom::setOwner(const string& Owner) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 32);
		invocation.addAsciiParameter(Owner);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setOwner(Owner);
}

void ChatRoom::setCreator(const string& Creator) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 33);
		invocation.addAsciiParameter(Creator);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setCreator(Creator);
}

void ChatRoom::setTitle(const string& Title) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 34);
		invocation.addAsciiParameter(Title);

		invocation.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setTitle(Title);
}

unsigned int ChatRoom::getRoomID() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 35);

		return invocation.executeWithUnsignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getRoomID();
}

int ChatRoom::getSubRoomsSize() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 36);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getSubRoomsSize();
}

ChatRoom* ChatRoom::getParent() {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 37);

		return (ChatRoom*) invocation.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getParent();
}

int ChatRoom::compareTo(ChatRoom* obj) {
	 if (!deployed)
		throw ObjectNotDeployedException(this);

	if (_impl == NULL) {
		ORBMethodInvocation invocation(this, 38);
		invocation.addObjectParameter(obj);

		return invocation.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->compareTo(obj);
}

/*
 *	ChatRoomAdapter
 */

ChatRoomAdapter::ChatRoomAdapter(ChatRoomImplementation* obj) : ORBObjectAdapter((ORBObjectServant*) obj) {
}

Packet* ChatRoomAdapter::invokeMethod(uint32 methid, ORBMethodInvocation* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter());
		break;
	case 7:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 8:
		addSubRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 9:
		removeSubRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertLong(getSubRoom(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 11:
		resp->insertLong(getSubRoom(inv->getAsciiParameter(_param0_getSubRoom__string_))->_getORBObjectID());
		break;
	case 12:
		addPlayer((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 13:
		removePlayer((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 14:
		removePlayer(inv->getAsciiParameter(_param0_removePlayer__string_));
		break;
	case 15:
		broadcastMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 16:
		resp->insertBoolean(hasPlayer((Player*) inv->getObjectParameter()));
		break;
	case 17:
		resp->insertBoolean(hasPlayer(inv->getAsciiParameter(_param0_hasPlayer__string_)));
		break;
	case 18:
		removeAllPlayers();
		break;
	case 19:
		setPrivate();
		break;
	case 20:
		setPublic();
		break;
	case 21:
		resp->insertBoolean(isPublic());
		break;
	case 22:
		resp->insertBoolean(isPrivate());
		break;
	case 23:
		resp->insertLong(getPlayer(inv->getSignedIntParameter())->_getORBObjectID());
		break;
	case 24:
		resp->insertSignedInt(getPlayerSize());
		break;
	case 25:
		setName(inv->getAsciiParameter(_param0_setName__string_));
		break;
	case 26:
		resp->insertAscii(getName());
		break;
	case 27:
		resp->insertAscii(getFullPath());
		break;
	case 28:
		resp->insertAscii(getOwner());
		break;
	case 29:
		resp->insertAscii(getCreator());
		break;
	case 30:
		resp->insertUnicode(getTitle());
		break;
	case 31:
		resp->insertAscii(getServerName());
		break;
	case 32:
		setOwner(inv->getAsciiParameter(_param0_setOwner__string_));
		break;
	case 33:
		setCreator(inv->getAsciiParameter(_param0_setCreator__string_));
		break;
	case 34:
		setTitle(inv->getAsciiParameter(_param0_setTitle__string_));
		break;
	case 35:
		resp->insertInt(getRoomID());
		break;
	case 36:
		resp->insertSignedInt(getSubRoomsSize());
		break;
	case 37:
		resp->insertLong(getParent()->_getORBObjectID());
		break;
	case 38:
		resp->insertSignedInt(compareTo((ChatRoom*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ChatRoomAdapter::sendTo(Player* player) {
	return ((ChatRoomImplementation*) impl)->sendTo(player);
}

void ChatRoomAdapter::sendDestroyTo(Player* player) {
	return ((ChatRoomImplementation*) impl)->sendDestroyTo(player);
}

void ChatRoomAdapter::addSubRoom(ChatRoom* channel) {
	return ((ChatRoomImplementation*) impl)->addSubRoom(channel);
}

void ChatRoomAdapter::removeSubRoom(ChatRoom* channel) {
	return ((ChatRoomImplementation*) impl)->removeSubRoom(channel);
}

ChatRoom* ChatRoomAdapter::getSubRoom(int i) {
	return ((ChatRoomImplementation*) impl)->getSubRoom(i);
}

ChatRoom* ChatRoomAdapter::getSubRoom(const string& name) {
	return ((ChatRoomImplementation*) impl)->getSubRoom(name);
}

void ChatRoomAdapter::addPlayer(Player* player, bool doLock) {
	return ((ChatRoomImplementation*) impl)->addPlayer(player, doLock);
}

void ChatRoomAdapter::removePlayer(Player* player, bool doLock) {
	return ((ChatRoomImplementation*) impl)->removePlayer(player, doLock);
}

void ChatRoomAdapter::removePlayer(const string& player) {
	return ((ChatRoomImplementation*) impl)->removePlayer(player);
}

void ChatRoomAdapter::broadcastMessage(BaseMessage* msg) {
	return ((ChatRoomImplementation*) impl)->broadcastMessage(msg);
}

bool ChatRoomAdapter::hasPlayer(Player* player) {
	return ((ChatRoomImplementation*) impl)->hasPlayer(player);
}

bool ChatRoomAdapter::hasPlayer(const string& name) {
	return ((ChatRoomImplementation*) impl)->hasPlayer(name);
}

void ChatRoomAdapter::removeAllPlayers() {
	return ((ChatRoomImplementation*) impl)->removeAllPlayers();
}

void ChatRoomAdapter::setPrivate() {
	return ((ChatRoomImplementation*) impl)->setPrivate();
}

void ChatRoomAdapter::setPublic() {
	return ((ChatRoomImplementation*) impl)->setPublic();
}

bool ChatRoomAdapter::isPublic() {
	return ((ChatRoomImplementation*) impl)->isPublic();
}

bool ChatRoomAdapter::isPrivate() {
	return ((ChatRoomImplementation*) impl)->isPrivate();
}

Player* ChatRoomAdapter::getPlayer(int idx) {
	return ((ChatRoomImplementation*) impl)->getPlayer(idx);
}

int ChatRoomAdapter::getPlayerSize() {
	return ((ChatRoomImplementation*) impl)->getPlayerSize();
}

void ChatRoomAdapter::setName(const string& Name) {
	return ((ChatRoomImplementation*) impl)->setName(Name);
}

string& ChatRoomAdapter::getName() {
	return ((ChatRoomImplementation*) impl)->getName();
}

string& ChatRoomAdapter::getFullPath() {
	return ((ChatRoomImplementation*) impl)->getFullPath();
}

string& ChatRoomAdapter::getOwner() {
	return ((ChatRoomImplementation*) impl)->getOwner();
}

string& ChatRoomAdapter::getCreator() {
	return ((ChatRoomImplementation*) impl)->getCreator();
}

unicode& ChatRoomAdapter::getTitle() {
	return ((ChatRoomImplementation*) impl)->getTitle();
}

string& ChatRoomAdapter::getServerName() {
	return ((ChatRoomImplementation*) impl)->getServerName();
}

void ChatRoomAdapter::setOwner(const string& Owner) {
	return ((ChatRoomImplementation*) impl)->setOwner(Owner);
}

void ChatRoomAdapter::setCreator(const string& Creator) {
	return ((ChatRoomImplementation*) impl)->setCreator(Creator);
}

void ChatRoomAdapter::setTitle(const string& Title) {
	return ((ChatRoomImplementation*) impl)->setTitle(Title);
}

unsigned int ChatRoomAdapter::getRoomID() {
	return ((ChatRoomImplementation*) impl)->getRoomID();
}

int ChatRoomAdapter::getSubRoomsSize() {
	return ((ChatRoomImplementation*) impl)->getSubRoomsSize();
}

ChatRoom* ChatRoomAdapter::getParent() {
	return ((ChatRoomImplementation*) impl)->getParent();
}

int ChatRoomAdapter::compareTo(ChatRoom* obj) {
	return ((ChatRoomImplementation*) impl)->compareTo(obj);
}

/*
 *	ChatRoomHelper
 */

ORBClassHelper* ChatRoomHelper::instance = new ChatRoomHelper();

ChatRoomHelper::ChatRoomHelper() {
	className = "ChatRoom";

	ObjectRequestBroker::instance()->registerClass(className, this);
}

ORBClassHelper* ChatRoomHelper::getInstance() {
	if (instance == NULL)
		return instance = new ChatRoomHelper();
	else
		return instance;
}

ORBObject* ChatRoomHelper::instantiateObject() {
	return new ChatRoom();
}

ORBObjectAdapter* ChatRoomHelper::createAdapter(ORBObjectServant* obj) {
	ORBObjectAdapter* adapter = new ChatRoomAdapter((ChatRoomImplementation*)obj);

	ORBObjectStub* stub = new ChatRoom(obj);
	stub->_setORBClassName(className);
	stub->_setClassHelper(this);

	adapter->setStub(stub);

	obj->_setStub(stub);

	return adapter;
}

/*
 *	ChatRoomServant
 */

ChatRoomServant::ChatRoomServant() {
	_classHelper = ChatRoomHelper::getInstance();
}

ChatRoomServant::~ChatRoomServant() {
}
void ChatRoomServant::_setStub(ORBObjectStub* stub) {
	_this = (ChatRoom*) stub;
}

ORBObjectStub* ChatRoomServant::_getStub() {
	return _this;
}

