/*
 *	server/chat/ChatManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "ChatManager.h"

#include "ChatManagerImplementation.h"

#include "room/ChatRoom.h"

#include "server/zone/ZoneServer.h"

/*
 *	ChatManagerStub
 */

ChatManager::ChatManager(ZoneServer* server) {
	_impl = new ChatManagerImplementation(server);
	_impl->_setStub(this);
}

ChatManager::ChatManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

ChatManager::~ChatManager() {
}

void ChatManager::lock(bool dolock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addBooleanParameter(dolock);

		method.executeWithVoidReturn();
	} else
		((ChatManagerImplementation*) _impl)->lock(dolock);
}

void ChatManager::unlock(bool dolock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(dolock);

		method.executeWithVoidReturn();
	} else
		((ChatManagerImplementation*) _impl)->unlock(dolock);
}

/*
 *	ChatManagerAdapter
 */

ChatManagerAdapter::ChatManagerAdapter(ChatManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ChatManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		lock(inv->getBooleanParameter());
		break;
	case 7:
		unlock(inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ChatManagerAdapter::lock(bool dolock) {
	return ((ChatManagerImplementation*) impl)->lock(dolock);
}

void ChatManagerAdapter::unlock(bool dolock) {
	return ((ChatManagerImplementation*) impl)->unlock(dolock);
}

/*
 *	ChatManagerHelper
 */

ChatManagerHelper* ChatManagerHelper::staticInitializer = ChatManagerHelper::instance();

ChatManagerHelper::ChatManagerHelper() {
	className = "ChatManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ChatManagerHelper::finalizeHelper() {
	ChatManagerHelper::finalize();
}

DistributedObject* ChatManagerHelper::instantiateObject() {
	return new ChatManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChatManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatManagerAdapter((ChatManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ChatManagerServant
 */

ChatManagerServant::ChatManagerServant() {
	_classHelper = ChatManagerHelper::instance();
}

ChatManagerServant::~ChatManagerServant() {
}

void ChatManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (ChatManager*) stub;
}

DistributedObjectStub* ChatManagerServant::_getStub() {
	return _this;
}

