/*
 *	server/zone/objects/draftschematic/DraftSchematicValues.cpp generated by engine3 IDL compiler 0.55
 */

#include "DraftSchematicValues.h"

#include "DraftSchematicValuesImplementation.h"

#include "DraftSchematic.h"

/*
 *	DraftSchematicValuesStub
 */

DraftSchematicValues::DraftSchematicValues() {
	_impl = new DraftSchematicValuesImplementation();
	_impl->_setStub(this);
}

DraftSchematicValues::DraftSchematicValues(DummyConstructorParameter* param) {
	_impl = NULL;
}

DraftSchematicValues::~DraftSchematicValues() {
}

void DraftSchematicValues::addExperimentalPropertyTitle(const string& title) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(title);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->addExperimentalPropertyTitle(title);
}

string& DraftSchematicValues::getExperimentalPropertyTitle(const int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getExperimentalPropertyTitle);
		return _return_getExperimentalPropertyTitle;
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getExperimentalPropertyTitle(i);
}

int DraftSchematicValues::getExperimentalPropertyTitleSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getExperimentalPropertyTitleSize();
}

void DraftSchematicValues::setCurrentValue(const string& attribute, float value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(attribute);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->setCurrentValue(attribute, value);
}

void DraftSchematicValues::setCurrentPercentage(const string& attribute, float value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(attribute);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->setCurrentPercentage(attribute, value);
}

void DraftSchematicValues::setMaxPercentage(const string& attribute, float value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(attribute);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->setMaxPercentage(attribute, value);
}

float DraftSchematicValues::getCurrentValue(const string& attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(attribute);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getCurrentValue(attribute);
}

float DraftSchematicValues::getCurrentValue(const int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(index);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getCurrentValue(index);
}

float DraftSchematicValues::getCurrentPercentage(const string& attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addAsciiParameter(attribute);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getCurrentPercentage(attribute);
}

float DraftSchematicValues::getCurrentPercentage(const int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(index);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getCurrentPercentage(index);
}

float DraftSchematicValues::getMaxPercentage(const string& attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addAsciiParameter(attribute);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getMaxPercentage(attribute);
}

float DraftSchematicValues::getMaxPercentage(const int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(index);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getMaxPercentage(index);
}

int DraftSchematicValues::getValuesToSendSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getValuesToSendSize();
}

string& DraftSchematicValues::getValuesToSend(const int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getValuesToSend);
		return _return_getValuesToSend;
	} else
		return ((DraftSchematicValuesImplementation*) _impl)->getValuesToSend(i);
}

void DraftSchematicValues::recalculateValues(DraftSchematic* draftSchematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(draftSchematic);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->recalculateValues(draftSchematic);
}

void DraftSchematicValues::clearAll() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->clearAll();
}

void DraftSchematicValues::clear() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicValuesImplementation*) _impl)->clear();
}

/*
 *	DraftSchematicValuesAdapter
 */

DraftSchematicValuesAdapter::DraftSchematicValuesAdapter(DraftSchematicValuesImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* DraftSchematicValuesAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addExperimentalPropertyTitle(inv->getAsciiParameter(_param0_addExperimentalPropertyTitle__string_));
		break;
	case 7:
		resp->insertAscii(getExperimentalPropertyTitle(inv->getSignedIntParameter()));
		break;
	case 8:
		resp->insertSignedInt(getExperimentalPropertyTitleSize());
		break;
	case 9:
		setCurrentValue(inv->getAsciiParameter(_param0_setCurrentValue__string_float_), inv->getFloatParameter());
		break;
	case 10:
		setCurrentPercentage(inv->getAsciiParameter(_param0_setCurrentPercentage__string_float_), inv->getFloatParameter());
		break;
	case 11:
		setMaxPercentage(inv->getAsciiParameter(_param0_setMaxPercentage__string_float_), inv->getFloatParameter());
		break;
	case 12:
		resp->insertFloat(getCurrentValue(inv->getAsciiParameter(_param0_getCurrentValue__string_)));
		break;
	case 13:
		resp->insertFloat(getCurrentValue(inv->getSignedIntParameter()));
		break;
	case 14:
		resp->insertFloat(getCurrentPercentage(inv->getAsciiParameter(_param0_getCurrentPercentage__string_)));
		break;
	case 15:
		resp->insertFloat(getCurrentPercentage(inv->getSignedIntParameter()));
		break;
	case 16:
		resp->insertFloat(getMaxPercentage(inv->getAsciiParameter(_param0_getMaxPercentage__string_)));
		break;
	case 17:
		resp->insertFloat(getMaxPercentage(inv->getSignedIntParameter()));
		break;
	case 18:
		resp->insertSignedInt(getValuesToSendSize());
		break;
	case 19:
		resp->insertAscii(getValuesToSend(inv->getSignedIntParameter()));
		break;
	case 20:
		recalculateValues((DraftSchematic*) inv->getObjectParameter());
		break;
	case 21:
		clearAll();
		break;
	case 22:
		clear();
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicValuesAdapter::addExperimentalPropertyTitle(const string& title) {
	return ((DraftSchematicValuesImplementation*) impl)->addExperimentalPropertyTitle(title);
}

string& DraftSchematicValuesAdapter::getExperimentalPropertyTitle(const int i) {
	return ((DraftSchematicValuesImplementation*) impl)->getExperimentalPropertyTitle(i);
}

int DraftSchematicValuesAdapter::getExperimentalPropertyTitleSize() {
	return ((DraftSchematicValuesImplementation*) impl)->getExperimentalPropertyTitleSize();
}

void DraftSchematicValuesAdapter::setCurrentValue(const string& attribute, float value) {
	return ((DraftSchematicValuesImplementation*) impl)->setCurrentValue(attribute, value);
}

void DraftSchematicValuesAdapter::setCurrentPercentage(const string& attribute, float value) {
	return ((DraftSchematicValuesImplementation*) impl)->setCurrentPercentage(attribute, value);
}

void DraftSchematicValuesAdapter::setMaxPercentage(const string& attribute, float value) {
	return ((DraftSchematicValuesImplementation*) impl)->setMaxPercentage(attribute, value);
}

float DraftSchematicValuesAdapter::getCurrentValue(const string& attribute) {
	return ((DraftSchematicValuesImplementation*) impl)->getCurrentValue(attribute);
}

float DraftSchematicValuesAdapter::getCurrentValue(const int index) {
	return ((DraftSchematicValuesImplementation*) impl)->getCurrentValue(index);
}

float DraftSchematicValuesAdapter::getCurrentPercentage(const string& attribute) {
	return ((DraftSchematicValuesImplementation*) impl)->getCurrentPercentage(attribute);
}

float DraftSchematicValuesAdapter::getCurrentPercentage(const int index) {
	return ((DraftSchematicValuesImplementation*) impl)->getCurrentPercentage(index);
}

float DraftSchematicValuesAdapter::getMaxPercentage(const string& attribute) {
	return ((DraftSchematicValuesImplementation*) impl)->getMaxPercentage(attribute);
}

float DraftSchematicValuesAdapter::getMaxPercentage(const int index) {
	return ((DraftSchematicValuesImplementation*) impl)->getMaxPercentage(index);
}

int DraftSchematicValuesAdapter::getValuesToSendSize() {
	return ((DraftSchematicValuesImplementation*) impl)->getValuesToSendSize();
}

string& DraftSchematicValuesAdapter::getValuesToSend(const int i) {
	return ((DraftSchematicValuesImplementation*) impl)->getValuesToSend(i);
}

void DraftSchematicValuesAdapter::recalculateValues(DraftSchematic* draftSchematic) {
	return ((DraftSchematicValuesImplementation*) impl)->recalculateValues(draftSchematic);
}

void DraftSchematicValuesAdapter::clearAll() {
	return ((DraftSchematicValuesImplementation*) impl)->clearAll();
}

void DraftSchematicValuesAdapter::clear() {
	return ((DraftSchematicValuesImplementation*) impl)->clear();
}

/*
 *	DraftSchematicValuesHelper
 */

DraftSchematicValuesHelper* DraftSchematicValuesHelper::staticInitializer = DraftSchematicValuesHelper::instance();

DraftSchematicValuesHelper::DraftSchematicValuesHelper() {
	className = "DraftSchematicValues";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicValuesHelper::finalizeHelper() {
	DraftSchematicValuesHelper::finalize();
}

DistributedObject* DraftSchematicValuesHelper::instantiateObject() {
	return new DraftSchematicValues(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicValuesHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicValuesAdapter((DraftSchematicValuesImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DraftSchematicValuesServant
 */

DraftSchematicValuesServant::DraftSchematicValuesServant() {
	_classHelper = DraftSchematicValuesHelper::instance();
}

DraftSchematicValuesServant::~DraftSchematicValuesServant() {
}

void DraftSchematicValuesServant::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematicValues*) stub;
}

DistributedObjectStub* DraftSchematicValuesServant::_getStub() {
	return _this;
}

