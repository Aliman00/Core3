/*
 *	server/zone/objects/creature/bluefrog/BFVector.cpp generated by engine3 IDL compiler 0.55
 */

#include "BFVector.h"

#include "BFVectorImplementation.h"

/*
 *	BFVectorStub
 */

BFVector::BFVector() {
	_impl = new BFVectorImplementation();
	_impl->_setStub(this);
}

BFVector::BFVector(DummyConstructorParameter* param) {
	_impl = NULL;
}

BFVector::~BFVector() {
}

unsigned int BFVector::size() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BFVectorImplementation*) _impl)->size();
}

void BFVector::add(string& item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(item);

		method.executeWithVoidReturn();
	} else
		((BFVectorImplementation*) _impl)->add(item);
}

string& BFVector::get(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(index);

		method.executeWithAsciiReturn(_return_get);
		return _return_get;
	} else
		return ((BFVectorImplementation*) _impl)->get(index);
}

/*
 *	BFVectorAdapter
 */

BFVectorAdapter::BFVectorAdapter(BFVectorImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* BFVectorAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertInt(size());
		break;
	case 7:
		add(inv->getAsciiParameter(_param0_add__string_));
		break;
	case 8:
		resp->insertAscii(get(inv->getUnsignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned int BFVectorAdapter::size() {
	return ((BFVectorImplementation*) impl)->size();
}

void BFVectorAdapter::add(string& item) {
	return ((BFVectorImplementation*) impl)->add(item);
}

string& BFVectorAdapter::get(unsigned int index) {
	return ((BFVectorImplementation*) impl)->get(index);
}

/*
 *	BFVectorHelper
 */

BFVectorHelper* BFVectorHelper::staticInitializer = BFVectorHelper::instance();

BFVectorHelper::BFVectorHelper() {
	className = "BFVector";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BFVectorHelper::finalizeHelper() {
	BFVectorHelper::finalize();
}

DistributedObject* BFVectorHelper::instantiateObject() {
	return new BFVector(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BFVectorHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BFVectorAdapter((BFVectorImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BFVectorServant
 */

BFVectorServant::BFVectorServant() {
	_classHelper = BFVectorHelper::instance();
}

BFVectorServant::~BFVectorServant() {
}

void BFVectorServant::_setStub(DistributedObjectStub* stub) {
	_this = (BFVector*) stub;
}

DistributedObjectStub* BFVectorServant::_getStub() {
	return _this;
}

